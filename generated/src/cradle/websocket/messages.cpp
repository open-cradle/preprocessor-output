// THIS FILE WAS AUTOMATICALLY GENERATED BY THE PREPROCESSOR.
// DO NOT EDIT!

#include <algorithm>
#include <typeinfo>
#include "messages.hpp"
#include <cradle/typing/core/preprocessed.h>
#include <boost/algorithm/string/case_conv.hpp>

namespace cradle {

#line 11 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_registration_message>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_registration_message>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_registration_message>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_registration_message")); } void structure_field_type_info_adder<websocket_registration_message>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["name"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_registration_message>().name)>(),             none);    (*fields)["session"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_registration_message>().session)>(),             none); } bool operator==(websocket_registration_message const& a, websocket_registration_message const& b) { return a.name == b.name && a.session == b.session; } bool operator!=(websocket_registration_message const& a, websocket_registration_message const& b) { return !(a == b); } bool operator<(websocket_registration_message const& a, websocket_registration_message const& b) { if (a.name < b.name) return true; if (b.name < a.name) return false; if (a.session < b.session) return true; if (b.session < a.session) return false;     return false; } void swap(websocket_registration_message& a, websocket_registration_message& b) {     using std::swap;     swap(a.name, b.name);     swap(a.session, b.session); } size_t deep_sizeof(websocket_registration_message const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.name) + deep_sizeof(x.session) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_registration_message const& x) { using cradle::write_field_to_record; write_field_to_record(record, "name", x.name); write_field_to_record(record, "session", x.session); } void to_dynamic(cradle::dynamic* v, websocket_registration_message const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_registration_message& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.name, record, "name"); read_field_from_record(&x.session, record, "session"); } void from_dynamic(websocket_registration_message* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_registration_message const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_registration_message const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.name)); boost::hash_combine(h, cradle::invoke_hash(x.session));  return h; }} namespace cradle { 

#line 18 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_test_query>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_test_query>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_test_query>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_test_query")); } void structure_field_type_info_adder<websocket_test_query>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["message"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_test_query>().message)>(),             none); } bool operator==(websocket_test_query const& a, websocket_test_query const& b) { return a.message == b.message; } bool operator!=(websocket_test_query const& a, websocket_test_query const& b) { return !(a == b); } bool operator<(websocket_test_query const& a, websocket_test_query const& b) { if (a.message < b.message) return true; if (b.message < a.message) return false;     return false; } void swap(websocket_test_query& a, websocket_test_query& b) {     using std::swap;     swap(a.message, b.message); } size_t deep_sizeof(websocket_test_query const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.message) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_test_query const& x) { using cradle::write_field_to_record; write_field_to_record(record, "message", x.message); } void to_dynamic(cradle::dynamic* v, websocket_test_query const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_test_query& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.message, record, "message"); } void from_dynamic(websocket_test_query* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_test_query const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_test_query const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.message));  return h; }} namespace cradle { 

#line 24 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_test_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_test_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_test_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_test_response")); } void structure_field_type_info_adder<websocket_test_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["name"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_test_response>().name)>(),             none);    (*fields)["message"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_test_response>().message)>(),             none); } bool operator==(websocket_test_response const& a, websocket_test_response const& b) { return a.name == b.name && a.message == b.message; } bool operator!=(websocket_test_response const& a, websocket_test_response const& b) { return !(a == b); } bool operator<(websocket_test_response const& a, websocket_test_response const& b) { if (a.name < b.name) return true; if (b.name < a.name) return false; if (a.message < b.message) return true; if (b.message < a.message) return false;     return false; } void swap(websocket_test_response& a, websocket_test_response& b) {     using std::swap;     swap(a.name, b.name);     swap(a.message, b.message); } size_t deep_sizeof(websocket_test_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.name) + deep_sizeof(x.message) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_test_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "name", x.name); write_field_to_record(record, "message", x.message); } void to_dynamic(cradle::dynamic* v, websocket_test_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_test_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.name, record, "name"); read_field_from_record(&x.message, record, "message"); } void from_dynamic(websocket_test_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_test_response const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_test_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.name)); boost::hash_combine(h, cradle::invoke_hash(x.message));  return h; }} namespace cradle { 

#line 31 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_cache_insert>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_cache_insert>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_cache_insert>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_cache_insert")); } void structure_field_type_info_adder<websocket_cache_insert>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["key"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_cache_insert>().key)>(),             none);    (*fields)["value"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_cache_insert>().value)>(),             none); } bool operator==(websocket_cache_insert const& a, websocket_cache_insert const& b) { return a.key == b.key && a.value == b.value; } bool operator!=(websocket_cache_insert const& a, websocket_cache_insert const& b) { return !(a == b); } bool operator<(websocket_cache_insert const& a, websocket_cache_insert const& b) { if (a.key < b.key) return true; if (b.key < a.key) return false; if (a.value < b.value) return true; if (b.value < a.value) return false;     return false; } void swap(websocket_cache_insert& a, websocket_cache_insert& b) {     using std::swap;     swap(a.key, b.key);     swap(a.value, b.value); } size_t deep_sizeof(websocket_cache_insert const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.key) + deep_sizeof(x.value) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_cache_insert const& x) { using cradle::write_field_to_record; write_field_to_record(record, "key", x.key); write_field_to_record(record, "value", x.value); } void to_dynamic(cradle::dynamic* v, websocket_cache_insert const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_cache_insert& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.key, record, "key"); read_field_from_record(&x.value, record, "value"); } void from_dynamic(websocket_cache_insert* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_cache_insert const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_cache_insert const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.key)); boost::hash_combine(h, cradle::invoke_hash(x.value));  return h; }} namespace cradle { 

#line 38 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_cache_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_cache_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_cache_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_cache_response")); } void structure_field_type_info_adder<websocket_cache_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["key"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_cache_response>().key)>(),             none);    (*fields)["value"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_cache_response>().value)>(),             none); } bool operator==(websocket_cache_response const& a, websocket_cache_response const& b) { return a.key == b.key && a.value == b.value; } bool operator!=(websocket_cache_response const& a, websocket_cache_response const& b) { return !(a == b); } bool operator<(websocket_cache_response const& a, websocket_cache_response const& b) { if (a.key < b.key) return true; if (b.key < a.key) return false; if (a.value < b.value) return true; if (b.value < a.value) return false;     return false; } void swap(websocket_cache_response& a, websocket_cache_response& b) {     using std::swap;     swap(a.key, b.key);     swap(a.value, b.value); } size_t deep_sizeof(websocket_cache_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.key) + deep_sizeof(x.value) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_cache_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "key", x.key); write_field_to_record(record, "value", x.value); } void to_dynamic(cradle::dynamic* v, websocket_cache_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_cache_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.key, record, "key"); read_field_from_record(&x.value, record, "value"); } void from_dynamic(websocket_cache_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_cache_response const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_cache_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.key)); boost::hash_combine(h, cradle::invoke_hash(x.value));  return h; }} namespace cradle { 

#line 45 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
void definitive_type_info_query<output_data_encoding>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_enum_type(             cradle::get_enum_type_info<output_data_encoding>()); } void type_info_query<output_data_encoding>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "output_data_encoding")); } void enum_type_info_query<output_data_encoding>::get(     cradle::api_enum_info* info) {     std::map<std::string, cradle::api_enum_value_info> values; values["yaml"] =  cradle::api_enum_value_info( "YAML");values["diagnostic_yaml"] =  cradle::api_enum_value_info( "Diagnostic YAML - This is designed to be more human-friendly and will omit large values (like blobs) that seem meaningless to humans.");values["msgpack"] =  cradle::api_enum_value_info( "MessagePack");values["json"] =  cradle::api_enum_value_info( "JSON");     *info = cradle::api_enum_info(values); } char const* get_value_id(output_data_encoding value) {     switch (value)     { case output_data_encoding::YAML: return "yaml";case output_data_encoding::DIAGNOSTIC_YAML: return "diagnostic_yaml";case output_data_encoding::MSGPACK: return "msgpack";case output_data_encoding::JSON: return "json";     }     CRADLE_THROW(         cradle::invalid_enum_value() <<             cradle::enum_id_info("output_data_encoding") <<             cradle::enum_value_info(int(value))); }void to_dynamic(     cradle::dynamic* v,     output_data_encoding x) {     *v = get_value_id(x); } void from_dynamic(     output_data_encoding* x,     cradle::dynamic const& v) {     string s = cast<string>(v);     if (boost::to_lower_copy(s) == "yaml")     {         *x = output_data_encoding::YAML;         return;     };    if (boost::to_lower_copy(s) == "diagnostic_yaml")     {         *x = output_data_encoding::DIAGNOSTIC_YAML;         return;     };    if (boost::to_lower_copy(s) == "msgpack")     {         *x = output_data_encoding::MSGPACK;         return;     };    if (boost::to_lower_copy(s) == "json")     {         *x = output_data_encoding::JSON;         return;     };     CRADLE_THROW(         cradle::invalid_enum_string() <<             cradle::enum_id_info("output_data_encoding") <<             cradle::enum_string_info(s)); } std::ostream& operator<<(std::ostream& s, output_data_encoding const& x) {     s << get_value_id(x);     return s; } 

#line 59 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
void definitive_type_info_query<input_data_encoding>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_enum_type(             cradle::get_enum_type_info<input_data_encoding>()); } void type_info_query<input_data_encoding>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "input_data_encoding")); } void enum_type_info_query<input_data_encoding>::get(     cradle::api_enum_info* info) {     std::map<std::string, cradle::api_enum_value_info> values; values["yaml"] =  cradle::api_enum_value_info( "YAML");values["msgpack"] =  cradle::api_enum_value_info( "MessagePack");values["json"] =  cradle::api_enum_value_info( "JSON");     *info = cradle::api_enum_info(values); } char const* get_value_id(input_data_encoding value) {     switch (value)     { case input_data_encoding::YAML: return "yaml";case input_data_encoding::MSGPACK: return "msgpack";case input_data_encoding::JSON: return "json";     }     CRADLE_THROW(         cradle::invalid_enum_value() <<             cradle::enum_id_info("input_data_encoding") <<             cradle::enum_value_info(int(value))); }void to_dynamic(     cradle::dynamic* v,     input_data_encoding x) {     *v = get_value_id(x); } void from_dynamic(     input_data_encoding* x,     cradle::dynamic const& v) {     string s = cast<string>(v);     if (boost::to_lower_copy(s) == "yaml")     {         *x = input_data_encoding::YAML;         return;     };    if (boost::to_lower_copy(s) == "msgpack")     {         *x = input_data_encoding::MSGPACK;         return;     };    if (boost::to_lower_copy(s) == "json")     {         *x = input_data_encoding::JSON;         return;     };     CRADLE_THROW(         cradle::invalid_enum_string() <<             cradle::enum_id_info("input_data_encoding") <<             cradle::enum_string_info(s)); } std::ostream& operator<<(std::ostream& s, input_data_encoding const& x) {     s << get_value_id(x);     return s; } 

#line 70 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<iss_object_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<iss_object_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<iss_object_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "iss_object_request")); } void structure_field_type_info_adder<iss_object_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_request>().context_id)>(),             none);    (*fields)["object_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_request>().object_id)>(),             none);    (*fields)["ignore_upgrades"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_request>().ignore_upgrades)>(),             none);    (*fields)["encoding"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_request>().encoding)>(),             none); } bool operator==(iss_object_request const& a, iss_object_request const& b) { return a.context_id == b.context_id && a.object_id == b.object_id && a.ignore_upgrades == b.ignore_upgrades && a.encoding == b.encoding; } bool operator!=(iss_object_request const& a, iss_object_request const& b) { return !(a == b); } bool operator<(iss_object_request const& a, iss_object_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.object_id < b.object_id) return true; if (b.object_id < a.object_id) return false; if (a.ignore_upgrades < b.ignore_upgrades) return true; if (b.ignore_upgrades < a.ignore_upgrades) return false; if (a.encoding < b.encoding) return true; if (b.encoding < a.encoding) return false;     return false; } void swap(iss_object_request& a, iss_object_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.object_id, b.object_id);     swap(a.ignore_upgrades, b.ignore_upgrades);     swap(a.encoding, b.encoding); } size_t deep_sizeof(iss_object_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.object_id) + deep_sizeof(x.ignore_upgrades) + deep_sizeof(x.encoding) ; } void write_fields_to_record(cradle::dynamic_map& record, iss_object_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "object_id", x.object_id); write_field_to_record(record, "ignore_upgrades", x.ignore_upgrades); write_field_to_record(record, "encoding", x.encoding); } void to_dynamic(cradle::dynamic* v, iss_object_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(iss_object_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.object_id, record, "object_id"); read_field_from_record(&x.ignore_upgrades, record, "ignore_upgrades"); read_field_from_record(&x.encoding, record, "encoding"); } void from_dynamic(iss_object_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, iss_object_request const& x) { return s << to_dynamic(x); } size_t hash_value(iss_object_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.object_id)); boost::hash_combine(h, cradle::invoke_hash(x.ignore_upgrades)); boost::hash_combine(h, cradle::invoke_hash(x.encoding));  return h; }} namespace cradle { 

#line 79 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<iss_object_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<iss_object_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<iss_object_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "iss_object_response")); } void structure_field_type_info_adder<iss_object_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["object"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_response>().object)>(),             none); } bool operator==(iss_object_response const& a, iss_object_response const& b) { return a.object == b.object; } bool operator!=(iss_object_response const& a, iss_object_response const& b) { return !(a == b); } bool operator<(iss_object_response const& a, iss_object_response const& b) { if (a.object < b.object) return true; if (b.object < a.object) return false;     return false; } void swap(iss_object_response& a, iss_object_response& b) {     using std::swap;     swap(a.object, b.object); } size_t deep_sizeof(iss_object_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.object) ; } void write_fields_to_record(cradle::dynamic_map& record, iss_object_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "object", x.object); } void to_dynamic(cradle::dynamic* v, iss_object_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(iss_object_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.object, record, "object"); } void from_dynamic(iss_object_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, iss_object_response const& x) { return s << to_dynamic(x); } size_t hash_value(iss_object_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.object));  return h; }} namespace cradle { 

#line 85 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<resolve_iss_object_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<resolve_iss_object_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<resolve_iss_object_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "resolve_iss_object_request")); } void structure_field_type_info_adder<resolve_iss_object_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_iss_object_request>().context_id)>(),             none);    (*fields)["object_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_iss_object_request>().object_id)>(),             none);    (*fields)["ignore_upgrades"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_iss_object_request>().ignore_upgrades)>(),             none); } bool operator==(resolve_iss_object_request const& a, resolve_iss_object_request const& b) { return a.context_id == b.context_id && a.object_id == b.object_id && a.ignore_upgrades == b.ignore_upgrades; } bool operator!=(resolve_iss_object_request const& a, resolve_iss_object_request const& b) { return !(a == b); } bool operator<(resolve_iss_object_request const& a, resolve_iss_object_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.object_id < b.object_id) return true; if (b.object_id < a.object_id) return false; if (a.ignore_upgrades < b.ignore_upgrades) return true; if (b.ignore_upgrades < a.ignore_upgrades) return false;     return false; } void swap(resolve_iss_object_request& a, resolve_iss_object_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.object_id, b.object_id);     swap(a.ignore_upgrades, b.ignore_upgrades); } size_t deep_sizeof(resolve_iss_object_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.object_id) + deep_sizeof(x.ignore_upgrades) ; } void write_fields_to_record(cradle::dynamic_map& record, resolve_iss_object_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "object_id", x.object_id); write_field_to_record(record, "ignore_upgrades", x.ignore_upgrades); } void to_dynamic(cradle::dynamic* v, resolve_iss_object_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(resolve_iss_object_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.object_id, record, "object_id"); read_field_from_record(&x.ignore_upgrades, record, "ignore_upgrades"); } void from_dynamic(resolve_iss_object_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, resolve_iss_object_request const& x) { return s << to_dynamic(x); } size_t hash_value(resolve_iss_object_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.object_id)); boost::hash_combine(h, cradle::invoke_hash(x.ignore_upgrades));  return h; }} namespace cradle { 

#line 93 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<resolve_iss_object_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<resolve_iss_object_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<resolve_iss_object_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "resolve_iss_object_response")); } void structure_field_type_info_adder<resolve_iss_object_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["immutable_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_iss_object_response>().immutable_id)>(),             none); } bool operator==(resolve_iss_object_response const& a, resolve_iss_object_response const& b) { return a.immutable_id == b.immutable_id; } bool operator!=(resolve_iss_object_response const& a, resolve_iss_object_response const& b) { return !(a == b); } bool operator<(resolve_iss_object_response const& a, resolve_iss_object_response const& b) { if (a.immutable_id < b.immutable_id) return true; if (b.immutable_id < a.immutable_id) return false;     return false; } void swap(resolve_iss_object_response& a, resolve_iss_object_response& b) {     using std::swap;     swap(a.immutable_id, b.immutable_id); } size_t deep_sizeof(resolve_iss_object_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.immutable_id) ; } void write_fields_to_record(cradle::dynamic_map& record, resolve_iss_object_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "immutable_id", x.immutable_id); } void to_dynamic(cradle::dynamic* v, resolve_iss_object_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(resolve_iss_object_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.immutable_id, record, "immutable_id"); } void from_dynamic(resolve_iss_object_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, resolve_iss_object_response const& x) { return s << to_dynamic(x); } size_t hash_value(resolve_iss_object_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.immutable_id));  return h; }} namespace cradle { 

#line 99 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<iss_object_metadata_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<iss_object_metadata_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<iss_object_metadata_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "iss_object_metadata_request")); } void structure_field_type_info_adder<iss_object_metadata_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_metadata_request>().context_id)>(),             none);    (*fields)["object_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_metadata_request>().object_id)>(),             none); } bool operator==(iss_object_metadata_request const& a, iss_object_metadata_request const& b) { return a.context_id == b.context_id && a.object_id == b.object_id; } bool operator!=(iss_object_metadata_request const& a, iss_object_metadata_request const& b) { return !(a == b); } bool operator<(iss_object_metadata_request const& a, iss_object_metadata_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.object_id < b.object_id) return true; if (b.object_id < a.object_id) return false;     return false; } void swap(iss_object_metadata_request& a, iss_object_metadata_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.object_id, b.object_id); } size_t deep_sizeof(iss_object_metadata_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.object_id) ; } void write_fields_to_record(cradle::dynamic_map& record, iss_object_metadata_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "object_id", x.object_id); } void to_dynamic(cradle::dynamic* v, iss_object_metadata_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(iss_object_metadata_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.object_id, record, "object_id"); } void from_dynamic(iss_object_metadata_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, iss_object_metadata_request const& x) { return s << to_dynamic(x); } size_t hash_value(iss_object_metadata_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.object_id));  return h; }} namespace cradle { 

#line 106 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<iss_object_metadata_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<iss_object_metadata_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<iss_object_metadata_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "iss_object_metadata_response")); } void structure_field_type_info_adder<iss_object_metadata_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["metadata"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_object_metadata_response>().metadata)>(),             none); } bool operator==(iss_object_metadata_response const& a, iss_object_metadata_response const& b) { return a.metadata == b.metadata; } bool operator!=(iss_object_metadata_response const& a, iss_object_metadata_response const& b) { return !(a == b); } bool operator<(iss_object_metadata_response const& a, iss_object_metadata_response const& b) { if (a.metadata < b.metadata) return true; if (b.metadata < a.metadata) return false;     return false; } void swap(iss_object_metadata_response& a, iss_object_metadata_response& b) {     using std::swap;     swap(a.metadata, b.metadata); } size_t deep_sizeof(iss_object_metadata_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.metadata) ; } void write_fields_to_record(cradle::dynamic_map& record, iss_object_metadata_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "metadata", x.metadata); } void to_dynamic(cradle::dynamic* v, iss_object_metadata_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(iss_object_metadata_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.metadata, record, "metadata"); } void from_dynamic(iss_object_metadata_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, iss_object_metadata_response const& x) { return s << to_dynamic(x); } size_t hash_value(iss_object_metadata_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.metadata));  return h; }} namespace cradle { 

#line 112 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<post_iss_object_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<post_iss_object_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<post_iss_object_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "post_iss_object_request")); } void structure_field_type_info_adder<post_iss_object_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_iss_object_request>().context_id)>(),             none);    (*fields)["schema"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_iss_object_request>().schema)>(),             none);    (*fields)["encoding"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_iss_object_request>().encoding)>(),             none);    (*fields)["object"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_iss_object_request>().object)>(),             none); } bool operator==(post_iss_object_request const& a, post_iss_object_request const& b) { return a.context_id == b.context_id && a.schema == b.schema && a.encoding == b.encoding && a.object == b.object; } bool operator!=(post_iss_object_request const& a, post_iss_object_request const& b) { return !(a == b); } bool operator<(post_iss_object_request const& a, post_iss_object_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.schema < b.schema) return true; if (b.schema < a.schema) return false; if (a.encoding < b.encoding) return true; if (b.encoding < a.encoding) return false; if (a.object < b.object) return true; if (b.object < a.object) return false;     return false; } void swap(post_iss_object_request& a, post_iss_object_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.schema, b.schema);     swap(a.encoding, b.encoding);     swap(a.object, b.object); } size_t deep_sizeof(post_iss_object_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.schema) + deep_sizeof(x.encoding) + deep_sizeof(x.object) ; } void write_fields_to_record(cradle::dynamic_map& record, post_iss_object_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "schema", x.schema); write_field_to_record(record, "encoding", x.encoding); write_field_to_record(record, "object", x.object); } void to_dynamic(cradle::dynamic* v, post_iss_object_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(post_iss_object_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.schema, record, "schema"); read_field_from_record(&x.encoding, record, "encoding"); read_field_from_record(&x.object, record, "object"); } void from_dynamic(post_iss_object_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, post_iss_object_request const& x) { return s << to_dynamic(x); } size_t hash_value(post_iss_object_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.schema)); boost::hash_combine(h, cradle::invoke_hash(x.encoding)); boost::hash_combine(h, cradle::invoke_hash(x.object));  return h; }} namespace cradle { 

#line 121 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<post_iss_object_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<post_iss_object_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<post_iss_object_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "post_iss_object_response")); } void structure_field_type_info_adder<post_iss_object_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["object_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_iss_object_response>().object_id)>(),             none); } bool operator==(post_iss_object_response const& a, post_iss_object_response const& b) { return a.object_id == b.object_id; } bool operator!=(post_iss_object_response const& a, post_iss_object_response const& b) { return !(a == b); } bool operator<(post_iss_object_response const& a, post_iss_object_response const& b) { if (a.object_id < b.object_id) return true; if (b.object_id < a.object_id) return false;     return false; } void swap(post_iss_object_response& a, post_iss_object_response& b) {     using std::swap;     swap(a.object_id, b.object_id); } size_t deep_sizeof(post_iss_object_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.object_id) ; } void write_fields_to_record(cradle::dynamic_map& record, post_iss_object_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "object_id", x.object_id); } void to_dynamic(cradle::dynamic* v, post_iss_object_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(post_iss_object_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.object_id, record, "object_id"); } void from_dynamic(post_iss_object_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, post_iss_object_response const& x) { return s << to_dynamic(x); } size_t hash_value(post_iss_object_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.object_id));  return h; }} namespace cradle { 

#line 127 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<copy_iss_object_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<copy_iss_object_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<copy_iss_object_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "copy_iss_object_request")); } void structure_field_type_info_adder<copy_iss_object_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["source_context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<copy_iss_object_request>().source_context_id)>(),             none);    (*fields)["destination_context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<copy_iss_object_request>().destination_context_id)>(),             none);    (*fields)["object_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<copy_iss_object_request>().object_id)>(),             none); } bool operator==(copy_iss_object_request const& a, copy_iss_object_request const& b) { return a.source_context_id == b.source_context_id && a.destination_context_id == b.destination_context_id && a.object_id == b.object_id; } bool operator!=(copy_iss_object_request const& a, copy_iss_object_request const& b) { return !(a == b); } bool operator<(copy_iss_object_request const& a, copy_iss_object_request const& b) { if (a.source_context_id < b.source_context_id) return true; if (b.source_context_id < a.source_context_id) return false; if (a.destination_context_id < b.destination_context_id) return true; if (b.destination_context_id < a.destination_context_id) return false; if (a.object_id < b.object_id) return true; if (b.object_id < a.object_id) return false;     return false; } void swap(copy_iss_object_request& a, copy_iss_object_request& b) {     using std::swap;     swap(a.source_context_id, b.source_context_id);     swap(a.destination_context_id, b.destination_context_id);     swap(a.object_id, b.object_id); } size_t deep_sizeof(copy_iss_object_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.source_context_id) + deep_sizeof(x.destination_context_id) + deep_sizeof(x.object_id) ; } void write_fields_to_record(cradle::dynamic_map& record, copy_iss_object_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "source_context_id", x.source_context_id); write_field_to_record(record, "destination_context_id", x.destination_context_id); write_field_to_record(record, "object_id", x.object_id); } void to_dynamic(cradle::dynamic* v, copy_iss_object_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(copy_iss_object_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.source_context_id, record, "source_context_id"); read_field_from_record(&x.destination_context_id, record, "destination_context_id"); read_field_from_record(&x.object_id, record, "object_id"); } void from_dynamic(copy_iss_object_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, copy_iss_object_request const& x) { return s << to_dynamic(x); } size_t hash_value(copy_iss_object_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.source_context_id)); boost::hash_combine(h, cradle::invoke_hash(x.destination_context_id)); boost::hash_combine(h, cradle::invoke_hash(x.object_id));  return h; }} namespace cradle { 

#line 135 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<copy_calculation_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<copy_calculation_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<copy_calculation_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "copy_calculation_request")); } void structure_field_type_info_adder<copy_calculation_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["source_context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<copy_calculation_request>().source_context_id)>(),             none);    (*fields)["destination_context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<copy_calculation_request>().destination_context_id)>(),             none);    (*fields)["calculation_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<copy_calculation_request>().calculation_id)>(),             none); } bool operator==(copy_calculation_request const& a, copy_calculation_request const& b) { return a.source_context_id == b.source_context_id && a.destination_context_id == b.destination_context_id && a.calculation_id == b.calculation_id; } bool operator!=(copy_calculation_request const& a, copy_calculation_request const& b) { return !(a == b); } bool operator<(copy_calculation_request const& a, copy_calculation_request const& b) { if (a.source_context_id < b.source_context_id) return true; if (b.source_context_id < a.source_context_id) return false; if (a.destination_context_id < b.destination_context_id) return true; if (b.destination_context_id < a.destination_context_id) return false; if (a.calculation_id < b.calculation_id) return true; if (b.calculation_id < a.calculation_id) return false;     return false; } void swap(copy_calculation_request& a, copy_calculation_request& b) {     using std::swap;     swap(a.source_context_id, b.source_context_id);     swap(a.destination_context_id, b.destination_context_id);     swap(a.calculation_id, b.calculation_id); } size_t deep_sizeof(copy_calculation_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.source_context_id) + deep_sizeof(x.destination_context_id) + deep_sizeof(x.calculation_id) ; } void write_fields_to_record(cradle::dynamic_map& record, copy_calculation_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "source_context_id", x.source_context_id); write_field_to_record(record, "destination_context_id", x.destination_context_id); write_field_to_record(record, "calculation_id", x.calculation_id); } void to_dynamic(cradle::dynamic* v, copy_calculation_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(copy_calculation_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.source_context_id, record, "source_context_id"); read_field_from_record(&x.destination_context_id, record, "destination_context_id"); read_field_from_record(&x.calculation_id, record, "calculation_id"); } void from_dynamic(copy_calculation_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, copy_calculation_request const& x) { return s << to_dynamic(x); } size_t hash_value(copy_calculation_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.source_context_id)); boost::hash_combine(h, cradle::invoke_hash(x.destination_context_id)); boost::hash_combine(h, cradle::invoke_hash(x.calculation_id));  return h; }} namespace cradle { 

#line 143 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<post_calculation_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<post_calculation_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<post_calculation_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "post_calculation_request")); } void structure_field_type_info_adder<post_calculation_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_calculation_request>().context_id)>(),             none);    (*fields)["calculation"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_calculation_request>().calculation)>(),             none); } bool operator==(post_calculation_request const& a, post_calculation_request const& b) { return a.context_id == b.context_id && a.calculation == b.calculation; } bool operator!=(post_calculation_request const& a, post_calculation_request const& b) { return !(a == b); } bool operator<(post_calculation_request const& a, post_calculation_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.calculation < b.calculation) return true; if (b.calculation < a.calculation) return false;     return false; } void swap(post_calculation_request& a, post_calculation_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.calculation, b.calculation); } size_t deep_sizeof(post_calculation_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.calculation) ; } void write_fields_to_record(cradle::dynamic_map& record, post_calculation_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "calculation", x.calculation); } void to_dynamic(cradle::dynamic* v, post_calculation_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(post_calculation_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.calculation, record, "calculation"); } void from_dynamic(post_calculation_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, post_calculation_request const& x) { return s << to_dynamic(x); } size_t hash_value(post_calculation_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.calculation));  return h; }} namespace cradle { 

#line 150 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<post_calculation_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<post_calculation_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<post_calculation_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "post_calculation_response")); } void structure_field_type_info_adder<post_calculation_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["calculation_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<post_calculation_response>().calculation_id)>(),             none); } bool operator==(post_calculation_response const& a, post_calculation_response const& b) { return a.calculation_id == b.calculation_id; } bool operator!=(post_calculation_response const& a, post_calculation_response const& b) { return !(a == b); } bool operator<(post_calculation_response const& a, post_calculation_response const& b) { if (a.calculation_id < b.calculation_id) return true; if (b.calculation_id < a.calculation_id) return false;     return false; } void swap(post_calculation_response& a, post_calculation_response& b) {     using std::swap;     swap(a.calculation_id, b.calculation_id); } size_t deep_sizeof(post_calculation_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.calculation_id) ; } void write_fields_to_record(cradle::dynamic_map& record, post_calculation_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "calculation_id", x.calculation_id); } void to_dynamic(cradle::dynamic* v, post_calculation_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(post_calculation_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.calculation_id, record, "calculation_id"); } void from_dynamic(post_calculation_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, post_calculation_response const& x) { return s << to_dynamic(x); } size_t hash_value(post_calculation_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.calculation_id));  return h; }} namespace cradle { 

#line 156 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<calculation_search_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<calculation_search_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<calculation_search_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "calculation_search_request")); } void structure_field_type_info_adder<calculation_search_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_search_request>().context_id)>(),             none);    (*fields)["calculation_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_search_request>().calculation_id)>(),             none);    (*fields)["search_string"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_search_request>().search_string)>(),             none); } bool operator==(calculation_search_request const& a, calculation_search_request const& b) { return a.context_id == b.context_id && a.calculation_id == b.calculation_id && a.search_string == b.search_string; } bool operator!=(calculation_search_request const& a, calculation_search_request const& b) { return !(a == b); } bool operator<(calculation_search_request const& a, calculation_search_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.calculation_id < b.calculation_id) return true; if (b.calculation_id < a.calculation_id) return false; if (a.search_string < b.search_string) return true; if (b.search_string < a.search_string) return false;     return false; } void swap(calculation_search_request& a, calculation_search_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.calculation_id, b.calculation_id);     swap(a.search_string, b.search_string); } size_t deep_sizeof(calculation_search_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.calculation_id) + deep_sizeof(x.search_string) ; } void write_fields_to_record(cradle::dynamic_map& record, calculation_search_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "calculation_id", x.calculation_id); write_field_to_record(record, "search_string", x.search_string); } void to_dynamic(cradle::dynamic* v, calculation_search_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(calculation_search_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.calculation_id, record, "calculation_id"); read_field_from_record(&x.search_string, record, "search_string"); } void from_dynamic(calculation_search_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, calculation_search_request const& x) { return s << to_dynamic(x); } size_t hash_value(calculation_search_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.calculation_id)); boost::hash_combine(h, cradle::invoke_hash(x.search_string));  return h; }} namespace cradle { 

#line 164 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<calculation_search_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<calculation_search_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<calculation_search_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "calculation_search_response")); } void structure_field_type_info_adder<calculation_search_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["matches"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_search_response>().matches)>(),             none); } bool operator==(calculation_search_response const& a, calculation_search_response const& b) { return a.matches == b.matches; } bool operator!=(calculation_search_response const& a, calculation_search_response const& b) { return !(a == b); } bool operator<(calculation_search_response const& a, calculation_search_response const& b) { if (a.matches < b.matches) return true; if (b.matches < a.matches) return false;     return false; } void swap(calculation_search_response& a, calculation_search_response& b) {     using std::swap;     swap(a.matches, b.matches); } size_t deep_sizeof(calculation_search_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.matches) ; } void write_fields_to_record(cradle::dynamic_map& record, calculation_search_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "matches", x.matches); } void to_dynamic(cradle::dynamic* v, calculation_search_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(calculation_search_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.matches, record, "matches"); } void from_dynamic(calculation_search_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, calculation_search_response const& x) { return s << to_dynamic(x); } size_t hash_value(calculation_search_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.matches));  return h; }} namespace cradle { 

#line 170 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<resolve_meta_chain_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<resolve_meta_chain_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<resolve_meta_chain_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "resolve_meta_chain_request")); } void structure_field_type_info_adder<resolve_meta_chain_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_meta_chain_request>().context_id)>(),             none);    (*fields)["generator"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_meta_chain_request>().generator)>(),             none); } bool operator==(resolve_meta_chain_request const& a, resolve_meta_chain_request const& b) { return a.context_id == b.context_id && a.generator == b.generator; } bool operator!=(resolve_meta_chain_request const& a, resolve_meta_chain_request const& b) { return !(a == b); } bool operator<(resolve_meta_chain_request const& a, resolve_meta_chain_request const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.generator < b.generator) return true; if (b.generator < a.generator) return false;     return false; } void swap(resolve_meta_chain_request& a, resolve_meta_chain_request& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.generator, b.generator); } size_t deep_sizeof(resolve_meta_chain_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.generator) ; } void write_fields_to_record(cradle::dynamic_map& record, resolve_meta_chain_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "generator", x.generator); } void to_dynamic(cradle::dynamic* v, resolve_meta_chain_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(resolve_meta_chain_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.generator, record, "generator"); } void from_dynamic(resolve_meta_chain_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, resolve_meta_chain_request const& x) { return s << to_dynamic(x); } size_t hash_value(resolve_meta_chain_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.generator));  return h; }} namespace cradle { 

#line 177 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<resolve_meta_chain_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<resolve_meta_chain_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<resolve_meta_chain_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "resolve_meta_chain_response")); } void structure_field_type_info_adder<resolve_meta_chain_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["calculation_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_meta_chain_response>().calculation_id)>(),             none); } bool operator==(resolve_meta_chain_response const& a, resolve_meta_chain_response const& b) { return a.calculation_id == b.calculation_id; } bool operator!=(resolve_meta_chain_response const& a, resolve_meta_chain_response const& b) { return !(a == b); } bool operator<(resolve_meta_chain_response const& a, resolve_meta_chain_response const& b) { if (a.calculation_id < b.calculation_id) return true; if (b.calculation_id < a.calculation_id) return false;     return false; } void swap(resolve_meta_chain_response& a, resolve_meta_chain_response& b) {     using std::swap;     swap(a.calculation_id, b.calculation_id); } size_t deep_sizeof(resolve_meta_chain_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.calculation_id) ; } void write_fields_to_record(cradle::dynamic_map& record, resolve_meta_chain_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "calculation_id", x.calculation_id); } void to_dynamic(cradle::dynamic* v, resolve_meta_chain_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(resolve_meta_chain_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.calculation_id, record, "calculation_id"); } void from_dynamic(resolve_meta_chain_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, resolve_meta_chain_response const& x) { return s << to_dynamic(x); } size_t hash_value(resolve_meta_chain_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.calculation_id));  return h; }} namespace cradle { 

#line 183 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<calculation_request_message>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<calculation_request_message>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<calculation_request_message>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "calculation_request_message")); } void structure_field_type_info_adder<calculation_request_message>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_request_message>().context_id)>(),             none);    (*fields)["calculation_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_request_message>().calculation_id)>(),             none); } bool operator==(calculation_request_message const& a, calculation_request_message const& b) { return a.context_id == b.context_id && a.calculation_id == b.calculation_id; } bool operator!=(calculation_request_message const& a, calculation_request_message const& b) { return !(a == b); } bool operator<(calculation_request_message const& a, calculation_request_message const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.calculation_id < b.calculation_id) return true; if (b.calculation_id < a.calculation_id) return false;     return false; } void swap(calculation_request_message& a, calculation_request_message& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.calculation_id, b.calculation_id); } size_t deep_sizeof(calculation_request_message const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.calculation_id) ; } void write_fields_to_record(cradle::dynamic_map& record, calculation_request_message const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "calculation_id", x.calculation_id); } void to_dynamic(cradle::dynamic* v, calculation_request_message const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(calculation_request_message& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.calculation_id, record, "calculation_id"); } void from_dynamic(calculation_request_message* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, calculation_request_message const& x) { return s << to_dynamic(x); } size_t hash_value(calculation_request_message const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.calculation_id));  return h; }} namespace cradle { 

#line 190 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<calculation_request_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<calculation_request_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<calculation_request_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "calculation_request_response")); } void structure_field_type_info_adder<calculation_request_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["calculation"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_request_response>().calculation)>(),             none); } bool operator==(calculation_request_response const& a, calculation_request_response const& b) { return a.calculation == b.calculation; } bool operator!=(calculation_request_response const& a, calculation_request_response const& b) { return !(a == b); } bool operator<(calculation_request_response const& a, calculation_request_response const& b) { if (a.calculation < b.calculation) return true; if (b.calculation < a.calculation) return false;     return false; } void swap(calculation_request_response& a, calculation_request_response& b) {     using std::swap;     swap(a.calculation, b.calculation); } size_t deep_sizeof(calculation_request_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.calculation) ; } void write_fields_to_record(cradle::dynamic_map& record, calculation_request_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "calculation", x.calculation); } void to_dynamic(cradle::dynamic* v, calculation_request_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(calculation_request_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.calculation, record, "calculation"); } void from_dynamic(calculation_request_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, calculation_request_response const& x) { return s << to_dynamic(x); } size_t hash_value(calculation_request_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.calculation));  return h; }} namespace cradle { 

#line 196 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<calculation_diff_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<calculation_diff_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<calculation_diff_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "calculation_diff_request")); } void structure_field_type_info_adder<calculation_diff_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["id_a"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_diff_request>().id_a)>(),             none);    (*fields)["context_a"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_diff_request>().context_a)>(),             none);    (*fields)["id_b"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_diff_request>().id_b)>(),             none);    (*fields)["context_b"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<calculation_diff_request>().context_b)>(),             none); } bool operator==(calculation_diff_request const& a, calculation_diff_request const& b) { return a.id_a == b.id_a && a.context_a == b.context_a && a.id_b == b.id_b && a.context_b == b.context_b; } bool operator!=(calculation_diff_request const& a, calculation_diff_request const& b) { return !(a == b); } bool operator<(calculation_diff_request const& a, calculation_diff_request const& b) { if (a.id_a < b.id_a) return true; if (b.id_a < a.id_a) return false; if (a.context_a < b.context_a) return true; if (b.context_a < a.context_a) return false; if (a.id_b < b.id_b) return true; if (b.id_b < a.id_b) return false; if (a.context_b < b.context_b) return true; if (b.context_b < a.context_b) return false;     return false; } void swap(calculation_diff_request& a, calculation_diff_request& b) {     using std::swap;     swap(a.id_a, b.id_a);     swap(a.context_a, b.context_a);     swap(a.id_b, b.id_b);     swap(a.context_b, b.context_b); } size_t deep_sizeof(calculation_diff_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.id_a) + deep_sizeof(x.context_a) + deep_sizeof(x.id_b) + deep_sizeof(x.context_b) ; } void write_fields_to_record(cradle::dynamic_map& record, calculation_diff_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "id_a", x.id_a); write_field_to_record(record, "context_a", x.context_a); write_field_to_record(record, "id_b", x.id_b); write_field_to_record(record, "context_b", x.context_b); } void to_dynamic(cradle::dynamic* v, calculation_diff_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(calculation_diff_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.id_a, record, "id_a"); read_field_from_record(&x.context_a, record, "context_a"); read_field_from_record(&x.id_b, record, "id_b"); read_field_from_record(&x.context_b, record, "context_b"); } void from_dynamic(calculation_diff_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, calculation_diff_request const& x) { return s << to_dynamic(x); } size_t hash_value(calculation_diff_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.id_a)); boost::hash_combine(h, cradle::invoke_hash(x.context_a)); boost::hash_combine(h, cradle::invoke_hash(x.id_b)); boost::hash_combine(h, cradle::invoke_hash(x.context_b));  return h; }} namespace cradle { 

#line 205 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<object_node_diff>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<object_node_diff>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<object_node_diff>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "object_node_diff")); } void structure_field_type_info_adder<object_node_diff>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["service"] =         cradle::api_structure_field_info(             "the service that this node is from (ISS or calc)",             cradle::get_type_info<decltype(std::declval<object_node_diff>().service)>(),             none);    (*fields)["path_from_root"] =         cradle::api_structure_field_info(             "the path from the root object to the node being diffed",             cradle::get_type_info<decltype(std::declval<object_node_diff>().path_from_root)>(),             none);    (*fields)["id_in_a"] =         cradle::api_structure_field_info(             "ID of the node in the 'a' object",             cradle::get_type_info<decltype(std::declval<object_node_diff>().id_in_a)>(),             none);    (*fields)["id_in_b"] =         cradle::api_structure_field_info(             "ID of the node in the 'b' object",             cradle::get_type_info<decltype(std::declval<object_node_diff>().id_in_b)>(),             none);    (*fields)["diff"] =         cradle::api_structure_field_info(             "diff within this node",             cradle::get_type_info<decltype(std::declval<object_node_diff>().diff)>(),             none); } bool operator==(object_node_diff const& a, object_node_diff const& b) { return a.service == b.service && a.path_from_root == b.path_from_root && a.id_in_a == b.id_in_a && a.id_in_b == b.id_in_b && a.diff == b.diff; } bool operator!=(object_node_diff const& a, object_node_diff const& b) { return !(a == b); } bool operator<(object_node_diff const& a, object_node_diff const& b) { if (a.service < b.service) return true; if (b.service < a.service) return false; if (a.path_from_root < b.path_from_root) return true; if (b.path_from_root < a.path_from_root) return false; if (a.id_in_a < b.id_in_a) return true; if (b.id_in_a < a.id_in_a) return false; if (a.id_in_b < b.id_in_b) return true; if (b.id_in_b < a.id_in_b) return false; if (a.diff < b.diff) return true; if (b.diff < a.diff) return false;     return false; } void swap(object_node_diff& a, object_node_diff& b) {     using std::swap;     swap(a.service, b.service);     swap(a.path_from_root, b.path_from_root);     swap(a.id_in_a, b.id_in_a);     swap(a.id_in_b, b.id_in_b);     swap(a.diff, b.diff); } size_t deep_sizeof(object_node_diff const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.service) + deep_sizeof(x.path_from_root) + deep_sizeof(x.id_in_a) + deep_sizeof(x.id_in_b) + deep_sizeof(x.diff) ; } void write_fields_to_record(cradle::dynamic_map& record, object_node_diff const& x) { using cradle::write_field_to_record; write_field_to_record(record, "service", x.service); write_field_to_record(record, "path_from_root", x.path_from_root); write_field_to_record(record, "id_in_a", x.id_in_a); write_field_to_record(record, "id_in_b", x.id_in_b); write_field_to_record(record, "diff", x.diff); } void to_dynamic(cradle::dynamic* v, object_node_diff const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(object_node_diff& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.service, record, "service"); read_field_from_record(&x.path_from_root, record, "path_from_root"); read_field_from_record(&x.id_in_a, record, "id_in_a"); read_field_from_record(&x.id_in_b, record, "id_in_b"); read_field_from_record(&x.diff, record, "diff"); } void from_dynamic(object_node_diff* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, object_node_diff const& x) { return s << to_dynamic(x); } size_t hash_value(object_node_diff const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.service)); boost::hash_combine(h, cradle::invoke_hash(x.path_from_root)); boost::hash_combine(h, cradle::invoke_hash(x.id_in_a)); boost::hash_combine(h, cradle::invoke_hash(x.id_in_b)); boost::hash_combine(h, cradle::invoke_hash(x.diff));  return h; }} namespace cradle { 

#line 224 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<iss_diff_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<iss_diff_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<iss_diff_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "iss_diff_request")); } void structure_field_type_info_adder<iss_diff_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["id_a"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_diff_request>().id_a)>(),             none);    (*fields)["context_a"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_diff_request>().context_a)>(),             none);    (*fields)["id_b"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_diff_request>().id_b)>(),             none);    (*fields)["context_b"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<iss_diff_request>().context_b)>(),             none); } bool operator==(iss_diff_request const& a, iss_diff_request const& b) { return a.id_a == b.id_a && a.context_a == b.context_a && a.id_b == b.id_b && a.context_b == b.context_b; } bool operator!=(iss_diff_request const& a, iss_diff_request const& b) { return !(a == b); } bool operator<(iss_diff_request const& a, iss_diff_request const& b) { if (a.id_a < b.id_a) return true; if (b.id_a < a.id_a) return false; if (a.context_a < b.context_a) return true; if (b.context_a < a.context_a) return false; if (a.id_b < b.id_b) return true; if (b.id_b < a.id_b) return false; if (a.context_b < b.context_b) return true; if (b.context_b < a.context_b) return false;     return false; } void swap(iss_diff_request& a, iss_diff_request& b) {     using std::swap;     swap(a.id_a, b.id_a);     swap(a.context_a, b.context_a);     swap(a.id_b, b.id_b);     swap(a.context_b, b.context_b); } size_t deep_sizeof(iss_diff_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.id_a) + deep_sizeof(x.context_a) + deep_sizeof(x.id_b) + deep_sizeof(x.context_b) ; } void write_fields_to_record(cradle::dynamic_map& record, iss_diff_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "id_a", x.id_a); write_field_to_record(record, "context_a", x.context_a); write_field_to_record(record, "id_b", x.id_b); write_field_to_record(record, "context_b", x.context_b); } void to_dynamic(cradle::dynamic* v, iss_diff_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(iss_diff_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.id_a, record, "id_a"); read_field_from_record(&x.context_a, record, "context_a"); read_field_from_record(&x.id_b, record, "id_b"); read_field_from_record(&x.context_b, record, "context_b"); } void from_dynamic(iss_diff_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, iss_diff_request const& x) { return s << to_dynamic(x); } size_t hash_value(iss_diff_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.id_a)); boost::hash_combine(h, cradle::invoke_hash(x.context_a)); boost::hash_combine(h, cradle::invoke_hash(x.id_b)); boost::hash_combine(h, cradle::invoke_hash(x.context_b));  return h; }} namespace cradle { 

#line 235 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<results_api_query>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<results_api_query>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<results_api_query>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "results_api_query")); } void structure_field_type_info_adder<results_api_query>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["context_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<results_api_query>().context_id)>(),             none);    (*fields)["plan_iss_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<results_api_query>().plan_iss_id)>(),             none);    (*fields)["function"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<results_api_query>().function)>(),             none);    (*fields)["args"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<results_api_query>().args)>(),             none); } bool operator==(results_api_query const& a, results_api_query const& b) { return a.context_id == b.context_id && a.plan_iss_id == b.plan_iss_id && a.function == b.function && a.args == b.args; } bool operator!=(results_api_query const& a, results_api_query const& b) { return !(a == b); } bool operator<(results_api_query const& a, results_api_query const& b) { if (a.context_id < b.context_id) return true; if (b.context_id < a.context_id) return false; if (a.plan_iss_id < b.plan_iss_id) return true; if (b.plan_iss_id < a.plan_iss_id) return false; if (a.function < b.function) return true; if (b.function < a.function) return false; if (a.args < b.args) return true; if (b.args < a.args) return false;     return false; } void swap(results_api_query& a, results_api_query& b) {     using std::swap;     swap(a.context_id, b.context_id);     swap(a.plan_iss_id, b.plan_iss_id);     swap(a.function, b.function);     swap(a.args, b.args); } size_t deep_sizeof(results_api_query const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.context_id) + deep_sizeof(x.plan_iss_id) + deep_sizeof(x.function) + deep_sizeof(x.args) ; } void write_fields_to_record(cradle::dynamic_map& record, results_api_query const& x) { using cradle::write_field_to_record; write_field_to_record(record, "context_id", x.context_id); write_field_to_record(record, "plan_iss_id", x.plan_iss_id); write_field_to_record(record, "function", x.function); write_field_to_record(record, "args", x.args); } void to_dynamic(cradle::dynamic* v, results_api_query const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(results_api_query& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.context_id, record, "context_id"); read_field_from_record(&x.plan_iss_id, record, "plan_iss_id"); read_field_from_record(&x.function, record, "function"); read_field_from_record(&x.args, record, "args"); } void from_dynamic(results_api_query* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, results_api_query const& x) { return s << to_dynamic(x); } size_t hash_value(results_api_query const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.context_id)); boost::hash_combine(h, cradle::invoke_hash(x.plan_iss_id)); boost::hash_combine(h, cradle::invoke_hash(x.function)); boost::hash_combine(h, cradle::invoke_hash(x.args));  return h; }} namespace cradle { 

#line 244 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<results_api_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<results_api_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<results_api_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "results_api_response")); } void structure_field_type_info_adder<results_api_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["calculation_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<results_api_response>().calculation_id)>(),             none); } bool operator==(results_api_response const& a, results_api_response const& b) { return a.calculation_id == b.calculation_id; } bool operator!=(results_api_response const& a, results_api_response const& b) { return !(a == b); } bool operator<(results_api_response const& a, results_api_response const& b) { if (a.calculation_id < b.calculation_id) return true; if (b.calculation_id < a.calculation_id) return false;     return false; } void swap(results_api_response& a, results_api_response& b) {     using std::swap;     swap(a.calculation_id, b.calculation_id); } size_t deep_sizeof(results_api_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.calculation_id) ; } void write_fields_to_record(cradle::dynamic_map& record, results_api_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "calculation_id", x.calculation_id); } void to_dynamic(cradle::dynamic* v, results_api_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(results_api_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.calculation_id, record, "calculation_id"); } void from_dynamic(results_api_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, results_api_response const& x) { return s << to_dynamic(x); } size_t hash_value(results_api_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.calculation_id));  return h; }} namespace cradle { 

#line 250 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<local_results_api_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<local_results_api_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<local_results_api_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "local_results_api_response")); } void structure_field_type_info_adder<local_results_api_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["result"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<local_results_api_response>().result)>(),             none); } bool operator==(local_results_api_response const& a, local_results_api_response const& b) { return a.result == b.result; } bool operator!=(local_results_api_response const& a, local_results_api_response const& b) { return !(a == b); } bool operator<(local_results_api_response const& a, local_results_api_response const& b) { if (a.result < b.result) return true; if (b.result < a.result) return false;     return false; } void swap(local_results_api_response& a, local_results_api_response& b) {     using std::swap;     swap(a.result, b.result); } size_t deep_sizeof(local_results_api_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.result) ; } void write_fields_to_record(cradle::dynamic_map& record, local_results_api_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "result", x.result); } void to_dynamic(cradle::dynamic* v, local_results_api_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(local_results_api_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.result, record, "result"); } void from_dynamic(local_results_api_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, local_results_api_response const& x) { return s << to_dynamic(x); } size_t hash_value(local_results_api_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.result));  return h; }} namespace cradle { 

#line 256 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
void definitive_type_info_query<introspection_control_request_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_enum_type(             cradle::get_enum_type_info<introspection_control_request_tag>()); } void type_info_query<introspection_control_request_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "introspection_control_request_tag")); } void enum_type_info_query<introspection_control_request_tag>::get(     cradle::api_enum_info* info) {     std::map<std::string, cradle::api_enum_value_info> values; values["enabled"] =  cradle::api_enum_value_info( "");values["clear_admin"] =  cradle::api_enum_value_info( "");     *info = cradle::api_enum_info(values); } char const* get_value_id(introspection_control_request_tag value) {     switch (value)     { case introspection_control_request_tag::ENABLED: return "enabled";case introspection_control_request_tag::CLEAR_ADMIN: return "clear_admin";     }     CRADLE_THROW(         cradle::invalid_enum_value() <<             cradle::enum_id_info("introspection_control_request_tag") <<             cradle::enum_value_info(int(value))); }void to_dynamic(     cradle::dynamic* v,     introspection_control_request_tag x) {     *v = get_value_id(x); } void from_dynamic(     introspection_control_request_tag* x,     cradle::dynamic const& v) {     string s = cast<string>(v);     if (boost::to_lower_copy(s) == "enabled")     {         *x = introspection_control_request_tag::ENABLED;         return;     };    if (boost::to_lower_copy(s) == "clear_admin")     {         *x = introspection_control_request_tag::CLEAR_ADMIN;         return;     };     CRADLE_THROW(         cradle::invalid_enum_string() <<             cradle::enum_id_info("introspection_control_request_tag") <<             cradle::enum_string_info(s)); } std::ostream& operator<<(std::ostream& s, introspection_control_request_tag const& x) {     s << get_value_id(x);     return s; } void definitive_type_info_query<introspection_control_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_union_member_info> members;     members["enabled"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<bool>());    members["clear_admin"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<nil_t>());     *info =         cradle::make_api_type_info_with_union_type(             cradle::api_union_info(                 members)); } void type_info_query<introspection_control_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "introspection_control_request")); } introspection_control_request make_introspection_control_request_with_enabled(bool const& x) { introspection_control_request s; s.type = introspection_control_request_tag::ENABLED; s.contents_ = x; return s; } introspection_control_request make_introspection_control_request_with_enabled(bool&& x) { introspection_control_request s; s.type = introspection_control_request_tag::ENABLED; s.contents_ = std::move(x); return s; } introspection_control_request make_introspection_control_request_with_clear_admin(nil_t const& x) { introspection_control_request s; s.type = introspection_control_request_tag::CLEAR_ADMIN; s.contents_ = x; return s; } introspection_control_request make_introspection_control_request_with_clear_admin(nil_t&& x) { introspection_control_request s; s.type = introspection_control_request_tag::CLEAR_ADMIN; s.contents_ = std::move(x); return s; } bool const& as_enabled(introspection_control_request const& x) { assert(x.type == introspection_control_request_tag::ENABLED); return std::any_cast<bool const& >(x.contents_); } nil_t const& as_clear_admin(introspection_control_request const& x) { assert(x.type == introspection_control_request_tag::CLEAR_ADMIN); return std::any_cast<nil_t const& >(x.contents_); } bool& as_enabled(introspection_control_request& x) { assert(x.type == introspection_control_request_tag::ENABLED); return std::any_cast<bool&>(x.contents_); } nil_t& as_clear_admin(introspection_control_request& x) { assert(x.type == introspection_control_request_tag::CLEAR_ADMIN); return std::any_cast<nil_t&>(x.contents_); } void set_to_enabled(introspection_control_request& x, bool const& y) { x.type = introspection_control_request_tag::ENABLED; x.contents_ = y; } void set_to_enabled(introspection_control_request& x, bool&& y) { x.type = introspection_control_request_tag::ENABLED; x.contents_ = std::move(y); } void set_to_clear_admin(introspection_control_request& x, nil_t const& y) { x.type = introspection_control_request_tag::CLEAR_ADMIN; x.contents_ = y; } void set_to_clear_admin(introspection_control_request& x, nil_t&& y) { x.type = introspection_control_request_tag::CLEAR_ADMIN; x.contents_ = std::move(y); } bool operator==(introspection_control_request const& a, introspection_control_request const& b) { if (a.type != b.type) return false; switch (a.type) { case introspection_control_request_tag::ENABLED: return as_enabled(a) == as_enabled(b); case introspection_control_request_tag::CLEAR_ADMIN: return as_clear_admin(a) == as_clear_admin(b); } return true; } bool operator!=(introspection_control_request const& a, introspection_control_request const& b) { return !(a == b); } bool operator<(introspection_control_request const& a, introspection_control_request const& b) { if (a.type < b.type) return true; if (b.type < a.type) return false; switch (a.type) { case introspection_control_request_tag::ENABLED: return as_enabled(a) < as_enabled(b); case introspection_control_request_tag::CLEAR_ADMIN: return as_clear_admin(a) < as_clear_admin(b); } return false; } size_t hash_value(introspection_control_request const& x) {     switch (x.type)     { case introspection_control_request_tag::ENABLED: return cradle::invoke_hash(as_enabled(x)); case introspection_control_request_tag::CLEAR_ADMIN: return cradle::invoke_hash(as_clear_admin(x));      } assert(0); return 0; }void swap(introspection_control_request& a, introspection_control_request& b) { using std::swap; swap(a.type, b.type); swap(a.contents_, b.contents_); } void to_dynamic(cradle::dynamic* v, introspection_control_request const& x) { cradle::dynamic_map s; switch (x.type) { case introspection_control_request_tag::ENABLED: to_dynamic(&s[dynamic("enabled")], as_enabled(x)); break; case introspection_control_request_tag::CLEAR_ADMIN: to_dynamic(&s[dynamic("clear_admin")], as_clear_admin(x)); break; } *v = std::move(s); } void from_dynamic(introspection_control_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& s = cradle::cast<cradle::dynamic_map>(v); from_dynamic(&x->type, get_union_tag(s)); switch (x->type) { case introspection_control_request_tag::ENABLED:  { bool tmp; from_dynamic(&tmp, get_field(s, "enabled")); x->contents_ = tmp; break;  } case introspection_control_request_tag::CLEAR_ADMIN:  { nil_t tmp; from_dynamic(&tmp, get_field(s, "clear_admin")); x->contents_ = tmp; break;  } } } std::ostream& operator<<(std::ostream& s, introspection_control_request const& x) { return s << to_dynamic(x); } size_t deep_sizeof(introspection_control_request const& x) { using cradle::deep_sizeof; size_t size = sizeof(x); switch (x.type) { case introspection_control_request_tag::ENABLED: size += deep_sizeof(as_enabled(x)); break; case introspection_control_request_tag::CLEAR_ADMIN: size += deep_sizeof(as_clear_admin(x)); break; } return size; } 

#line 263 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<introspection_status_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<introspection_status_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<introspection_status_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "introspection_status_request")); } void structure_field_type_info_adder<introspection_status_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["include_finished"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<introspection_status_request>().include_finished)>(),             none); } bool operator==(introspection_status_request const& a, introspection_status_request const& b) { return a.include_finished == b.include_finished; } bool operator!=(introspection_status_request const& a, introspection_status_request const& b) { return !(a == b); } bool operator<(introspection_status_request const& a, introspection_status_request const& b) { if (a.include_finished < b.include_finished) return true; if (b.include_finished < a.include_finished) return false;     return false; } void swap(introspection_status_request& a, introspection_status_request& b) {     using std::swap;     swap(a.include_finished, b.include_finished); } size_t deep_sizeof(introspection_status_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.include_finished) ; } void write_fields_to_record(cradle::dynamic_map& record, introspection_status_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "include_finished", x.include_finished); } void to_dynamic(cradle::dynamic* v, introspection_status_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(introspection_status_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.include_finished, record, "include_finished"); } void from_dynamic(introspection_status_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, introspection_status_request const& x) { return s << to_dynamic(x); } size_t hash_value(introspection_status_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.include_finished));  return h; }} namespace cradle { 

#line 269 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<resolve_request_request>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<resolve_request_request>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<resolve_request_request>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "resolve_request_request")); } void structure_field_type_info_adder<resolve_request_request>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["json_text"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_request_request>().json_text)>(),             none);    (*fields)["remote"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<resolve_request_request>().remote)>(),             none); } bool operator==(resolve_request_request const& a, resolve_request_request const& b) { return a.json_text == b.json_text && a.remote == b.remote; } bool operator!=(resolve_request_request const& a, resolve_request_request const& b) { return !(a == b); } bool operator<(resolve_request_request const& a, resolve_request_request const& b) { if (a.json_text < b.json_text) return true; if (b.json_text < a.json_text) return false; if (a.remote < b.remote) return true; if (b.remote < a.remote) return false;     return false; } void swap(resolve_request_request& a, resolve_request_request& b) {     using std::swap;     swap(a.json_text, b.json_text);     swap(a.remote, b.remote); } size_t deep_sizeof(resolve_request_request const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.json_text) + deep_sizeof(x.remote) ; } void write_fields_to_record(cradle::dynamic_map& record, resolve_request_request const& x) { using cradle::write_field_to_record; write_field_to_record(record, "json_text", x.json_text); write_field_to_record(record, "remote", x.remote); } void to_dynamic(cradle::dynamic* v, resolve_request_request const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(resolve_request_request& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.json_text, record, "json_text"); read_field_from_record(&x.remote, record, "remote"); } void from_dynamic(resolve_request_request* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, resolve_request_request const& x) { return s << to_dynamic(x); } size_t hash_value(resolve_request_request const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.json_text)); boost::hash_combine(h, cradle::invoke_hash(x.remote));  return h; }} namespace cradle { 

#line 276 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
void definitive_type_info_query<client_message_content_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_enum_type(             cradle::get_enum_type_info<client_message_content_tag>()); } void type_info_query<client_message_content_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "client_message_content_tag")); } void enum_type_info_query<client_message_content_tag>::get(     cradle::api_enum_info* info) {     std::map<std::string, cradle::api_enum_value_info> values; values["kill"] =  cradle::api_enum_value_info( "");values["registration"] =  cradle::api_enum_value_info( "");values["test"] =  cradle::api_enum_value_info( "");values["cache_insert"] =  cradle::api_enum_value_info( "");values["cache_query"] =  cradle::api_enum_value_info( "");values["iss_object"] =  cradle::api_enum_value_info( "");values["resolve_iss_object"] =  cradle::api_enum_value_info( "");values["iss_object_metadata"] =  cradle::api_enum_value_info( "");values["post_iss_object"] =  cradle::api_enum_value_info( "");values["copy_iss_object"] =  cradle::api_enum_value_info( "");values["copy_calculation"] =  cradle::api_enum_value_info( "");values["post_calculation"] =  cradle::api_enum_value_info( "");values["resolve_meta_chain"] =  cradle::api_enum_value_info( "");values["calculation_request"] =  cradle::api_enum_value_info( "");values["calculation_diff"] =  cradle::api_enum_value_info( "");values["calculation_search"] =  cradle::api_enum_value_info( "");values["iss_diff"] =  cradle::api_enum_value_info( "");values["perform_local_calc"] =  cradle::api_enum_value_info( "");values["results_api_query"] =  cradle::api_enum_value_info( "");values["local_results_api_query"] =  cradle::api_enum_value_info( "");values["introspection_control"] =  cradle::api_enum_value_info( "");values["introspection_status_query"] =  cradle::api_enum_value_info( "");values["requests_meta_info_query"] =  cradle::api_enum_value_info( "");values["resolve_request"] =  cradle::api_enum_value_info( "");     *info = cradle::api_enum_info(values); } char const* get_value_id(client_message_content_tag value) {     switch (value)     { case client_message_content_tag::KILL: return "kill";case client_message_content_tag::REGISTRATION: return "registration";case client_message_content_tag::TEST: return "test";case client_message_content_tag::CACHE_INSERT: return "cache_insert";case client_message_content_tag::CACHE_QUERY: return "cache_query";case client_message_content_tag::ISS_OBJECT: return "iss_object";case client_message_content_tag::RESOLVE_ISS_OBJECT: return "resolve_iss_object";case client_message_content_tag::ISS_OBJECT_METADATA: return "iss_object_metadata";case client_message_content_tag::POST_ISS_OBJECT: return "post_iss_object";case client_message_content_tag::COPY_ISS_OBJECT: return "copy_iss_object";case client_message_content_tag::COPY_CALCULATION: return "copy_calculation";case client_message_content_tag::POST_CALCULATION: return "post_calculation";case client_message_content_tag::RESOLVE_META_CHAIN: return "resolve_meta_chain";case client_message_content_tag::CALCULATION_REQUEST: return "calculation_request";case client_message_content_tag::CALCULATION_DIFF: return "calculation_diff";case client_message_content_tag::CALCULATION_SEARCH: return "calculation_search";case client_message_content_tag::ISS_DIFF: return "iss_diff";case client_message_content_tag::PERFORM_LOCAL_CALC: return "perform_local_calc";case client_message_content_tag::RESULTS_API_QUERY: return "results_api_query";case client_message_content_tag::LOCAL_RESULTS_API_QUERY: return "local_results_api_query";case client_message_content_tag::INTROSPECTION_CONTROL: return "introspection_control";case client_message_content_tag::INTROSPECTION_STATUS_QUERY: return "introspection_status_query";case client_message_content_tag::REQUESTS_META_INFO_QUERY: return "requests_meta_info_query";case client_message_content_tag::RESOLVE_REQUEST: return "resolve_request";     }     CRADLE_THROW(         cradle::invalid_enum_value() <<             cradle::enum_id_info("client_message_content_tag") <<             cradle::enum_value_info(int(value))); }void to_dynamic(     cradle::dynamic* v,     client_message_content_tag x) {     *v = get_value_id(x); } void from_dynamic(     client_message_content_tag* x,     cradle::dynamic const& v) {     string s = cast<string>(v);     if (boost::to_lower_copy(s) == "kill")     {         *x = client_message_content_tag::KILL;         return;     };    if (boost::to_lower_copy(s) == "registration")     {         *x = client_message_content_tag::REGISTRATION;         return;     };    if (boost::to_lower_copy(s) == "test")     {         *x = client_message_content_tag::TEST;         return;     };    if (boost::to_lower_copy(s) == "cache_insert")     {         *x = client_message_content_tag::CACHE_INSERT;         return;     };    if (boost::to_lower_copy(s) == "cache_query")     {         *x = client_message_content_tag::CACHE_QUERY;         return;     };    if (boost::to_lower_copy(s) == "iss_object")     {         *x = client_message_content_tag::ISS_OBJECT;         return;     };    if (boost::to_lower_copy(s) == "resolve_iss_object")     {         *x = client_message_content_tag::RESOLVE_ISS_OBJECT;         return;     };    if (boost::to_lower_copy(s) == "iss_object_metadata")     {         *x = client_message_content_tag::ISS_OBJECT_METADATA;         return;     };    if (boost::to_lower_copy(s) == "post_iss_object")     {         *x = client_message_content_tag::POST_ISS_OBJECT;         return;     };    if (boost::to_lower_copy(s) == "copy_iss_object")     {         *x = client_message_content_tag::COPY_ISS_OBJECT;         return;     };    if (boost::to_lower_copy(s) == "copy_calculation")     {         *x = client_message_content_tag::COPY_CALCULATION;         return;     };    if (boost::to_lower_copy(s) == "post_calculation")     {         *x = client_message_content_tag::POST_CALCULATION;         return;     };    if (boost::to_lower_copy(s) == "resolve_meta_chain")     {         *x = client_message_content_tag::RESOLVE_META_CHAIN;         return;     };    if (boost::to_lower_copy(s) == "calculation_request")     {         *x = client_message_content_tag::CALCULATION_REQUEST;         return;     };    if (boost::to_lower_copy(s) == "calculation_diff")     {         *x = client_message_content_tag::CALCULATION_DIFF;         return;     };    if (boost::to_lower_copy(s) == "calculation_search")     {         *x = client_message_content_tag::CALCULATION_SEARCH;         return;     };    if (boost::to_lower_copy(s) == "iss_diff")     {         *x = client_message_content_tag::ISS_DIFF;         return;     };    if (boost::to_lower_copy(s) == "perform_local_calc")     {         *x = client_message_content_tag::PERFORM_LOCAL_CALC;         return;     };    if (boost::to_lower_copy(s) == "results_api_query")     {         *x = client_message_content_tag::RESULTS_API_QUERY;         return;     };    if (boost::to_lower_copy(s) == "local_results_api_query")     {         *x = client_message_content_tag::LOCAL_RESULTS_API_QUERY;         return;     };    if (boost::to_lower_copy(s) == "introspection_control")     {         *x = client_message_content_tag::INTROSPECTION_CONTROL;         return;     };    if (boost::to_lower_copy(s) == "introspection_status_query")     {         *x = client_message_content_tag::INTROSPECTION_STATUS_QUERY;         return;     };    if (boost::to_lower_copy(s) == "requests_meta_info_query")     {         *x = client_message_content_tag::REQUESTS_META_INFO_QUERY;         return;     };    if (boost::to_lower_copy(s) == "resolve_request")     {         *x = client_message_content_tag::RESOLVE_REQUEST;         return;     };     CRADLE_THROW(         cradle::invalid_enum_string() <<             cradle::enum_id_info("client_message_content_tag") <<             cradle::enum_string_info(s)); } std::ostream& operator<<(std::ostream& s, client_message_content_tag const& x) {     s << get_value_id(x);     return s; } void definitive_type_info_query<client_message_content>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_union_member_info> members;     members["kill"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::nil_t>());    members["registration"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::websocket_registration_message>());    members["test"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::websocket_test_query>());    members["cache_insert"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::websocket_cache_insert>());    members["cache_query"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<std::string>());    members["iss_object"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::iss_object_request>());    members["resolve_iss_object"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::resolve_iss_object_request>());    members["iss_object_metadata"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::iss_object_metadata_request>());    members["post_iss_object"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::post_iss_object_request>());    members["copy_iss_object"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::copy_iss_object_request>());    members["copy_calculation"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::copy_calculation_request>());    members["post_calculation"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::post_calculation_request>());    members["resolve_meta_chain"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::resolve_meta_chain_request>());    members["calculation_request"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::calculation_request_message>());    members["calculation_diff"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::calculation_diff_request>());    members["calculation_search"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::calculation_search_request>());    members["iss_diff"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::iss_diff_request>());    members["perform_local_calc"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::post_calculation_request>());    members["results_api_query"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::results_api_query>());    members["local_results_api_query"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::results_api_query>());    members["introspection_control"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::introspection_control_request>());    members["introspection_status_query"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::introspection_status_request>());    members["requests_meta_info_query"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::nil_t>());    members["resolve_request"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::resolve_request_request>());     *info =         cradle::make_api_type_info_with_union_type(             cradle::api_union_info(                 members)); } void type_info_query<client_message_content>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "client_message_content")); } client_message_content make_client_message_content_with_kill(cradle::nil_t const& x) { client_message_content s; s.type = client_message_content_tag::KILL; s.contents_ = x; return s; } client_message_content make_client_message_content_with_kill(cradle::nil_t&& x) { client_message_content s; s.type = client_message_content_tag::KILL; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_registration(cradle::websocket_registration_message const& x) { client_message_content s; s.type = client_message_content_tag::REGISTRATION; s.contents_ = x; return s; } client_message_content make_client_message_content_with_registration(cradle::websocket_registration_message&& x) { client_message_content s; s.type = client_message_content_tag::REGISTRATION; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_test(cradle::websocket_test_query const& x) { client_message_content s; s.type = client_message_content_tag::TEST; s.contents_ = x; return s; } client_message_content make_client_message_content_with_test(cradle::websocket_test_query&& x) { client_message_content s; s.type = client_message_content_tag::TEST; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_cache_insert(cradle::websocket_cache_insert const& x) { client_message_content s; s.type = client_message_content_tag::CACHE_INSERT; s.contents_ = x; return s; } client_message_content make_client_message_content_with_cache_insert(cradle::websocket_cache_insert&& x) { client_message_content s; s.type = client_message_content_tag::CACHE_INSERT; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_cache_query(std::string const& x) { client_message_content s; s.type = client_message_content_tag::CACHE_QUERY; s.contents_ = x; return s; } client_message_content make_client_message_content_with_cache_query(std::string&& x) { client_message_content s; s.type = client_message_content_tag::CACHE_QUERY; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_iss_object(cradle::iss_object_request const& x) { client_message_content s; s.type = client_message_content_tag::ISS_OBJECT; s.contents_ = x; return s; } client_message_content make_client_message_content_with_iss_object(cradle::iss_object_request&& x) { client_message_content s; s.type = client_message_content_tag::ISS_OBJECT; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_resolve_iss_object(cradle::resolve_iss_object_request const& x) { client_message_content s; s.type = client_message_content_tag::RESOLVE_ISS_OBJECT; s.contents_ = x; return s; } client_message_content make_client_message_content_with_resolve_iss_object(cradle::resolve_iss_object_request&& x) { client_message_content s; s.type = client_message_content_tag::RESOLVE_ISS_OBJECT; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_iss_object_metadata(cradle::iss_object_metadata_request const& x) { client_message_content s; s.type = client_message_content_tag::ISS_OBJECT_METADATA; s.contents_ = x; return s; } client_message_content make_client_message_content_with_iss_object_metadata(cradle::iss_object_metadata_request&& x) { client_message_content s; s.type = client_message_content_tag::ISS_OBJECT_METADATA; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_post_iss_object(cradle::post_iss_object_request const& x) { client_message_content s; s.type = client_message_content_tag::POST_ISS_OBJECT; s.contents_ = x; return s; } client_message_content make_client_message_content_with_post_iss_object(cradle::post_iss_object_request&& x) { client_message_content s; s.type = client_message_content_tag::POST_ISS_OBJECT; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_copy_iss_object(cradle::copy_iss_object_request const& x) { client_message_content s; s.type = client_message_content_tag::COPY_ISS_OBJECT; s.contents_ = x; return s; } client_message_content make_client_message_content_with_copy_iss_object(cradle::copy_iss_object_request&& x) { client_message_content s; s.type = client_message_content_tag::COPY_ISS_OBJECT; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_copy_calculation(cradle::copy_calculation_request const& x) { client_message_content s; s.type = client_message_content_tag::COPY_CALCULATION; s.contents_ = x; return s; } client_message_content make_client_message_content_with_copy_calculation(cradle::copy_calculation_request&& x) { client_message_content s; s.type = client_message_content_tag::COPY_CALCULATION; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_post_calculation(cradle::post_calculation_request const& x) { client_message_content s; s.type = client_message_content_tag::POST_CALCULATION; s.contents_ = x; return s; } client_message_content make_client_message_content_with_post_calculation(cradle::post_calculation_request&& x) { client_message_content s; s.type = client_message_content_tag::POST_CALCULATION; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_resolve_meta_chain(cradle::resolve_meta_chain_request const& x) { client_message_content s; s.type = client_message_content_tag::RESOLVE_META_CHAIN; s.contents_ = x; return s; } client_message_content make_client_message_content_with_resolve_meta_chain(cradle::resolve_meta_chain_request&& x) { client_message_content s; s.type = client_message_content_tag::RESOLVE_META_CHAIN; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_calculation_request(cradle::calculation_request_message const& x) { client_message_content s; s.type = client_message_content_tag::CALCULATION_REQUEST; s.contents_ = x; return s; } client_message_content make_client_message_content_with_calculation_request(cradle::calculation_request_message&& x) { client_message_content s; s.type = client_message_content_tag::CALCULATION_REQUEST; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_calculation_diff(cradle::calculation_diff_request const& x) { client_message_content s; s.type = client_message_content_tag::CALCULATION_DIFF; s.contents_ = x; return s; } client_message_content make_client_message_content_with_calculation_diff(cradle::calculation_diff_request&& x) { client_message_content s; s.type = client_message_content_tag::CALCULATION_DIFF; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_calculation_search(cradle::calculation_search_request const& x) { client_message_content s; s.type = client_message_content_tag::CALCULATION_SEARCH; s.contents_ = x; return s; } client_message_content make_client_message_content_with_calculation_search(cradle::calculation_search_request&& x) { client_message_content s; s.type = client_message_content_tag::CALCULATION_SEARCH; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_iss_diff(cradle::iss_diff_request const& x) { client_message_content s; s.type = client_message_content_tag::ISS_DIFF; s.contents_ = x; return s; } client_message_content make_client_message_content_with_iss_diff(cradle::iss_diff_request&& x) { client_message_content s; s.type = client_message_content_tag::ISS_DIFF; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_perform_local_calc(cradle::post_calculation_request const& x) { client_message_content s; s.type = client_message_content_tag::PERFORM_LOCAL_CALC; s.contents_ = x; return s; } client_message_content make_client_message_content_with_perform_local_calc(cradle::post_calculation_request&& x) { client_message_content s; s.type = client_message_content_tag::PERFORM_LOCAL_CALC; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_results_api_query(cradle::results_api_query const& x) { client_message_content s; s.type = client_message_content_tag::RESULTS_API_QUERY; s.contents_ = x; return s; } client_message_content make_client_message_content_with_results_api_query(cradle::results_api_query&& x) { client_message_content s; s.type = client_message_content_tag::RESULTS_API_QUERY; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_local_results_api_query(cradle::results_api_query const& x) { client_message_content s; s.type = client_message_content_tag::LOCAL_RESULTS_API_QUERY; s.contents_ = x; return s; } client_message_content make_client_message_content_with_local_results_api_query(cradle::results_api_query&& x) { client_message_content s; s.type = client_message_content_tag::LOCAL_RESULTS_API_QUERY; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_introspection_control(cradle::introspection_control_request const& x) { client_message_content s; s.type = client_message_content_tag::INTROSPECTION_CONTROL; s.contents_ = x; return s; } client_message_content make_client_message_content_with_introspection_control(cradle::introspection_control_request&& x) { client_message_content s; s.type = client_message_content_tag::INTROSPECTION_CONTROL; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_introspection_status_query(cradle::introspection_status_request const& x) { client_message_content s; s.type = client_message_content_tag::INTROSPECTION_STATUS_QUERY; s.contents_ = x; return s; } client_message_content make_client_message_content_with_introspection_status_query(cradle::introspection_status_request&& x) { client_message_content s; s.type = client_message_content_tag::INTROSPECTION_STATUS_QUERY; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_requests_meta_info_query(cradle::nil_t const& x) { client_message_content s; s.type = client_message_content_tag::REQUESTS_META_INFO_QUERY; s.contents_ = x; return s; } client_message_content make_client_message_content_with_requests_meta_info_query(cradle::nil_t&& x) { client_message_content s; s.type = client_message_content_tag::REQUESTS_META_INFO_QUERY; s.contents_ = std::move(x); return s; } client_message_content make_client_message_content_with_resolve_request(cradle::resolve_request_request const& x) { client_message_content s; s.type = client_message_content_tag::RESOLVE_REQUEST; s.contents_ = x; return s; } client_message_content make_client_message_content_with_resolve_request(cradle::resolve_request_request&& x) { client_message_content s; s.type = client_message_content_tag::RESOLVE_REQUEST; s.contents_ = std::move(x); return s; } cradle::nil_t const& as_kill(client_message_content const& x) { assert(x.type == client_message_content_tag::KILL); return std::any_cast<cradle::nil_t const& >(x.contents_); } cradle::websocket_registration_message const& as_registration(client_message_content const& x) { assert(x.type == client_message_content_tag::REGISTRATION); return std::any_cast<cradle::websocket_registration_message const& >(x.contents_); } cradle::websocket_test_query const& as_test(client_message_content const& x) { assert(x.type == client_message_content_tag::TEST); return std::any_cast<cradle::websocket_test_query const& >(x.contents_); } cradle::websocket_cache_insert const& as_cache_insert(client_message_content const& x) { assert(x.type == client_message_content_tag::CACHE_INSERT); return std::any_cast<cradle::websocket_cache_insert const& >(x.contents_); } std::string const& as_cache_query(client_message_content const& x) { assert(x.type == client_message_content_tag::CACHE_QUERY); return std::any_cast<std::string const& >(x.contents_); } cradle::iss_object_request const& as_iss_object(client_message_content const& x) { assert(x.type == client_message_content_tag::ISS_OBJECT); return std::any_cast<cradle::iss_object_request const& >(x.contents_); } cradle::resolve_iss_object_request const& as_resolve_iss_object(client_message_content const& x) { assert(x.type == client_message_content_tag::RESOLVE_ISS_OBJECT); return std::any_cast<cradle::resolve_iss_object_request const& >(x.contents_); } cradle::iss_object_metadata_request const& as_iss_object_metadata(client_message_content const& x) { assert(x.type == client_message_content_tag::ISS_OBJECT_METADATA); return std::any_cast<cradle::iss_object_metadata_request const& >(x.contents_); } cradle::post_iss_object_request const& as_post_iss_object(client_message_content const& x) { assert(x.type == client_message_content_tag::POST_ISS_OBJECT); return std::any_cast<cradle::post_iss_object_request const& >(x.contents_); } cradle::copy_iss_object_request const& as_copy_iss_object(client_message_content const& x) { assert(x.type == client_message_content_tag::COPY_ISS_OBJECT); return std::any_cast<cradle::copy_iss_object_request const& >(x.contents_); } cradle::copy_calculation_request const& as_copy_calculation(client_message_content const& x) { assert(x.type == client_message_content_tag::COPY_CALCULATION); return std::any_cast<cradle::copy_calculation_request const& >(x.contents_); } cradle::post_calculation_request const& as_post_calculation(client_message_content const& x) { assert(x.type == client_message_content_tag::POST_CALCULATION); return std::any_cast<cradle::post_calculation_request const& >(x.contents_); } cradle::resolve_meta_chain_request const& as_resolve_meta_chain(client_message_content const& x) { assert(x.type == client_message_content_tag::RESOLVE_META_CHAIN); return std::any_cast<cradle::resolve_meta_chain_request const& >(x.contents_); } cradle::calculation_request_message const& as_calculation_request(client_message_content const& x) { assert(x.type == client_message_content_tag::CALCULATION_REQUEST); return std::any_cast<cradle::calculation_request_message const& >(x.contents_); } cradle::calculation_diff_request const& as_calculation_diff(client_message_content const& x) { assert(x.type == client_message_content_tag::CALCULATION_DIFF); return std::any_cast<cradle::calculation_diff_request const& >(x.contents_); } cradle::calculation_search_request const& as_calculation_search(client_message_content const& x) { assert(x.type == client_message_content_tag::CALCULATION_SEARCH); return std::any_cast<cradle::calculation_search_request const& >(x.contents_); } cradle::iss_diff_request const& as_iss_diff(client_message_content const& x) { assert(x.type == client_message_content_tag::ISS_DIFF); return std::any_cast<cradle::iss_diff_request const& >(x.contents_); } cradle::post_calculation_request const& as_perform_local_calc(client_message_content const& x) { assert(x.type == client_message_content_tag::PERFORM_LOCAL_CALC); return std::any_cast<cradle::post_calculation_request const& >(x.contents_); } cradle::results_api_query const& as_results_api_query(client_message_content const& x) { assert(x.type == client_message_content_tag::RESULTS_API_QUERY); return std::any_cast<cradle::results_api_query const& >(x.contents_); } cradle::results_api_query const& as_local_results_api_query(client_message_content const& x) { assert(x.type == client_message_content_tag::LOCAL_RESULTS_API_QUERY); return std::any_cast<cradle::results_api_query const& >(x.contents_); } cradle::introspection_control_request const& as_introspection_control(client_message_content const& x) { assert(x.type == client_message_content_tag::INTROSPECTION_CONTROL); return std::any_cast<cradle::introspection_control_request const& >(x.contents_); } cradle::introspection_status_request const& as_introspection_status_query(client_message_content const& x) { assert(x.type == client_message_content_tag::INTROSPECTION_STATUS_QUERY); return std::any_cast<cradle::introspection_status_request const& >(x.contents_); } cradle::nil_t const& as_requests_meta_info_query(client_message_content const& x) { assert(x.type == client_message_content_tag::REQUESTS_META_INFO_QUERY); return std::any_cast<cradle::nil_t const& >(x.contents_); } cradle::resolve_request_request const& as_resolve_request(client_message_content const& x) { assert(x.type == client_message_content_tag::RESOLVE_REQUEST); return std::any_cast<cradle::resolve_request_request const& >(x.contents_); } cradle::nil_t& as_kill(client_message_content& x) { assert(x.type == client_message_content_tag::KILL); return std::any_cast<cradle::nil_t&>(x.contents_); } cradle::websocket_registration_message& as_registration(client_message_content& x) { assert(x.type == client_message_content_tag::REGISTRATION); return std::any_cast<cradle::websocket_registration_message&>(x.contents_); } cradle::websocket_test_query& as_test(client_message_content& x) { assert(x.type == client_message_content_tag::TEST); return std::any_cast<cradle::websocket_test_query&>(x.contents_); } cradle::websocket_cache_insert& as_cache_insert(client_message_content& x) { assert(x.type == client_message_content_tag::CACHE_INSERT); return std::any_cast<cradle::websocket_cache_insert&>(x.contents_); } std::string& as_cache_query(client_message_content& x) { assert(x.type == client_message_content_tag::CACHE_QUERY); return std::any_cast<std::string&>(x.contents_); } cradle::iss_object_request& as_iss_object(client_message_content& x) { assert(x.type == client_message_content_tag::ISS_OBJECT); return std::any_cast<cradle::iss_object_request&>(x.contents_); } cradle::resolve_iss_object_request& as_resolve_iss_object(client_message_content& x) { assert(x.type == client_message_content_tag::RESOLVE_ISS_OBJECT); return std::any_cast<cradle::resolve_iss_object_request&>(x.contents_); } cradle::iss_object_metadata_request& as_iss_object_metadata(client_message_content& x) { assert(x.type == client_message_content_tag::ISS_OBJECT_METADATA); return std::any_cast<cradle::iss_object_metadata_request&>(x.contents_); } cradle::post_iss_object_request& as_post_iss_object(client_message_content& x) { assert(x.type == client_message_content_tag::POST_ISS_OBJECT); return std::any_cast<cradle::post_iss_object_request&>(x.contents_); } cradle::copy_iss_object_request& as_copy_iss_object(client_message_content& x) { assert(x.type == client_message_content_tag::COPY_ISS_OBJECT); return std::any_cast<cradle::copy_iss_object_request&>(x.contents_); } cradle::copy_calculation_request& as_copy_calculation(client_message_content& x) { assert(x.type == client_message_content_tag::COPY_CALCULATION); return std::any_cast<cradle::copy_calculation_request&>(x.contents_); } cradle::post_calculation_request& as_post_calculation(client_message_content& x) { assert(x.type == client_message_content_tag::POST_CALCULATION); return std::any_cast<cradle::post_calculation_request&>(x.contents_); } cradle::resolve_meta_chain_request& as_resolve_meta_chain(client_message_content& x) { assert(x.type == client_message_content_tag::RESOLVE_META_CHAIN); return std::any_cast<cradle::resolve_meta_chain_request&>(x.contents_); } cradle::calculation_request_message& as_calculation_request(client_message_content& x) { assert(x.type == client_message_content_tag::CALCULATION_REQUEST); return std::any_cast<cradle::calculation_request_message&>(x.contents_); } cradle::calculation_diff_request& as_calculation_diff(client_message_content& x) { assert(x.type == client_message_content_tag::CALCULATION_DIFF); return std::any_cast<cradle::calculation_diff_request&>(x.contents_); } cradle::calculation_search_request& as_calculation_search(client_message_content& x) { assert(x.type == client_message_content_tag::CALCULATION_SEARCH); return std::any_cast<cradle::calculation_search_request&>(x.contents_); } cradle::iss_diff_request& as_iss_diff(client_message_content& x) { assert(x.type == client_message_content_tag::ISS_DIFF); return std::any_cast<cradle::iss_diff_request&>(x.contents_); } cradle::post_calculation_request& as_perform_local_calc(client_message_content& x) { assert(x.type == client_message_content_tag::PERFORM_LOCAL_CALC); return std::any_cast<cradle::post_calculation_request&>(x.contents_); } cradle::results_api_query& as_results_api_query(client_message_content& x) { assert(x.type == client_message_content_tag::RESULTS_API_QUERY); return std::any_cast<cradle::results_api_query&>(x.contents_); } cradle::results_api_query& as_local_results_api_query(client_message_content& x) { assert(x.type == client_message_content_tag::LOCAL_RESULTS_API_QUERY); return std::any_cast<cradle::results_api_query&>(x.contents_); } cradle::introspection_control_request& as_introspection_control(client_message_content& x) { assert(x.type == client_message_content_tag::INTROSPECTION_CONTROL); return std::any_cast<cradle::introspection_control_request&>(x.contents_); } cradle::introspection_status_request& as_introspection_status_query(client_message_content& x) { assert(x.type == client_message_content_tag::INTROSPECTION_STATUS_QUERY); return std::any_cast<cradle::introspection_status_request&>(x.contents_); } cradle::nil_t& as_requests_meta_info_query(client_message_content& x) { assert(x.type == client_message_content_tag::REQUESTS_META_INFO_QUERY); return std::any_cast<cradle::nil_t&>(x.contents_); } cradle::resolve_request_request& as_resolve_request(client_message_content& x) { assert(x.type == client_message_content_tag::RESOLVE_REQUEST); return std::any_cast<cradle::resolve_request_request&>(x.contents_); } void set_to_kill(client_message_content& x, cradle::nil_t const& y) { x.type = client_message_content_tag::KILL; x.contents_ = y; } void set_to_kill(client_message_content& x, cradle::nil_t&& y) { x.type = client_message_content_tag::KILL; x.contents_ = std::move(y); } void set_to_registration(client_message_content& x, cradle::websocket_registration_message const& y) { x.type = client_message_content_tag::REGISTRATION; x.contents_ = y; } void set_to_registration(client_message_content& x, cradle::websocket_registration_message&& y) { x.type = client_message_content_tag::REGISTRATION; x.contents_ = std::move(y); } void set_to_test(client_message_content& x, cradle::websocket_test_query const& y) { x.type = client_message_content_tag::TEST; x.contents_ = y; } void set_to_test(client_message_content& x, cradle::websocket_test_query&& y) { x.type = client_message_content_tag::TEST; x.contents_ = std::move(y); } void set_to_cache_insert(client_message_content& x, cradle::websocket_cache_insert const& y) { x.type = client_message_content_tag::CACHE_INSERT; x.contents_ = y; } void set_to_cache_insert(client_message_content& x, cradle::websocket_cache_insert&& y) { x.type = client_message_content_tag::CACHE_INSERT; x.contents_ = std::move(y); } void set_to_cache_query(client_message_content& x, std::string const& y) { x.type = client_message_content_tag::CACHE_QUERY; x.contents_ = y; } void set_to_cache_query(client_message_content& x, std::string&& y) { x.type = client_message_content_tag::CACHE_QUERY; x.contents_ = std::move(y); } void set_to_iss_object(client_message_content& x, cradle::iss_object_request const& y) { x.type = client_message_content_tag::ISS_OBJECT; x.contents_ = y; } void set_to_iss_object(client_message_content& x, cradle::iss_object_request&& y) { x.type = client_message_content_tag::ISS_OBJECT; x.contents_ = std::move(y); } void set_to_resolve_iss_object(client_message_content& x, cradle::resolve_iss_object_request const& y) { x.type = client_message_content_tag::RESOLVE_ISS_OBJECT; x.contents_ = y; } void set_to_resolve_iss_object(client_message_content& x, cradle::resolve_iss_object_request&& y) { x.type = client_message_content_tag::RESOLVE_ISS_OBJECT; x.contents_ = std::move(y); } void set_to_iss_object_metadata(client_message_content& x, cradle::iss_object_metadata_request const& y) { x.type = client_message_content_tag::ISS_OBJECT_METADATA; x.contents_ = y; } void set_to_iss_object_metadata(client_message_content& x, cradle::iss_object_metadata_request&& y) { x.type = client_message_content_tag::ISS_OBJECT_METADATA; x.contents_ = std::move(y); } void set_to_post_iss_object(client_message_content& x, cradle::post_iss_object_request const& y) { x.type = client_message_content_tag::POST_ISS_OBJECT; x.contents_ = y; } void set_to_post_iss_object(client_message_content& x, cradle::post_iss_object_request&& y) { x.type = client_message_content_tag::POST_ISS_OBJECT; x.contents_ = std::move(y); } void set_to_copy_iss_object(client_message_content& x, cradle::copy_iss_object_request const& y) { x.type = client_message_content_tag::COPY_ISS_OBJECT; x.contents_ = y; } void set_to_copy_iss_object(client_message_content& x, cradle::copy_iss_object_request&& y) { x.type = client_message_content_tag::COPY_ISS_OBJECT; x.contents_ = std::move(y); } void set_to_copy_calculation(client_message_content& x, cradle::copy_calculation_request const& y) { x.type = client_message_content_tag::COPY_CALCULATION; x.contents_ = y; } void set_to_copy_calculation(client_message_content& x, cradle::copy_calculation_request&& y) { x.type = client_message_content_tag::COPY_CALCULATION; x.contents_ = std::move(y); } void set_to_post_calculation(client_message_content& x, cradle::post_calculation_request const& y) { x.type = client_message_content_tag::POST_CALCULATION; x.contents_ = y; } void set_to_post_calculation(client_message_content& x, cradle::post_calculation_request&& y) { x.type = client_message_content_tag::POST_CALCULATION; x.contents_ = std::move(y); } void set_to_resolve_meta_chain(client_message_content& x, cradle::resolve_meta_chain_request const& y) { x.type = client_message_content_tag::RESOLVE_META_CHAIN; x.contents_ = y; } void set_to_resolve_meta_chain(client_message_content& x, cradle::resolve_meta_chain_request&& y) { x.type = client_message_content_tag::RESOLVE_META_CHAIN; x.contents_ = std::move(y); } void set_to_calculation_request(client_message_content& x, cradle::calculation_request_message const& y) { x.type = client_message_content_tag::CALCULATION_REQUEST; x.contents_ = y; } void set_to_calculation_request(client_message_content& x, cradle::calculation_request_message&& y) { x.type = client_message_content_tag::CALCULATION_REQUEST; x.contents_ = std::move(y); } void set_to_calculation_diff(client_message_content& x, cradle::calculation_diff_request const& y) { x.type = client_message_content_tag::CALCULATION_DIFF; x.contents_ = y; } void set_to_calculation_diff(client_message_content& x, cradle::calculation_diff_request&& y) { x.type = client_message_content_tag::CALCULATION_DIFF; x.contents_ = std::move(y); } void set_to_calculation_search(client_message_content& x, cradle::calculation_search_request const& y) { x.type = client_message_content_tag::CALCULATION_SEARCH; x.contents_ = y; } void set_to_calculation_search(client_message_content& x, cradle::calculation_search_request&& y) { x.type = client_message_content_tag::CALCULATION_SEARCH; x.contents_ = std::move(y); } void set_to_iss_diff(client_message_content& x, cradle::iss_diff_request const& y) { x.type = client_message_content_tag::ISS_DIFF; x.contents_ = y; } void set_to_iss_diff(client_message_content& x, cradle::iss_diff_request&& y) { x.type = client_message_content_tag::ISS_DIFF; x.contents_ = std::move(y); } void set_to_perform_local_calc(client_message_content& x, cradle::post_calculation_request const& y) { x.type = client_message_content_tag::PERFORM_LOCAL_CALC; x.contents_ = y; } void set_to_perform_local_calc(client_message_content& x, cradle::post_calculation_request&& y) { x.type = client_message_content_tag::PERFORM_LOCAL_CALC; x.contents_ = std::move(y); } void set_to_results_api_query(client_message_content& x, cradle::results_api_query const& y) { x.type = client_message_content_tag::RESULTS_API_QUERY; x.contents_ = y; } void set_to_results_api_query(client_message_content& x, cradle::results_api_query&& y) { x.type = client_message_content_tag::RESULTS_API_QUERY; x.contents_ = std::move(y); } void set_to_local_results_api_query(client_message_content& x, cradle::results_api_query const& y) { x.type = client_message_content_tag::LOCAL_RESULTS_API_QUERY; x.contents_ = y; } void set_to_local_results_api_query(client_message_content& x, cradle::results_api_query&& y) { x.type = client_message_content_tag::LOCAL_RESULTS_API_QUERY; x.contents_ = std::move(y); } void set_to_introspection_control(client_message_content& x, cradle::introspection_control_request const& y) { x.type = client_message_content_tag::INTROSPECTION_CONTROL; x.contents_ = y; } void set_to_introspection_control(client_message_content& x, cradle::introspection_control_request&& y) { x.type = client_message_content_tag::INTROSPECTION_CONTROL; x.contents_ = std::move(y); } void set_to_introspection_status_query(client_message_content& x, cradle::introspection_status_request const& y) { x.type = client_message_content_tag::INTROSPECTION_STATUS_QUERY; x.contents_ = y; } void set_to_introspection_status_query(client_message_content& x, cradle::introspection_status_request&& y) { x.type = client_message_content_tag::INTROSPECTION_STATUS_QUERY; x.contents_ = std::move(y); } void set_to_requests_meta_info_query(client_message_content& x, cradle::nil_t const& y) { x.type = client_message_content_tag::REQUESTS_META_INFO_QUERY; x.contents_ = y; } void set_to_requests_meta_info_query(client_message_content& x, cradle::nil_t&& y) { x.type = client_message_content_tag::REQUESTS_META_INFO_QUERY; x.contents_ = std::move(y); } void set_to_resolve_request(client_message_content& x, cradle::resolve_request_request const& y) { x.type = client_message_content_tag::RESOLVE_REQUEST; x.contents_ = y; } void set_to_resolve_request(client_message_content& x, cradle::resolve_request_request&& y) { x.type = client_message_content_tag::RESOLVE_REQUEST; x.contents_ = std::move(y); } bool operator==(client_message_content const& a, client_message_content const& b) { if (a.type != b.type) return false; switch (a.type) { case client_message_content_tag::KILL: return as_kill(a) == as_kill(b); case client_message_content_tag::REGISTRATION: return as_registration(a) == as_registration(b); case client_message_content_tag::TEST: return as_test(a) == as_test(b); case client_message_content_tag::CACHE_INSERT: return as_cache_insert(a) == as_cache_insert(b); case client_message_content_tag::CACHE_QUERY: return as_cache_query(a) == as_cache_query(b); case client_message_content_tag::ISS_OBJECT: return as_iss_object(a) == as_iss_object(b); case client_message_content_tag::RESOLVE_ISS_OBJECT: return as_resolve_iss_object(a) == as_resolve_iss_object(b); case client_message_content_tag::ISS_OBJECT_METADATA: return as_iss_object_metadata(a) == as_iss_object_metadata(b); case client_message_content_tag::POST_ISS_OBJECT: return as_post_iss_object(a) == as_post_iss_object(b); case client_message_content_tag::COPY_ISS_OBJECT: return as_copy_iss_object(a) == as_copy_iss_object(b); case client_message_content_tag::COPY_CALCULATION: return as_copy_calculation(a) == as_copy_calculation(b); case client_message_content_tag::POST_CALCULATION: return as_post_calculation(a) == as_post_calculation(b); case client_message_content_tag::RESOLVE_META_CHAIN: return as_resolve_meta_chain(a) == as_resolve_meta_chain(b); case client_message_content_tag::CALCULATION_REQUEST: return as_calculation_request(a) == as_calculation_request(b); case client_message_content_tag::CALCULATION_DIFF: return as_calculation_diff(a) == as_calculation_diff(b); case client_message_content_tag::CALCULATION_SEARCH: return as_calculation_search(a) == as_calculation_search(b); case client_message_content_tag::ISS_DIFF: return as_iss_diff(a) == as_iss_diff(b); case client_message_content_tag::PERFORM_LOCAL_CALC: return as_perform_local_calc(a) == as_perform_local_calc(b); case client_message_content_tag::RESULTS_API_QUERY: return as_results_api_query(a) == as_results_api_query(b); case client_message_content_tag::LOCAL_RESULTS_API_QUERY: return as_local_results_api_query(a) == as_local_results_api_query(b); case client_message_content_tag::INTROSPECTION_CONTROL: return as_introspection_control(a) == as_introspection_control(b); case client_message_content_tag::INTROSPECTION_STATUS_QUERY: return as_introspection_status_query(a) == as_introspection_status_query(b); case client_message_content_tag::REQUESTS_META_INFO_QUERY: return as_requests_meta_info_query(a) == as_requests_meta_info_query(b); case client_message_content_tag::RESOLVE_REQUEST: return as_resolve_request(a) == as_resolve_request(b); } return true; } bool operator!=(client_message_content const& a, client_message_content const& b) { return !(a == b); } bool operator<(client_message_content const& a, client_message_content const& b) { if (a.type < b.type) return true; if (b.type < a.type) return false; switch (a.type) { case client_message_content_tag::KILL: return as_kill(a) < as_kill(b); case client_message_content_tag::REGISTRATION: return as_registration(a) < as_registration(b); case client_message_content_tag::TEST: return as_test(a) < as_test(b); case client_message_content_tag::CACHE_INSERT: return as_cache_insert(a) < as_cache_insert(b); case client_message_content_tag::CACHE_QUERY: return as_cache_query(a) < as_cache_query(b); case client_message_content_tag::ISS_OBJECT: return as_iss_object(a) < as_iss_object(b); case client_message_content_tag::RESOLVE_ISS_OBJECT: return as_resolve_iss_object(a) < as_resolve_iss_object(b); case client_message_content_tag::ISS_OBJECT_METADATA: return as_iss_object_metadata(a) < as_iss_object_metadata(b); case client_message_content_tag::POST_ISS_OBJECT: return as_post_iss_object(a) < as_post_iss_object(b); case client_message_content_tag::COPY_ISS_OBJECT: return as_copy_iss_object(a) < as_copy_iss_object(b); case client_message_content_tag::COPY_CALCULATION: return as_copy_calculation(a) < as_copy_calculation(b); case client_message_content_tag::POST_CALCULATION: return as_post_calculation(a) < as_post_calculation(b); case client_message_content_tag::RESOLVE_META_CHAIN: return as_resolve_meta_chain(a) < as_resolve_meta_chain(b); case client_message_content_tag::CALCULATION_REQUEST: return as_calculation_request(a) < as_calculation_request(b); case client_message_content_tag::CALCULATION_DIFF: return as_calculation_diff(a) < as_calculation_diff(b); case client_message_content_tag::CALCULATION_SEARCH: return as_calculation_search(a) < as_calculation_search(b); case client_message_content_tag::ISS_DIFF: return as_iss_diff(a) < as_iss_diff(b); case client_message_content_tag::PERFORM_LOCAL_CALC: return as_perform_local_calc(a) < as_perform_local_calc(b); case client_message_content_tag::RESULTS_API_QUERY: return as_results_api_query(a) < as_results_api_query(b); case client_message_content_tag::LOCAL_RESULTS_API_QUERY: return as_local_results_api_query(a) < as_local_results_api_query(b); case client_message_content_tag::INTROSPECTION_CONTROL: return as_introspection_control(a) < as_introspection_control(b); case client_message_content_tag::INTROSPECTION_STATUS_QUERY: return as_introspection_status_query(a) < as_introspection_status_query(b); case client_message_content_tag::REQUESTS_META_INFO_QUERY: return as_requests_meta_info_query(a) < as_requests_meta_info_query(b); case client_message_content_tag::RESOLVE_REQUEST: return as_resolve_request(a) < as_resolve_request(b); } return false; } size_t hash_value(client_message_content const& x) {     switch (x.type)     { case client_message_content_tag::KILL: return cradle::invoke_hash(as_kill(x)); case client_message_content_tag::REGISTRATION: return cradle::invoke_hash(as_registration(x)); case client_message_content_tag::TEST: return cradle::invoke_hash(as_test(x)); case client_message_content_tag::CACHE_INSERT: return cradle::invoke_hash(as_cache_insert(x)); case client_message_content_tag::CACHE_QUERY: return cradle::invoke_hash(as_cache_query(x)); case client_message_content_tag::ISS_OBJECT: return cradle::invoke_hash(as_iss_object(x)); case client_message_content_tag::RESOLVE_ISS_OBJECT: return cradle::invoke_hash(as_resolve_iss_object(x)); case client_message_content_tag::ISS_OBJECT_METADATA: return cradle::invoke_hash(as_iss_object_metadata(x)); case client_message_content_tag::POST_ISS_OBJECT: return cradle::invoke_hash(as_post_iss_object(x)); case client_message_content_tag::COPY_ISS_OBJECT: return cradle::invoke_hash(as_copy_iss_object(x)); case client_message_content_tag::COPY_CALCULATION: return cradle::invoke_hash(as_copy_calculation(x)); case client_message_content_tag::POST_CALCULATION: return cradle::invoke_hash(as_post_calculation(x)); case client_message_content_tag::RESOLVE_META_CHAIN: return cradle::invoke_hash(as_resolve_meta_chain(x)); case client_message_content_tag::CALCULATION_REQUEST: return cradle::invoke_hash(as_calculation_request(x)); case client_message_content_tag::CALCULATION_DIFF: return cradle::invoke_hash(as_calculation_diff(x)); case client_message_content_tag::CALCULATION_SEARCH: return cradle::invoke_hash(as_calculation_search(x)); case client_message_content_tag::ISS_DIFF: return cradle::invoke_hash(as_iss_diff(x)); case client_message_content_tag::PERFORM_LOCAL_CALC: return cradle::invoke_hash(as_perform_local_calc(x)); case client_message_content_tag::RESULTS_API_QUERY: return cradle::invoke_hash(as_results_api_query(x)); case client_message_content_tag::LOCAL_RESULTS_API_QUERY: return cradle::invoke_hash(as_local_results_api_query(x)); case client_message_content_tag::INTROSPECTION_CONTROL: return cradle::invoke_hash(as_introspection_control(x)); case client_message_content_tag::INTROSPECTION_STATUS_QUERY: return cradle::invoke_hash(as_introspection_status_query(x)); case client_message_content_tag::REQUESTS_META_INFO_QUERY: return cradle::invoke_hash(as_requests_meta_info_query(x)); case client_message_content_tag::RESOLVE_REQUEST: return cradle::invoke_hash(as_resolve_request(x));      } assert(0); return 0; }void swap(client_message_content& a, client_message_content& b) { using std::swap; swap(a.type, b.type); swap(a.contents_, b.contents_); } void to_dynamic(cradle::dynamic* v, client_message_content const& x) { cradle::dynamic_map s; switch (x.type) { case client_message_content_tag::KILL: to_dynamic(&s[dynamic("kill")], as_kill(x)); break; case client_message_content_tag::REGISTRATION: to_dynamic(&s[dynamic("registration")], as_registration(x)); break; case client_message_content_tag::TEST: to_dynamic(&s[dynamic("test")], as_test(x)); break; case client_message_content_tag::CACHE_INSERT: to_dynamic(&s[dynamic("cache_insert")], as_cache_insert(x)); break; case client_message_content_tag::CACHE_QUERY: to_dynamic(&s[dynamic("cache_query")], as_cache_query(x)); break; case client_message_content_tag::ISS_OBJECT: to_dynamic(&s[dynamic("iss_object")], as_iss_object(x)); break; case client_message_content_tag::RESOLVE_ISS_OBJECT: to_dynamic(&s[dynamic("resolve_iss_object")], as_resolve_iss_object(x)); break; case client_message_content_tag::ISS_OBJECT_METADATA: to_dynamic(&s[dynamic("iss_object_metadata")], as_iss_object_metadata(x)); break; case client_message_content_tag::POST_ISS_OBJECT: to_dynamic(&s[dynamic("post_iss_object")], as_post_iss_object(x)); break; case client_message_content_tag::COPY_ISS_OBJECT: to_dynamic(&s[dynamic("copy_iss_object")], as_copy_iss_object(x)); break; case client_message_content_tag::COPY_CALCULATION: to_dynamic(&s[dynamic("copy_calculation")], as_copy_calculation(x)); break; case client_message_content_tag::POST_CALCULATION: to_dynamic(&s[dynamic("post_calculation")], as_post_calculation(x)); break; case client_message_content_tag::RESOLVE_META_CHAIN: to_dynamic(&s[dynamic("resolve_meta_chain")], as_resolve_meta_chain(x)); break; case client_message_content_tag::CALCULATION_REQUEST: to_dynamic(&s[dynamic("calculation_request")], as_calculation_request(x)); break; case client_message_content_tag::CALCULATION_DIFF: to_dynamic(&s[dynamic("calculation_diff")], as_calculation_diff(x)); break; case client_message_content_tag::CALCULATION_SEARCH: to_dynamic(&s[dynamic("calculation_search")], as_calculation_search(x)); break; case client_message_content_tag::ISS_DIFF: to_dynamic(&s[dynamic("iss_diff")], as_iss_diff(x)); break; case client_message_content_tag::PERFORM_LOCAL_CALC: to_dynamic(&s[dynamic("perform_local_calc")], as_perform_local_calc(x)); break; case client_message_content_tag::RESULTS_API_QUERY: to_dynamic(&s[dynamic("results_api_query")], as_results_api_query(x)); break; case client_message_content_tag::LOCAL_RESULTS_API_QUERY: to_dynamic(&s[dynamic("local_results_api_query")], as_local_results_api_query(x)); break; case client_message_content_tag::INTROSPECTION_CONTROL: to_dynamic(&s[dynamic("introspection_control")], as_introspection_control(x)); break; case client_message_content_tag::INTROSPECTION_STATUS_QUERY: to_dynamic(&s[dynamic("introspection_status_query")], as_introspection_status_query(x)); break; case client_message_content_tag::REQUESTS_META_INFO_QUERY: to_dynamic(&s[dynamic("requests_meta_info_query")], as_requests_meta_info_query(x)); break; case client_message_content_tag::RESOLVE_REQUEST: to_dynamic(&s[dynamic("resolve_request")], as_resolve_request(x)); break; } *v = std::move(s); } void from_dynamic(client_message_content* x, cradle::dynamic const& v) { cradle::dynamic_map const& s = cradle::cast<cradle::dynamic_map>(v); from_dynamic(&x->type, get_union_tag(s)); switch (x->type) { case client_message_content_tag::KILL:  { cradle::nil_t tmp; from_dynamic(&tmp, get_field(s, "kill")); x->contents_ = tmp; break;  } case client_message_content_tag::REGISTRATION:  { cradle::websocket_registration_message tmp; from_dynamic(&tmp, get_field(s, "registration")); x->contents_ = tmp; break;  } case client_message_content_tag::TEST:  { cradle::websocket_test_query tmp; from_dynamic(&tmp, get_field(s, "test")); x->contents_ = tmp; break;  } case client_message_content_tag::CACHE_INSERT:  { cradle::websocket_cache_insert tmp; from_dynamic(&tmp, get_field(s, "cache_insert")); x->contents_ = tmp; break;  } case client_message_content_tag::CACHE_QUERY:  { std::string tmp; from_dynamic(&tmp, get_field(s, "cache_query")); x->contents_ = tmp; break;  } case client_message_content_tag::ISS_OBJECT:  { cradle::iss_object_request tmp; from_dynamic(&tmp, get_field(s, "iss_object")); x->contents_ = tmp; break;  } case client_message_content_tag::RESOLVE_ISS_OBJECT:  { cradle::resolve_iss_object_request tmp; from_dynamic(&tmp, get_field(s, "resolve_iss_object")); x->contents_ = tmp; break;  } case client_message_content_tag::ISS_OBJECT_METADATA:  { cradle::iss_object_metadata_request tmp; from_dynamic(&tmp, get_field(s, "iss_object_metadata")); x->contents_ = tmp; break;  } case client_message_content_tag::POST_ISS_OBJECT:  { cradle::post_iss_object_request tmp; from_dynamic(&tmp, get_field(s, "post_iss_object")); x->contents_ = tmp; break;  } case client_message_content_tag::COPY_ISS_OBJECT:  { cradle::copy_iss_object_request tmp; from_dynamic(&tmp, get_field(s, "copy_iss_object")); x->contents_ = tmp; break;  } case client_message_content_tag::COPY_CALCULATION:  { cradle::copy_calculation_request tmp; from_dynamic(&tmp, get_field(s, "copy_calculation")); x->contents_ = tmp; break;  } case client_message_content_tag::POST_CALCULATION:  { cradle::post_calculation_request tmp; from_dynamic(&tmp, get_field(s, "post_calculation")); x->contents_ = tmp; break;  } case client_message_content_tag::RESOLVE_META_CHAIN:  { cradle::resolve_meta_chain_request tmp; from_dynamic(&tmp, get_field(s, "resolve_meta_chain")); x->contents_ = tmp; break;  } case client_message_content_tag::CALCULATION_REQUEST:  { cradle::calculation_request_message tmp; from_dynamic(&tmp, get_field(s, "calculation_request")); x->contents_ = tmp; break;  } case client_message_content_tag::CALCULATION_DIFF:  { cradle::calculation_diff_request tmp; from_dynamic(&tmp, get_field(s, "calculation_diff")); x->contents_ = tmp; break;  } case client_message_content_tag::CALCULATION_SEARCH:  { cradle::calculation_search_request tmp; from_dynamic(&tmp, get_field(s, "calculation_search")); x->contents_ = tmp; break;  } case client_message_content_tag::ISS_DIFF:  { cradle::iss_diff_request tmp; from_dynamic(&tmp, get_field(s, "iss_diff")); x->contents_ = tmp; break;  } case client_message_content_tag::PERFORM_LOCAL_CALC:  { cradle::post_calculation_request tmp; from_dynamic(&tmp, get_field(s, "perform_local_calc")); x->contents_ = tmp; break;  } case client_message_content_tag::RESULTS_API_QUERY:  { cradle::results_api_query tmp; from_dynamic(&tmp, get_field(s, "results_api_query")); x->contents_ = tmp; break;  } case client_message_content_tag::LOCAL_RESULTS_API_QUERY:  { cradle::results_api_query tmp; from_dynamic(&tmp, get_field(s, "local_results_api_query")); x->contents_ = tmp; break;  } case client_message_content_tag::INTROSPECTION_CONTROL:  { cradle::introspection_control_request tmp; from_dynamic(&tmp, get_field(s, "introspection_control")); x->contents_ = tmp; break;  } case client_message_content_tag::INTROSPECTION_STATUS_QUERY:  { cradle::introspection_status_request tmp; from_dynamic(&tmp, get_field(s, "introspection_status_query")); x->contents_ = tmp; break;  } case client_message_content_tag::REQUESTS_META_INFO_QUERY:  { cradle::nil_t tmp; from_dynamic(&tmp, get_field(s, "requests_meta_info_query")); x->contents_ = tmp; break;  } case client_message_content_tag::RESOLVE_REQUEST:  { cradle::resolve_request_request tmp; from_dynamic(&tmp, get_field(s, "resolve_request")); x->contents_ = tmp; break;  } } } std::ostream& operator<<(std::ostream& s, client_message_content const& x) { return s << to_dynamic(x); } size_t deep_sizeof(client_message_content const& x) { using cradle::deep_sizeof; size_t size = sizeof(x); switch (x.type) { case client_message_content_tag::KILL: size += deep_sizeof(as_kill(x)); break; case client_message_content_tag::REGISTRATION: size += deep_sizeof(as_registration(x)); break; case client_message_content_tag::TEST: size += deep_sizeof(as_test(x)); break; case client_message_content_tag::CACHE_INSERT: size += deep_sizeof(as_cache_insert(x)); break; case client_message_content_tag::CACHE_QUERY: size += deep_sizeof(as_cache_query(x)); break; case client_message_content_tag::ISS_OBJECT: size += deep_sizeof(as_iss_object(x)); break; case client_message_content_tag::RESOLVE_ISS_OBJECT: size += deep_sizeof(as_resolve_iss_object(x)); break; case client_message_content_tag::ISS_OBJECT_METADATA: size += deep_sizeof(as_iss_object_metadata(x)); break; case client_message_content_tag::POST_ISS_OBJECT: size += deep_sizeof(as_post_iss_object(x)); break; case client_message_content_tag::COPY_ISS_OBJECT: size += deep_sizeof(as_copy_iss_object(x)); break; case client_message_content_tag::COPY_CALCULATION: size += deep_sizeof(as_copy_calculation(x)); break; case client_message_content_tag::POST_CALCULATION: size += deep_sizeof(as_post_calculation(x)); break; case client_message_content_tag::RESOLVE_META_CHAIN: size += deep_sizeof(as_resolve_meta_chain(x)); break; case client_message_content_tag::CALCULATION_REQUEST: size += deep_sizeof(as_calculation_request(x)); break; case client_message_content_tag::CALCULATION_DIFF: size += deep_sizeof(as_calculation_diff(x)); break; case client_message_content_tag::CALCULATION_SEARCH: size += deep_sizeof(as_calculation_search(x)); break; case client_message_content_tag::ISS_DIFF: size += deep_sizeof(as_iss_diff(x)); break; case client_message_content_tag::PERFORM_LOCAL_CALC: size += deep_sizeof(as_perform_local_calc(x)); break; case client_message_content_tag::RESULTS_API_QUERY: size += deep_sizeof(as_results_api_query(x)); break; case client_message_content_tag::LOCAL_RESULTS_API_QUERY: size += deep_sizeof(as_local_results_api_query(x)); break; case client_message_content_tag::INTROSPECTION_CONTROL: size += deep_sizeof(as_introspection_control(x)); break; case client_message_content_tag::INTROSPECTION_STATUS_QUERY: size += deep_sizeof(as_introspection_status_query(x)); break; case client_message_content_tag::REQUESTS_META_INFO_QUERY: size += deep_sizeof(as_requests_meta_info_query(x)); break; case client_message_content_tag::RESOLVE_REQUEST: size += deep_sizeof(as_resolve_request(x)); break; } return size; } 

#line 305 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_client_message>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_client_message>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_client_message>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_client_message")); } void structure_field_type_info_adder<websocket_client_message>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["request_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_client_message>().request_id)>(),             none);    (*fields)["content"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_client_message>().content)>(),             none); } bool operator==(websocket_client_message const& a, websocket_client_message const& b) { return a.request_id == b.request_id && a.content == b.content; } bool operator!=(websocket_client_message const& a, websocket_client_message const& b) { return !(a == b); } bool operator<(websocket_client_message const& a, websocket_client_message const& b) { if (a.request_id < b.request_id) return true; if (b.request_id < a.request_id) return false; if (a.content < b.content) return true; if (b.content < a.content) return false;     return false; } void swap(websocket_client_message& a, websocket_client_message& b) {     using std::swap;     swap(a.request_id, b.request_id);     swap(a.content, b.content); } size_t deep_sizeof(websocket_client_message const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.request_id) + deep_sizeof(x.content) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_client_message const& x) { using cradle::write_field_to_record; write_field_to_record(record, "request_id", x.request_id); write_field_to_record(record, "content", x.content); } void to_dynamic(cradle::dynamic* v, websocket_client_message const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_client_message& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.request_id, record, "request_id"); read_field_from_record(&x.content, record, "content"); } void from_dynamic(websocket_client_message* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_client_message const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_client_message const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.request_id)); boost::hash_combine(h, cradle::invoke_hash(x.content));  return h; }} namespace cradle { 

#line 312 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<http_failure_info>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<http_failure_info>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<http_failure_info>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "http_failure_info")); } void structure_field_type_info_adder<http_failure_info>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["attempted_request"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<http_failure_info>().attempted_request)>(),             none);    (*fields)["response"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<http_failure_info>().response)>(),             none); } bool operator==(http_failure_info const& a, http_failure_info const& b) { return a.attempted_request == b.attempted_request && a.response == b.response; } bool operator!=(http_failure_info const& a, http_failure_info const& b) { return !(a == b); } bool operator<(http_failure_info const& a, http_failure_info const& b) { if (a.attempted_request < b.attempted_request) return true; if (b.attempted_request < a.attempted_request) return false; if (a.response < b.response) return true; if (b.response < a.response) return false;     return false; } void swap(http_failure_info& a, http_failure_info& b) {     using std::swap;     swap(a.attempted_request, b.attempted_request);     swap(a.response, b.response); } size_t deep_sizeof(http_failure_info const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.attempted_request) + deep_sizeof(x.response) ; } void write_fields_to_record(cradle::dynamic_map& record, http_failure_info const& x) { using cradle::write_field_to_record; write_field_to_record(record, "attempted_request", x.attempted_request); write_field_to_record(record, "response", x.response); } void to_dynamic(cradle::dynamic* v, http_failure_info const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(http_failure_info& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.attempted_request, record, "attempted_request"); read_field_from_record(&x.response, record, "response"); } void from_dynamic(http_failure_info* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, http_failure_info const& x) { return s << to_dynamic(x); } size_t hash_value(http_failure_info const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.attempted_request)); boost::hash_combine(h, cradle::invoke_hash(x.response));  return h; }} namespace cradle { 

#line 319 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
void definitive_type_info_query<error_response_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_enum_type(             cradle::get_enum_type_info<error_response_tag>()); } void type_info_query<error_response_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "error_response_tag")); } void enum_type_info_query<error_response_tag>::get(     cradle::api_enum_info* info) {     std::map<std::string, cradle::api_enum_value_info> values; values["bad_status_code"] =  cradle::api_enum_value_info( "");values["unregistered_client"] =  cradle::api_enum_value_info( "");values["unknown"] =  cradle::api_enum_value_info( "");     *info = cradle::api_enum_info(values); } char const* get_value_id(error_response_tag value) {     switch (value)     { case error_response_tag::BAD_STATUS_CODE: return "bad_status_code";case error_response_tag::UNREGISTERED_CLIENT: return "unregistered_client";case error_response_tag::UNKNOWN: return "unknown";     }     CRADLE_THROW(         cradle::invalid_enum_value() <<             cradle::enum_id_info("error_response_tag") <<             cradle::enum_value_info(int(value))); }void to_dynamic(     cradle::dynamic* v,     error_response_tag x) {     *v = get_value_id(x); } void from_dynamic(     error_response_tag* x,     cradle::dynamic const& v) {     string s = cast<string>(v);     if (boost::to_lower_copy(s) == "bad_status_code")     {         *x = error_response_tag::BAD_STATUS_CODE;         return;     };    if (boost::to_lower_copy(s) == "unregistered_client")     {         *x = error_response_tag::UNREGISTERED_CLIENT;         return;     };    if (boost::to_lower_copy(s) == "unknown")     {         *x = error_response_tag::UNKNOWN;         return;     };     CRADLE_THROW(         cradle::invalid_enum_string() <<             cradle::enum_id_info("error_response_tag") <<             cradle::enum_string_info(s)); } std::ostream& operator<<(std::ostream& s, error_response_tag const& x) {     s << get_value_id(x);     return s; } void definitive_type_info_query<error_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_union_member_info> members;     members["bad_status_code"] =         cradle::api_union_member_info(             "an HTTP request returned a bad status code",             cradle::get_type_info<http_failure_info>());    members["unregistered_client"] =         cradle::api_union_member_info(             "the client hadn't registered yet",             cradle::get_type_info<nil_t>());    members["unknown"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<std::string>());     *info =         cradle::make_api_type_info_with_union_type(             cradle::api_union_info(                 members)); } void type_info_query<error_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "error_response")); } error_response make_error_response_with_bad_status_code(http_failure_info const& x) { error_response s; s.type = error_response_tag::BAD_STATUS_CODE; s.contents_ = x; return s; } error_response make_error_response_with_bad_status_code(http_failure_info&& x) { error_response s; s.type = error_response_tag::BAD_STATUS_CODE; s.contents_ = std::move(x); return s; } error_response make_error_response_with_unregistered_client(nil_t const& x) { error_response s; s.type = error_response_tag::UNREGISTERED_CLIENT; s.contents_ = x; return s; } error_response make_error_response_with_unregistered_client(nil_t&& x) { error_response s; s.type = error_response_tag::UNREGISTERED_CLIENT; s.contents_ = std::move(x); return s; } error_response make_error_response_with_unknown(std::string const& x) { error_response s; s.type = error_response_tag::UNKNOWN; s.contents_ = x; return s; } error_response make_error_response_with_unknown(std::string&& x) { error_response s; s.type = error_response_tag::UNKNOWN; s.contents_ = std::move(x); return s; } http_failure_info const& as_bad_status_code(error_response const& x) { assert(x.type == error_response_tag::BAD_STATUS_CODE); return std::any_cast<http_failure_info const& >(x.contents_); } nil_t const& as_unregistered_client(error_response const& x) { assert(x.type == error_response_tag::UNREGISTERED_CLIENT); return std::any_cast<nil_t const& >(x.contents_); } std::string const& as_unknown(error_response const& x) { assert(x.type == error_response_tag::UNKNOWN); return std::any_cast<std::string const& >(x.contents_); } http_failure_info& as_bad_status_code(error_response& x) { assert(x.type == error_response_tag::BAD_STATUS_CODE); return std::any_cast<http_failure_info&>(x.contents_); } nil_t& as_unregistered_client(error_response& x) { assert(x.type == error_response_tag::UNREGISTERED_CLIENT); return std::any_cast<nil_t&>(x.contents_); } std::string& as_unknown(error_response& x) { assert(x.type == error_response_tag::UNKNOWN); return std::any_cast<std::string&>(x.contents_); } void set_to_bad_status_code(error_response& x, http_failure_info const& y) { x.type = error_response_tag::BAD_STATUS_CODE; x.contents_ = y; } void set_to_bad_status_code(error_response& x, http_failure_info&& y) { x.type = error_response_tag::BAD_STATUS_CODE; x.contents_ = std::move(y); } void set_to_unregistered_client(error_response& x, nil_t const& y) { x.type = error_response_tag::UNREGISTERED_CLIENT; x.contents_ = y; } void set_to_unregistered_client(error_response& x, nil_t&& y) { x.type = error_response_tag::UNREGISTERED_CLIENT; x.contents_ = std::move(y); } void set_to_unknown(error_response& x, std::string const& y) { x.type = error_response_tag::UNKNOWN; x.contents_ = y; } void set_to_unknown(error_response& x, std::string&& y) { x.type = error_response_tag::UNKNOWN; x.contents_ = std::move(y); } bool operator==(error_response const& a, error_response const& b) { if (a.type != b.type) return false; switch (a.type) { case error_response_tag::BAD_STATUS_CODE: return as_bad_status_code(a) == as_bad_status_code(b); case error_response_tag::UNREGISTERED_CLIENT: return as_unregistered_client(a) == as_unregistered_client(b); case error_response_tag::UNKNOWN: return as_unknown(a) == as_unknown(b); } return true; } bool operator!=(error_response const& a, error_response const& b) { return !(a == b); } bool operator<(error_response const& a, error_response const& b) { if (a.type < b.type) return true; if (b.type < a.type) return false; switch (a.type) { case error_response_tag::BAD_STATUS_CODE: return as_bad_status_code(a) < as_bad_status_code(b); case error_response_tag::UNREGISTERED_CLIENT: return as_unregistered_client(a) < as_unregistered_client(b); case error_response_tag::UNKNOWN: return as_unknown(a) < as_unknown(b); } return false; } size_t hash_value(error_response const& x) {     switch (x.type)     { case error_response_tag::BAD_STATUS_CODE: return cradle::invoke_hash(as_bad_status_code(x)); case error_response_tag::UNREGISTERED_CLIENT: return cradle::invoke_hash(as_unregistered_client(x)); case error_response_tag::UNKNOWN: return cradle::invoke_hash(as_unknown(x));      } assert(0); return 0; }void swap(error_response& a, error_response& b) { using std::swap; swap(a.type, b.type); swap(a.contents_, b.contents_); } void to_dynamic(cradle::dynamic* v, error_response const& x) { cradle::dynamic_map s; switch (x.type) { case error_response_tag::BAD_STATUS_CODE: to_dynamic(&s[dynamic("bad_status_code")], as_bad_status_code(x)); break; case error_response_tag::UNREGISTERED_CLIENT: to_dynamic(&s[dynamic("unregistered_client")], as_unregistered_client(x)); break; case error_response_tag::UNKNOWN: to_dynamic(&s[dynamic("unknown")], as_unknown(x)); break; } *v = std::move(s); } void from_dynamic(error_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& s = cradle::cast<cradle::dynamic_map>(v); from_dynamic(&x->type, get_union_tag(s)); switch (x->type) { case error_response_tag::BAD_STATUS_CODE:  { http_failure_info tmp; from_dynamic(&tmp, get_field(s, "bad_status_code")); x->contents_ = tmp; break;  } case error_response_tag::UNREGISTERED_CLIENT:  { nil_t tmp; from_dynamic(&tmp, get_field(s, "unregistered_client")); x->contents_ = tmp; break;  } case error_response_tag::UNKNOWN:  { std::string tmp; from_dynamic(&tmp, get_field(s, "unknown")); x->contents_ = tmp; break;  } } } std::ostream& operator<<(std::ostream& s, error_response const& x) { return s << to_dynamic(x); } size_t deep_sizeof(error_response const& x) { using cradle::deep_sizeof; size_t size = sizeof(x); switch (x.type) { case error_response_tag::BAD_STATUS_CODE: size += deep_sizeof(as_bad_status_code(x)); break; case error_response_tag::UNREGISTERED_CLIENT: size += deep_sizeof(as_unregistered_client(x)); break; case error_response_tag::UNKNOWN: size += deep_sizeof(as_unknown(x)); break; } return size; } 

#line 329 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<tasklet_msg_event>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<tasklet_msg_event>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<tasklet_msg_event>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "tasklet_msg_event")); } void structure_field_type_info_adder<tasklet_msg_event>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["when"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_msg_event>().when)>(),             none);    (*fields)["what"] =         cradle::api_structure_field_info(             "Milliseconds since epoch",             cradle::get_type_info<decltype(std::declval<tasklet_msg_event>().what)>(),             none);    (*fields)["details"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_msg_event>().details)>(),             none); } bool operator==(tasklet_msg_event const& a, tasklet_msg_event const& b) { return a.when == b.when && a.what == b.what && a.details == b.details; } bool operator!=(tasklet_msg_event const& a, tasklet_msg_event const& b) { return !(a == b); } bool operator<(tasklet_msg_event const& a, tasklet_msg_event const& b) { if (a.when < b.when) return true; if (b.when < a.when) return false; if (a.what < b.what) return true; if (b.what < a.what) return false; if (a.details < b.details) return true; if (b.details < a.details) return false;     return false; } void swap(tasklet_msg_event& a, tasklet_msg_event& b) {     using std::swap;     swap(a.when, b.when);     swap(a.what, b.what);     swap(a.details, b.details); } size_t deep_sizeof(tasklet_msg_event const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.when) + deep_sizeof(x.what) + deep_sizeof(x.details) ; } void write_fields_to_record(cradle::dynamic_map& record, tasklet_msg_event const& x) { using cradle::write_field_to_record; write_field_to_record(record, "when", x.when); write_field_to_record(record, "what", x.what); write_field_to_record(record, "details", x.details); } void to_dynamic(cradle::dynamic* v, tasklet_msg_event const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(tasklet_msg_event& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.when, record, "when"); read_field_from_record(&x.what, record, "what"); read_field_from_record(&x.details, record, "details"); } void from_dynamic(tasklet_msg_event* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, tasklet_msg_event const& x) { return s << to_dynamic(x); } size_t hash_value(tasklet_msg_event const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.when)); boost::hash_combine(h, cradle::invoke_hash(x.what)); boost::hash_combine(h, cradle::invoke_hash(x.details));  return h; }} namespace cradle { 

#line 337 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<tasklet_overview>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<tasklet_overview>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<tasklet_overview>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "tasklet_overview")); } void structure_field_type_info_adder<tasklet_overview>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["pool_name"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_overview>().pool_name)>(),             none);    (*fields)["tasklet_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_overview>().tasklet_id)>(),             none);    (*fields)["client_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_overview>().client_id)>(),             none);    (*fields)["description"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_overview>().description)>(),             none);    (*fields)["events"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<tasklet_overview>().events)>(),             none); } bool operator==(tasklet_overview const& a, tasklet_overview const& b) { return a.pool_name == b.pool_name && a.tasklet_id == b.tasklet_id && a.client_id == b.client_id && a.description == b.description && a.events == b.events; } bool operator!=(tasklet_overview const& a, tasklet_overview const& b) { return !(a == b); } bool operator<(tasklet_overview const& a, tasklet_overview const& b) { if (a.pool_name < b.pool_name) return true; if (b.pool_name < a.pool_name) return false; if (a.tasklet_id < b.tasklet_id) return true; if (b.tasklet_id < a.tasklet_id) return false; if (a.client_id < b.client_id) return true; if (b.client_id < a.client_id) return false; if (a.description < b.description) return true; if (b.description < a.description) return false; if (a.events < b.events) return true; if (b.events < a.events) return false;     return false; } void swap(tasklet_overview& a, tasklet_overview& b) {     using std::swap;     swap(a.pool_name, b.pool_name);     swap(a.tasklet_id, b.tasklet_id);     swap(a.client_id, b.client_id);     swap(a.description, b.description);     swap(a.events, b.events); } size_t deep_sizeof(tasklet_overview const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.pool_name) + deep_sizeof(x.tasklet_id) + deep_sizeof(x.client_id) + deep_sizeof(x.description) + deep_sizeof(x.events) ; } void write_fields_to_record(cradle::dynamic_map& record, tasklet_overview const& x) { using cradle::write_field_to_record; write_field_to_record(record, "pool_name", x.pool_name); write_field_to_record(record, "tasklet_id", x.tasklet_id); write_field_to_record(record, "client_id", x.client_id); write_field_to_record(record, "description", x.description); write_field_to_record(record, "events", x.events); } void to_dynamic(cradle::dynamic* v, tasklet_overview const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(tasklet_overview& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.pool_name, record, "pool_name"); read_field_from_record(&x.tasklet_id, record, "tasklet_id"); read_field_from_record(&x.client_id, record, "client_id"); read_field_from_record(&x.description, record, "description"); read_field_from_record(&x.events, record, "events"); } void from_dynamic(tasklet_overview* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, tasklet_overview const& x) { return s << to_dynamic(x); } size_t hash_value(tasklet_overview const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.pool_name)); boost::hash_combine(h, cradle::invoke_hash(x.tasklet_id)); boost::hash_combine(h, cradle::invoke_hash(x.client_id)); boost::hash_combine(h, cradle::invoke_hash(x.description)); boost::hash_combine(h, cradle::invoke_hash(x.events));  return h; }} namespace cradle { 

#line 347 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<introspection_status_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<introspection_status_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<introspection_status_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "introspection_status_response")); } void structure_field_type_info_adder<introspection_status_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["now"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<introspection_status_response>().now)>(),             none);    (*fields)["tasklets"] =         cradle::api_structure_field_info(             "Milliseconds since epoch",             cradle::get_type_info<decltype(std::declval<introspection_status_response>().tasklets)>(),             none); } bool operator==(introspection_status_response const& a, introspection_status_response const& b) { return a.now == b.now && a.tasklets == b.tasklets; } bool operator!=(introspection_status_response const& a, introspection_status_response const& b) { return !(a == b); } bool operator<(introspection_status_response const& a, introspection_status_response const& b) { if (a.now < b.now) return true; if (b.now < a.now) return false; if (a.tasklets < b.tasklets) return true; if (b.tasklets < a.tasklets) return false;     return false; } void swap(introspection_status_response& a, introspection_status_response& b) {     using std::swap;     swap(a.now, b.now);     swap(a.tasklets, b.tasklets); } size_t deep_sizeof(introspection_status_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.now) + deep_sizeof(x.tasklets) ; } void write_fields_to_record(cradle::dynamic_map& record, introspection_status_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "now", x.now); write_field_to_record(record, "tasklets", x.tasklets); } void to_dynamic(cradle::dynamic* v, introspection_status_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(introspection_status_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.now, record, "now"); read_field_from_record(&x.tasklets, record, "tasklets"); } void from_dynamic(introspection_status_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, introspection_status_response const& x) { return s << to_dynamic(x); } size_t hash_value(introspection_status_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.now)); boost::hash_combine(h, cradle::invoke_hash(x.tasklets));  return h; }} namespace cradle { 

#line 354 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<requests_meta_info_response>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<requests_meta_info_response>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<requests_meta_info_response>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "requests_meta_info_response")); } void structure_field_type_info_adder<requests_meta_info_response>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["git_version"] =         cradle::api_structure_field_info(             "The Git version string forming part of some request uuid's",             cradle::get_type_info<decltype(std::declval<requests_meta_info_response>().git_version)>(),             none); } bool operator==(requests_meta_info_response const& a, requests_meta_info_response const& b) { return a.git_version == b.git_version; } bool operator!=(requests_meta_info_response const& a, requests_meta_info_response const& b) { return !(a == b); } bool operator<(requests_meta_info_response const& a, requests_meta_info_response const& b) { if (a.git_version < b.git_version) return true; if (b.git_version < a.git_version) return false;     return false; } void swap(requests_meta_info_response& a, requests_meta_info_response& b) {     using std::swap;     swap(a.git_version, b.git_version); } size_t deep_sizeof(requests_meta_info_response const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.git_version) ; } void write_fields_to_record(cradle::dynamic_map& record, requests_meta_info_response const& x) { using cradle::write_field_to_record; write_field_to_record(record, "git_version", x.git_version); } void to_dynamic(cradle::dynamic* v, requests_meta_info_response const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(requests_meta_info_response& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.git_version, record, "git_version"); } void from_dynamic(requests_meta_info_response* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, requests_meta_info_response const& x) { return s << to_dynamic(x); } size_t hash_value(requests_meta_info_response const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.git_version));  return h; }} namespace cradle { 

#line 362 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
void definitive_type_info_query<server_message_content_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_enum_type(             cradle::get_enum_type_info<server_message_content_tag>()); } void type_info_query<server_message_content_tag>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "server_message_content_tag")); } void enum_type_info_query<server_message_content_tag>::get(     cradle::api_enum_info* info) {     std::map<std::string, cradle::api_enum_value_info> values; values["registration_acknowledgement"] =  cradle::api_enum_value_info( "");values["test"] =  cradle::api_enum_value_info( "");values["cache_response"] =  cradle::api_enum_value_info( "");values["cache_insert_acknowledgement"] =  cradle::api_enum_value_info( "");values["error"] =  cradle::api_enum_value_info( "");values["iss_object_response"] =  cradle::api_enum_value_info( "");values["resolve_iss_object_response"] =  cradle::api_enum_value_info( "");values["iss_object_metadata_response"] =  cradle::api_enum_value_info( "");values["post_iss_object_response"] =  cradle::api_enum_value_info( "");values["copy_iss_object_response"] =  cradle::api_enum_value_info( "");values["copy_calculation_response"] =  cradle::api_enum_value_info( "");values["post_calculation_response"] =  cradle::api_enum_value_info( "");values["resolve_meta_chain_response"] =  cradle::api_enum_value_info( "");values["calculation_request_response"] =  cradle::api_enum_value_info( "");values["calculation_diff_response"] =  cradle::api_enum_value_info( "");values["calculation_search_response"] =  cradle::api_enum_value_info( "");values["iss_diff_response"] =  cradle::api_enum_value_info( "");values["local_calc_result"] =  cradle::api_enum_value_info( "");values["results_api_response"] =  cradle::api_enum_value_info( "");values["local_results_api_response"] =  cradle::api_enum_value_info( "");values["introspection_control_response"] =  cradle::api_enum_value_info( "");values["introspection_status_response"] =  cradle::api_enum_value_info( "");values["requests_meta_info_response"] =  cradle::api_enum_value_info( "");values["resolve_request_response"] =  cradle::api_enum_value_info( "");     *info = cradle::api_enum_info(values); } char const* get_value_id(server_message_content_tag value) {     switch (value)     { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT: return "registration_acknowledgement";case server_message_content_tag::TEST: return "test";case server_message_content_tag::CACHE_RESPONSE: return "cache_response";case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT: return "cache_insert_acknowledgement";case server_message_content_tag::ERROR: return "error";case server_message_content_tag::ISS_OBJECT_RESPONSE: return "iss_object_response";case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE: return "resolve_iss_object_response";case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE: return "iss_object_metadata_response";case server_message_content_tag::POST_ISS_OBJECT_RESPONSE: return "post_iss_object_response";case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE: return "copy_iss_object_response";case server_message_content_tag::COPY_CALCULATION_RESPONSE: return "copy_calculation_response";case server_message_content_tag::POST_CALCULATION_RESPONSE: return "post_calculation_response";case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE: return "resolve_meta_chain_response";case server_message_content_tag::CALCULATION_REQUEST_RESPONSE: return "calculation_request_response";case server_message_content_tag::CALCULATION_DIFF_RESPONSE: return "calculation_diff_response";case server_message_content_tag::CALCULATION_SEARCH_RESPONSE: return "calculation_search_response";case server_message_content_tag::ISS_DIFF_RESPONSE: return "iss_diff_response";case server_message_content_tag::LOCAL_CALC_RESULT: return "local_calc_result";case server_message_content_tag::RESULTS_API_RESPONSE: return "results_api_response";case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE: return "local_results_api_response";case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE: return "introspection_control_response";case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE: return "introspection_status_response";case server_message_content_tag::REQUESTS_META_INFO_RESPONSE: return "requests_meta_info_response";case server_message_content_tag::RESOLVE_REQUEST_RESPONSE: return "resolve_request_response";     }     CRADLE_THROW(         cradle::invalid_enum_value() <<             cradle::enum_id_info("server_message_content_tag") <<             cradle::enum_value_info(int(value))); }void to_dynamic(     cradle::dynamic* v,     server_message_content_tag x) {     *v = get_value_id(x); } void from_dynamic(     server_message_content_tag* x,     cradle::dynamic const& v) {     string s = cast<string>(v);     if (boost::to_lower_copy(s) == "registration_acknowledgement")     {         *x = server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT;         return;     };    if (boost::to_lower_copy(s) == "test")     {         *x = server_message_content_tag::TEST;         return;     };    if (boost::to_lower_copy(s) == "cache_response")     {         *x = server_message_content_tag::CACHE_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "cache_insert_acknowledgement")     {         *x = server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT;         return;     };    if (boost::to_lower_copy(s) == "error")     {         *x = server_message_content_tag::ERROR;         return;     };    if (boost::to_lower_copy(s) == "iss_object_response")     {         *x = server_message_content_tag::ISS_OBJECT_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "resolve_iss_object_response")     {         *x = server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "iss_object_metadata_response")     {         *x = server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "post_iss_object_response")     {         *x = server_message_content_tag::POST_ISS_OBJECT_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "copy_iss_object_response")     {         *x = server_message_content_tag::COPY_ISS_OBJECT_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "copy_calculation_response")     {         *x = server_message_content_tag::COPY_CALCULATION_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "post_calculation_response")     {         *x = server_message_content_tag::POST_CALCULATION_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "resolve_meta_chain_response")     {         *x = server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "calculation_request_response")     {         *x = server_message_content_tag::CALCULATION_REQUEST_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "calculation_diff_response")     {         *x = server_message_content_tag::CALCULATION_DIFF_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "calculation_search_response")     {         *x = server_message_content_tag::CALCULATION_SEARCH_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "iss_diff_response")     {         *x = server_message_content_tag::ISS_DIFF_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "local_calc_result")     {         *x = server_message_content_tag::LOCAL_CALC_RESULT;         return;     };    if (boost::to_lower_copy(s) == "results_api_response")     {         *x = server_message_content_tag::RESULTS_API_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "local_results_api_response")     {         *x = server_message_content_tag::LOCAL_RESULTS_API_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "introspection_control_response")     {         *x = server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "introspection_status_response")     {         *x = server_message_content_tag::INTROSPECTION_STATUS_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "requests_meta_info_response")     {         *x = server_message_content_tag::REQUESTS_META_INFO_RESPONSE;         return;     };    if (boost::to_lower_copy(s) == "resolve_request_response")     {         *x = server_message_content_tag::RESOLVE_REQUEST_RESPONSE;         return;     };     CRADLE_THROW(         cradle::invalid_enum_string() <<             cradle::enum_id_info("server_message_content_tag") <<             cradle::enum_string_info(s)); } std::ostream& operator<<(std::ostream& s, server_message_content_tag const& x) {     s << get_value_id(x);     return s; } void definitive_type_info_query<server_message_content>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_union_member_info> members;     members["registration_acknowledgement"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<nil_t>());    members["test"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::websocket_test_response>());    members["cache_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::websocket_cache_response>());    members["cache_insert_acknowledgement"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<nil_t>());    members["error"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::error_response>());    members["iss_object_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::iss_object_response>());    members["resolve_iss_object_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::resolve_iss_object_response>());    members["iss_object_metadata_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::iss_object_metadata_response>());    members["post_iss_object_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::post_iss_object_response>());    members["copy_iss_object_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::nil_t>());    members["copy_calculation_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::nil_t>());    members["post_calculation_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::post_calculation_response>());    members["resolve_meta_chain_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::resolve_meta_chain_response>());    members["calculation_request_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::calculation_request_response>());    members["calculation_diff_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::calculation_diff_response>());    members["calculation_search_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::calculation_search_response>());    members["iss_diff_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::iss_diff_response>());    members["local_calc_result"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::dynamic>());    members["results_api_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::results_api_response>());    members["local_results_api_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::local_results_api_response>());    members["introspection_control_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<nil_t>());    members["introspection_status_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::introspection_status_response>());    members["requests_meta_info_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::requests_meta_info_response>());    members["resolve_request_response"] =         cradle::api_union_member_info(             "",             cradle::get_type_info<cradle::dynamic>());     *info =         cradle::make_api_type_info_with_union_type(             cradle::api_union_info(                 members)); } void type_info_query<server_message_content>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "server_message_content")); } server_message_content make_server_message_content_with_registration_acknowledgement(nil_t const& x) { server_message_content s; s.type = server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT; s.contents_ = x; return s; } server_message_content make_server_message_content_with_registration_acknowledgement(nil_t&& x) { server_message_content s; s.type = server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_test(cradle::websocket_test_response const& x) { server_message_content s; s.type = server_message_content_tag::TEST; s.contents_ = x; return s; } server_message_content make_server_message_content_with_test(cradle::websocket_test_response&& x) { server_message_content s; s.type = server_message_content_tag::TEST; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_cache_response(cradle::websocket_cache_response const& x) { server_message_content s; s.type = server_message_content_tag::CACHE_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_cache_response(cradle::websocket_cache_response&& x) { server_message_content s; s.type = server_message_content_tag::CACHE_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_cache_insert_acknowledgement(nil_t const& x) { server_message_content s; s.type = server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT; s.contents_ = x; return s; } server_message_content make_server_message_content_with_cache_insert_acknowledgement(nil_t&& x) { server_message_content s; s.type = server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_error(cradle::error_response const& x) { server_message_content s; s.type = server_message_content_tag::ERROR; s.contents_ = x; return s; } server_message_content make_server_message_content_with_error(cradle::error_response&& x) { server_message_content s; s.type = server_message_content_tag::ERROR; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_iss_object_response(cradle::iss_object_response const& x) { server_message_content s; s.type = server_message_content_tag::ISS_OBJECT_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_iss_object_response(cradle::iss_object_response&& x) { server_message_content s; s.type = server_message_content_tag::ISS_OBJECT_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_resolve_iss_object_response(cradle::resolve_iss_object_response const& x) { server_message_content s; s.type = server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_resolve_iss_object_response(cradle::resolve_iss_object_response&& x) { server_message_content s; s.type = server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_iss_object_metadata_response(cradle::iss_object_metadata_response const& x) { server_message_content s; s.type = server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_iss_object_metadata_response(cradle::iss_object_metadata_response&& x) { server_message_content s; s.type = server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_post_iss_object_response(cradle::post_iss_object_response const& x) { server_message_content s; s.type = server_message_content_tag::POST_ISS_OBJECT_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_post_iss_object_response(cradle::post_iss_object_response&& x) { server_message_content s; s.type = server_message_content_tag::POST_ISS_OBJECT_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_copy_iss_object_response(cradle::nil_t const& x) { server_message_content s; s.type = server_message_content_tag::COPY_ISS_OBJECT_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_copy_iss_object_response(cradle::nil_t&& x) { server_message_content s; s.type = server_message_content_tag::COPY_ISS_OBJECT_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_copy_calculation_response(cradle::nil_t const& x) { server_message_content s; s.type = server_message_content_tag::COPY_CALCULATION_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_copy_calculation_response(cradle::nil_t&& x) { server_message_content s; s.type = server_message_content_tag::COPY_CALCULATION_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_post_calculation_response(cradle::post_calculation_response const& x) { server_message_content s; s.type = server_message_content_tag::POST_CALCULATION_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_post_calculation_response(cradle::post_calculation_response&& x) { server_message_content s; s.type = server_message_content_tag::POST_CALCULATION_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_resolve_meta_chain_response(cradle::resolve_meta_chain_response const& x) { server_message_content s; s.type = server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_resolve_meta_chain_response(cradle::resolve_meta_chain_response&& x) { server_message_content s; s.type = server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_calculation_request_response(cradle::calculation_request_response const& x) { server_message_content s; s.type = server_message_content_tag::CALCULATION_REQUEST_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_calculation_request_response(cradle::calculation_request_response&& x) { server_message_content s; s.type = server_message_content_tag::CALCULATION_REQUEST_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_calculation_diff_response(cradle::calculation_diff_response const& x) { server_message_content s; s.type = server_message_content_tag::CALCULATION_DIFF_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_calculation_diff_response(cradle::calculation_diff_response&& x) { server_message_content s; s.type = server_message_content_tag::CALCULATION_DIFF_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_calculation_search_response(cradle::calculation_search_response const& x) { server_message_content s; s.type = server_message_content_tag::CALCULATION_SEARCH_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_calculation_search_response(cradle::calculation_search_response&& x) { server_message_content s; s.type = server_message_content_tag::CALCULATION_SEARCH_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_iss_diff_response(cradle::iss_diff_response const& x) { server_message_content s; s.type = server_message_content_tag::ISS_DIFF_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_iss_diff_response(cradle::iss_diff_response&& x) { server_message_content s; s.type = server_message_content_tag::ISS_DIFF_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_local_calc_result(cradle::dynamic const& x) { server_message_content s; s.type = server_message_content_tag::LOCAL_CALC_RESULT; s.contents_ = x; return s; } server_message_content make_server_message_content_with_local_calc_result(cradle::dynamic&& x) { server_message_content s; s.type = server_message_content_tag::LOCAL_CALC_RESULT; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_results_api_response(cradle::results_api_response const& x) { server_message_content s; s.type = server_message_content_tag::RESULTS_API_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_results_api_response(cradle::results_api_response&& x) { server_message_content s; s.type = server_message_content_tag::RESULTS_API_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_local_results_api_response(cradle::local_results_api_response const& x) { server_message_content s; s.type = server_message_content_tag::LOCAL_RESULTS_API_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_local_results_api_response(cradle::local_results_api_response&& x) { server_message_content s; s.type = server_message_content_tag::LOCAL_RESULTS_API_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_introspection_control_response(nil_t const& x) { server_message_content s; s.type = server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_introspection_control_response(nil_t&& x) { server_message_content s; s.type = server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_introspection_status_response(cradle::introspection_status_response const& x) { server_message_content s; s.type = server_message_content_tag::INTROSPECTION_STATUS_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_introspection_status_response(cradle::introspection_status_response&& x) { server_message_content s; s.type = server_message_content_tag::INTROSPECTION_STATUS_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_requests_meta_info_response(cradle::requests_meta_info_response const& x) { server_message_content s; s.type = server_message_content_tag::REQUESTS_META_INFO_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_requests_meta_info_response(cradle::requests_meta_info_response&& x) { server_message_content s; s.type = server_message_content_tag::REQUESTS_META_INFO_RESPONSE; s.contents_ = std::move(x); return s; } server_message_content make_server_message_content_with_resolve_request_response(cradle::dynamic const& x) { server_message_content s; s.type = server_message_content_tag::RESOLVE_REQUEST_RESPONSE; s.contents_ = x; return s; } server_message_content make_server_message_content_with_resolve_request_response(cradle::dynamic&& x) { server_message_content s; s.type = server_message_content_tag::RESOLVE_REQUEST_RESPONSE; s.contents_ = std::move(x); return s; } nil_t const& as_registration_acknowledgement(server_message_content const& x) { assert(x.type == server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT); return std::any_cast<nil_t const& >(x.contents_); } cradle::websocket_test_response const& as_test(server_message_content const& x) { assert(x.type == server_message_content_tag::TEST); return std::any_cast<cradle::websocket_test_response const& >(x.contents_); } cradle::websocket_cache_response const& as_cache_response(server_message_content const& x) { assert(x.type == server_message_content_tag::CACHE_RESPONSE); return std::any_cast<cradle::websocket_cache_response const& >(x.contents_); } nil_t const& as_cache_insert_acknowledgement(server_message_content const& x) { assert(x.type == server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT); return std::any_cast<nil_t const& >(x.contents_); } cradle::error_response const& as_error(server_message_content const& x) { assert(x.type == server_message_content_tag::ERROR); return std::any_cast<cradle::error_response const& >(x.contents_); } cradle::iss_object_response const& as_iss_object_response(server_message_content const& x) { assert(x.type == server_message_content_tag::ISS_OBJECT_RESPONSE); return std::any_cast<cradle::iss_object_response const& >(x.contents_); } cradle::resolve_iss_object_response const& as_resolve_iss_object_response(server_message_content const& x) { assert(x.type == server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE); return std::any_cast<cradle::resolve_iss_object_response const& >(x.contents_); } cradle::iss_object_metadata_response const& as_iss_object_metadata_response(server_message_content const& x) { assert(x.type == server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE); return std::any_cast<cradle::iss_object_metadata_response const& >(x.contents_); } cradle::post_iss_object_response const& as_post_iss_object_response(server_message_content const& x) { assert(x.type == server_message_content_tag::POST_ISS_OBJECT_RESPONSE); return std::any_cast<cradle::post_iss_object_response const& >(x.contents_); } cradle::nil_t const& as_copy_iss_object_response(server_message_content const& x) { assert(x.type == server_message_content_tag::COPY_ISS_OBJECT_RESPONSE); return std::any_cast<cradle::nil_t const& >(x.contents_); } cradle::nil_t const& as_copy_calculation_response(server_message_content const& x) { assert(x.type == server_message_content_tag::COPY_CALCULATION_RESPONSE); return std::any_cast<cradle::nil_t const& >(x.contents_); } cradle::post_calculation_response const& as_post_calculation_response(server_message_content const& x) { assert(x.type == server_message_content_tag::POST_CALCULATION_RESPONSE); return std::any_cast<cradle::post_calculation_response const& >(x.contents_); } cradle::resolve_meta_chain_response const& as_resolve_meta_chain_response(server_message_content const& x) { assert(x.type == server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE); return std::any_cast<cradle::resolve_meta_chain_response const& >(x.contents_); } cradle::calculation_request_response const& as_calculation_request_response(server_message_content const& x) { assert(x.type == server_message_content_tag::CALCULATION_REQUEST_RESPONSE); return std::any_cast<cradle::calculation_request_response const& >(x.contents_); } cradle::calculation_diff_response const& as_calculation_diff_response(server_message_content const& x) { assert(x.type == server_message_content_tag::CALCULATION_DIFF_RESPONSE); return std::any_cast<cradle::calculation_diff_response const& >(x.contents_); } cradle::calculation_search_response const& as_calculation_search_response(server_message_content const& x) { assert(x.type == server_message_content_tag::CALCULATION_SEARCH_RESPONSE); return std::any_cast<cradle::calculation_search_response const& >(x.contents_); } cradle::iss_diff_response const& as_iss_diff_response(server_message_content const& x) { assert(x.type == server_message_content_tag::ISS_DIFF_RESPONSE); return std::any_cast<cradle::iss_diff_response const& >(x.contents_); } cradle::dynamic const& as_local_calc_result(server_message_content const& x) { assert(x.type == server_message_content_tag::LOCAL_CALC_RESULT); return std::any_cast<cradle::dynamic const& >(x.contents_); } cradle::results_api_response const& as_results_api_response(server_message_content const& x) { assert(x.type == server_message_content_tag::RESULTS_API_RESPONSE); return std::any_cast<cradle::results_api_response const& >(x.contents_); } cradle::local_results_api_response const& as_local_results_api_response(server_message_content const& x) { assert(x.type == server_message_content_tag::LOCAL_RESULTS_API_RESPONSE); return std::any_cast<cradle::local_results_api_response const& >(x.contents_); } nil_t const& as_introspection_control_response(server_message_content const& x) { assert(x.type == server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE); return std::any_cast<nil_t const& >(x.contents_); } cradle::introspection_status_response const& as_introspection_status_response(server_message_content const& x) { assert(x.type == server_message_content_tag::INTROSPECTION_STATUS_RESPONSE); return std::any_cast<cradle::introspection_status_response const& >(x.contents_); } cradle::requests_meta_info_response const& as_requests_meta_info_response(server_message_content const& x) { assert(x.type == server_message_content_tag::REQUESTS_META_INFO_RESPONSE); return std::any_cast<cradle::requests_meta_info_response const& >(x.contents_); } cradle::dynamic const& as_resolve_request_response(server_message_content const& x) { assert(x.type == server_message_content_tag::RESOLVE_REQUEST_RESPONSE); return std::any_cast<cradle::dynamic const& >(x.contents_); } nil_t& as_registration_acknowledgement(server_message_content& x) { assert(x.type == server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT); return std::any_cast<nil_t&>(x.contents_); } cradle::websocket_test_response& as_test(server_message_content& x) { assert(x.type == server_message_content_tag::TEST); return std::any_cast<cradle::websocket_test_response&>(x.contents_); } cradle::websocket_cache_response& as_cache_response(server_message_content& x) { assert(x.type == server_message_content_tag::CACHE_RESPONSE); return std::any_cast<cradle::websocket_cache_response&>(x.contents_); } nil_t& as_cache_insert_acknowledgement(server_message_content& x) { assert(x.type == server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT); return std::any_cast<nil_t&>(x.contents_); } cradle::error_response& as_error(server_message_content& x) { assert(x.type == server_message_content_tag::ERROR); return std::any_cast<cradle::error_response&>(x.contents_); } cradle::iss_object_response& as_iss_object_response(server_message_content& x) { assert(x.type == server_message_content_tag::ISS_OBJECT_RESPONSE); return std::any_cast<cradle::iss_object_response&>(x.contents_); } cradle::resolve_iss_object_response& as_resolve_iss_object_response(server_message_content& x) { assert(x.type == server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE); return std::any_cast<cradle::resolve_iss_object_response&>(x.contents_); } cradle::iss_object_metadata_response& as_iss_object_metadata_response(server_message_content& x) { assert(x.type == server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE); return std::any_cast<cradle::iss_object_metadata_response&>(x.contents_); } cradle::post_iss_object_response& as_post_iss_object_response(server_message_content& x) { assert(x.type == server_message_content_tag::POST_ISS_OBJECT_RESPONSE); return std::any_cast<cradle::post_iss_object_response&>(x.contents_); } cradle::nil_t& as_copy_iss_object_response(server_message_content& x) { assert(x.type == server_message_content_tag::COPY_ISS_OBJECT_RESPONSE); return std::any_cast<cradle::nil_t&>(x.contents_); } cradle::nil_t& as_copy_calculation_response(server_message_content& x) { assert(x.type == server_message_content_tag::COPY_CALCULATION_RESPONSE); return std::any_cast<cradle::nil_t&>(x.contents_); } cradle::post_calculation_response& as_post_calculation_response(server_message_content& x) { assert(x.type == server_message_content_tag::POST_CALCULATION_RESPONSE); return std::any_cast<cradle::post_calculation_response&>(x.contents_); } cradle::resolve_meta_chain_response& as_resolve_meta_chain_response(server_message_content& x) { assert(x.type == server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE); return std::any_cast<cradle::resolve_meta_chain_response&>(x.contents_); } cradle::calculation_request_response& as_calculation_request_response(server_message_content& x) { assert(x.type == server_message_content_tag::CALCULATION_REQUEST_RESPONSE); return std::any_cast<cradle::calculation_request_response&>(x.contents_); } cradle::calculation_diff_response& as_calculation_diff_response(server_message_content& x) { assert(x.type == server_message_content_tag::CALCULATION_DIFF_RESPONSE); return std::any_cast<cradle::calculation_diff_response&>(x.contents_); } cradle::calculation_search_response& as_calculation_search_response(server_message_content& x) { assert(x.type == server_message_content_tag::CALCULATION_SEARCH_RESPONSE); return std::any_cast<cradle::calculation_search_response&>(x.contents_); } cradle::iss_diff_response& as_iss_diff_response(server_message_content& x) { assert(x.type == server_message_content_tag::ISS_DIFF_RESPONSE); return std::any_cast<cradle::iss_diff_response&>(x.contents_); } cradle::dynamic& as_local_calc_result(server_message_content& x) { assert(x.type == server_message_content_tag::LOCAL_CALC_RESULT); return std::any_cast<cradle::dynamic&>(x.contents_); } cradle::results_api_response& as_results_api_response(server_message_content& x) { assert(x.type == server_message_content_tag::RESULTS_API_RESPONSE); return std::any_cast<cradle::results_api_response&>(x.contents_); } cradle::local_results_api_response& as_local_results_api_response(server_message_content& x) { assert(x.type == server_message_content_tag::LOCAL_RESULTS_API_RESPONSE); return std::any_cast<cradle::local_results_api_response&>(x.contents_); } nil_t& as_introspection_control_response(server_message_content& x) { assert(x.type == server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE); return std::any_cast<nil_t&>(x.contents_); } cradle::introspection_status_response& as_introspection_status_response(server_message_content& x) { assert(x.type == server_message_content_tag::INTROSPECTION_STATUS_RESPONSE); return std::any_cast<cradle::introspection_status_response&>(x.contents_); } cradle::requests_meta_info_response& as_requests_meta_info_response(server_message_content& x) { assert(x.type == server_message_content_tag::REQUESTS_META_INFO_RESPONSE); return std::any_cast<cradle::requests_meta_info_response&>(x.contents_); } cradle::dynamic& as_resolve_request_response(server_message_content& x) { assert(x.type == server_message_content_tag::RESOLVE_REQUEST_RESPONSE); return std::any_cast<cradle::dynamic&>(x.contents_); } void set_to_registration_acknowledgement(server_message_content& x, nil_t const& y) { x.type = server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT; x.contents_ = y; } void set_to_registration_acknowledgement(server_message_content& x, nil_t&& y) { x.type = server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT; x.contents_ = std::move(y); } void set_to_test(server_message_content& x, cradle::websocket_test_response const& y) { x.type = server_message_content_tag::TEST; x.contents_ = y; } void set_to_test(server_message_content& x, cradle::websocket_test_response&& y) { x.type = server_message_content_tag::TEST; x.contents_ = std::move(y); } void set_to_cache_response(server_message_content& x, cradle::websocket_cache_response const& y) { x.type = server_message_content_tag::CACHE_RESPONSE; x.contents_ = y; } void set_to_cache_response(server_message_content& x, cradle::websocket_cache_response&& y) { x.type = server_message_content_tag::CACHE_RESPONSE; x.contents_ = std::move(y); } void set_to_cache_insert_acknowledgement(server_message_content& x, nil_t const& y) { x.type = server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT; x.contents_ = y; } void set_to_cache_insert_acknowledgement(server_message_content& x, nil_t&& y) { x.type = server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT; x.contents_ = std::move(y); } void set_to_error(server_message_content& x, cradle::error_response const& y) { x.type = server_message_content_tag::ERROR; x.contents_ = y; } void set_to_error(server_message_content& x, cradle::error_response&& y) { x.type = server_message_content_tag::ERROR; x.contents_ = std::move(y); } void set_to_iss_object_response(server_message_content& x, cradle::iss_object_response const& y) { x.type = server_message_content_tag::ISS_OBJECT_RESPONSE; x.contents_ = y; } void set_to_iss_object_response(server_message_content& x, cradle::iss_object_response&& y) { x.type = server_message_content_tag::ISS_OBJECT_RESPONSE; x.contents_ = std::move(y); } void set_to_resolve_iss_object_response(server_message_content& x, cradle::resolve_iss_object_response const& y) { x.type = server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE; x.contents_ = y; } void set_to_resolve_iss_object_response(server_message_content& x, cradle::resolve_iss_object_response&& y) { x.type = server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE; x.contents_ = std::move(y); } void set_to_iss_object_metadata_response(server_message_content& x, cradle::iss_object_metadata_response const& y) { x.type = server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE; x.contents_ = y; } void set_to_iss_object_metadata_response(server_message_content& x, cradle::iss_object_metadata_response&& y) { x.type = server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE; x.contents_ = std::move(y); } void set_to_post_iss_object_response(server_message_content& x, cradle::post_iss_object_response const& y) { x.type = server_message_content_tag::POST_ISS_OBJECT_RESPONSE; x.contents_ = y; } void set_to_post_iss_object_response(server_message_content& x, cradle::post_iss_object_response&& y) { x.type = server_message_content_tag::POST_ISS_OBJECT_RESPONSE; x.contents_ = std::move(y); } void set_to_copy_iss_object_response(server_message_content& x, cradle::nil_t const& y) { x.type = server_message_content_tag::COPY_ISS_OBJECT_RESPONSE; x.contents_ = y; } void set_to_copy_iss_object_response(server_message_content& x, cradle::nil_t&& y) { x.type = server_message_content_tag::COPY_ISS_OBJECT_RESPONSE; x.contents_ = std::move(y); } void set_to_copy_calculation_response(server_message_content& x, cradle::nil_t const& y) { x.type = server_message_content_tag::COPY_CALCULATION_RESPONSE; x.contents_ = y; } void set_to_copy_calculation_response(server_message_content& x, cradle::nil_t&& y) { x.type = server_message_content_tag::COPY_CALCULATION_RESPONSE; x.contents_ = std::move(y); } void set_to_post_calculation_response(server_message_content& x, cradle::post_calculation_response const& y) { x.type = server_message_content_tag::POST_CALCULATION_RESPONSE; x.contents_ = y; } void set_to_post_calculation_response(server_message_content& x, cradle::post_calculation_response&& y) { x.type = server_message_content_tag::POST_CALCULATION_RESPONSE; x.contents_ = std::move(y); } void set_to_resolve_meta_chain_response(server_message_content& x, cradle::resolve_meta_chain_response const& y) { x.type = server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE; x.contents_ = y; } void set_to_resolve_meta_chain_response(server_message_content& x, cradle::resolve_meta_chain_response&& y) { x.type = server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE; x.contents_ = std::move(y); } void set_to_calculation_request_response(server_message_content& x, cradle::calculation_request_response const& y) { x.type = server_message_content_tag::CALCULATION_REQUEST_RESPONSE; x.contents_ = y; } void set_to_calculation_request_response(server_message_content& x, cradle::calculation_request_response&& y) { x.type = server_message_content_tag::CALCULATION_REQUEST_RESPONSE; x.contents_ = std::move(y); } void set_to_calculation_diff_response(server_message_content& x, cradle::calculation_diff_response const& y) { x.type = server_message_content_tag::CALCULATION_DIFF_RESPONSE; x.contents_ = y; } void set_to_calculation_diff_response(server_message_content& x, cradle::calculation_diff_response&& y) { x.type = server_message_content_tag::CALCULATION_DIFF_RESPONSE; x.contents_ = std::move(y); } void set_to_calculation_search_response(server_message_content& x, cradle::calculation_search_response const& y) { x.type = server_message_content_tag::CALCULATION_SEARCH_RESPONSE; x.contents_ = y; } void set_to_calculation_search_response(server_message_content& x, cradle::calculation_search_response&& y) { x.type = server_message_content_tag::CALCULATION_SEARCH_RESPONSE; x.contents_ = std::move(y); } void set_to_iss_diff_response(server_message_content& x, cradle::iss_diff_response const& y) { x.type = server_message_content_tag::ISS_DIFF_RESPONSE; x.contents_ = y; } void set_to_iss_diff_response(server_message_content& x, cradle::iss_diff_response&& y) { x.type = server_message_content_tag::ISS_DIFF_RESPONSE; x.contents_ = std::move(y); } void set_to_local_calc_result(server_message_content& x, cradle::dynamic const& y) { x.type = server_message_content_tag::LOCAL_CALC_RESULT; x.contents_ = y; } void set_to_local_calc_result(server_message_content& x, cradle::dynamic&& y) { x.type = server_message_content_tag::LOCAL_CALC_RESULT; x.contents_ = std::move(y); } void set_to_results_api_response(server_message_content& x, cradle::results_api_response const& y) { x.type = server_message_content_tag::RESULTS_API_RESPONSE; x.contents_ = y; } void set_to_results_api_response(server_message_content& x, cradle::results_api_response&& y) { x.type = server_message_content_tag::RESULTS_API_RESPONSE; x.contents_ = std::move(y); } void set_to_local_results_api_response(server_message_content& x, cradle::local_results_api_response const& y) { x.type = server_message_content_tag::LOCAL_RESULTS_API_RESPONSE; x.contents_ = y; } void set_to_local_results_api_response(server_message_content& x, cradle::local_results_api_response&& y) { x.type = server_message_content_tag::LOCAL_RESULTS_API_RESPONSE; x.contents_ = std::move(y); } void set_to_introspection_control_response(server_message_content& x, nil_t const& y) { x.type = server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE; x.contents_ = y; } void set_to_introspection_control_response(server_message_content& x, nil_t&& y) { x.type = server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE; x.contents_ = std::move(y); } void set_to_introspection_status_response(server_message_content& x, cradle::introspection_status_response const& y) { x.type = server_message_content_tag::INTROSPECTION_STATUS_RESPONSE; x.contents_ = y; } void set_to_introspection_status_response(server_message_content& x, cradle::introspection_status_response&& y) { x.type = server_message_content_tag::INTROSPECTION_STATUS_RESPONSE; x.contents_ = std::move(y); } void set_to_requests_meta_info_response(server_message_content& x, cradle::requests_meta_info_response const& y) { x.type = server_message_content_tag::REQUESTS_META_INFO_RESPONSE; x.contents_ = y; } void set_to_requests_meta_info_response(server_message_content& x, cradle::requests_meta_info_response&& y) { x.type = server_message_content_tag::REQUESTS_META_INFO_RESPONSE; x.contents_ = std::move(y); } void set_to_resolve_request_response(server_message_content& x, cradle::dynamic const& y) { x.type = server_message_content_tag::RESOLVE_REQUEST_RESPONSE; x.contents_ = y; } void set_to_resolve_request_response(server_message_content& x, cradle::dynamic&& y) { x.type = server_message_content_tag::RESOLVE_REQUEST_RESPONSE; x.contents_ = std::move(y); } bool operator==(server_message_content const& a, server_message_content const& b) { if (a.type != b.type) return false; switch (a.type) { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT: return as_registration_acknowledgement(a) == as_registration_acknowledgement(b); case server_message_content_tag::TEST: return as_test(a) == as_test(b); case server_message_content_tag::CACHE_RESPONSE: return as_cache_response(a) == as_cache_response(b); case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT: return as_cache_insert_acknowledgement(a) == as_cache_insert_acknowledgement(b); case server_message_content_tag::ERROR: return as_error(a) == as_error(b); case server_message_content_tag::ISS_OBJECT_RESPONSE: return as_iss_object_response(a) == as_iss_object_response(b); case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE: return as_resolve_iss_object_response(a) == as_resolve_iss_object_response(b); case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE: return as_iss_object_metadata_response(a) == as_iss_object_metadata_response(b); case server_message_content_tag::POST_ISS_OBJECT_RESPONSE: return as_post_iss_object_response(a) == as_post_iss_object_response(b); case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE: return as_copy_iss_object_response(a) == as_copy_iss_object_response(b); case server_message_content_tag::COPY_CALCULATION_RESPONSE: return as_copy_calculation_response(a) == as_copy_calculation_response(b); case server_message_content_tag::POST_CALCULATION_RESPONSE: return as_post_calculation_response(a) == as_post_calculation_response(b); case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE: return as_resolve_meta_chain_response(a) == as_resolve_meta_chain_response(b); case server_message_content_tag::CALCULATION_REQUEST_RESPONSE: return as_calculation_request_response(a) == as_calculation_request_response(b); case server_message_content_tag::CALCULATION_DIFF_RESPONSE: return as_calculation_diff_response(a) == as_calculation_diff_response(b); case server_message_content_tag::CALCULATION_SEARCH_RESPONSE: return as_calculation_search_response(a) == as_calculation_search_response(b); case server_message_content_tag::ISS_DIFF_RESPONSE: return as_iss_diff_response(a) == as_iss_diff_response(b); case server_message_content_tag::LOCAL_CALC_RESULT: return as_local_calc_result(a) == as_local_calc_result(b); case server_message_content_tag::RESULTS_API_RESPONSE: return as_results_api_response(a) == as_results_api_response(b); case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE: return as_local_results_api_response(a) == as_local_results_api_response(b); case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE: return as_introspection_control_response(a) == as_introspection_control_response(b); case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE: return as_introspection_status_response(a) == as_introspection_status_response(b); case server_message_content_tag::REQUESTS_META_INFO_RESPONSE: return as_requests_meta_info_response(a) == as_requests_meta_info_response(b); case server_message_content_tag::RESOLVE_REQUEST_RESPONSE: return as_resolve_request_response(a) == as_resolve_request_response(b); } return true; } bool operator!=(server_message_content const& a, server_message_content const& b) { return !(a == b); } bool operator<(server_message_content const& a, server_message_content const& b) { if (a.type < b.type) return true; if (b.type < a.type) return false; switch (a.type) { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT: return as_registration_acknowledgement(a) < as_registration_acknowledgement(b); case server_message_content_tag::TEST: return as_test(a) < as_test(b); case server_message_content_tag::CACHE_RESPONSE: return as_cache_response(a) < as_cache_response(b); case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT: return as_cache_insert_acknowledgement(a) < as_cache_insert_acknowledgement(b); case server_message_content_tag::ERROR: return as_error(a) < as_error(b); case server_message_content_tag::ISS_OBJECT_RESPONSE: return as_iss_object_response(a) < as_iss_object_response(b); case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE: return as_resolve_iss_object_response(a) < as_resolve_iss_object_response(b); case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE: return as_iss_object_metadata_response(a) < as_iss_object_metadata_response(b); case server_message_content_tag::POST_ISS_OBJECT_RESPONSE: return as_post_iss_object_response(a) < as_post_iss_object_response(b); case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE: return as_copy_iss_object_response(a) < as_copy_iss_object_response(b); case server_message_content_tag::COPY_CALCULATION_RESPONSE: return as_copy_calculation_response(a) < as_copy_calculation_response(b); case server_message_content_tag::POST_CALCULATION_RESPONSE: return as_post_calculation_response(a) < as_post_calculation_response(b); case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE: return as_resolve_meta_chain_response(a) < as_resolve_meta_chain_response(b); case server_message_content_tag::CALCULATION_REQUEST_RESPONSE: return as_calculation_request_response(a) < as_calculation_request_response(b); case server_message_content_tag::CALCULATION_DIFF_RESPONSE: return as_calculation_diff_response(a) < as_calculation_diff_response(b); case server_message_content_tag::CALCULATION_SEARCH_RESPONSE: return as_calculation_search_response(a) < as_calculation_search_response(b); case server_message_content_tag::ISS_DIFF_RESPONSE: return as_iss_diff_response(a) < as_iss_diff_response(b); case server_message_content_tag::LOCAL_CALC_RESULT: return as_local_calc_result(a) < as_local_calc_result(b); case server_message_content_tag::RESULTS_API_RESPONSE: return as_results_api_response(a) < as_results_api_response(b); case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE: return as_local_results_api_response(a) < as_local_results_api_response(b); case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE: return as_introspection_control_response(a) < as_introspection_control_response(b); case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE: return as_introspection_status_response(a) < as_introspection_status_response(b); case server_message_content_tag::REQUESTS_META_INFO_RESPONSE: return as_requests_meta_info_response(a) < as_requests_meta_info_response(b); case server_message_content_tag::RESOLVE_REQUEST_RESPONSE: return as_resolve_request_response(a) < as_resolve_request_response(b); } return false; } size_t hash_value(server_message_content const& x) {     switch (x.type)     { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT: return cradle::invoke_hash(as_registration_acknowledgement(x)); case server_message_content_tag::TEST: return cradle::invoke_hash(as_test(x)); case server_message_content_tag::CACHE_RESPONSE: return cradle::invoke_hash(as_cache_response(x)); case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT: return cradle::invoke_hash(as_cache_insert_acknowledgement(x)); case server_message_content_tag::ERROR: return cradle::invoke_hash(as_error(x)); case server_message_content_tag::ISS_OBJECT_RESPONSE: return cradle::invoke_hash(as_iss_object_response(x)); case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE: return cradle::invoke_hash(as_resolve_iss_object_response(x)); case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE: return cradle::invoke_hash(as_iss_object_metadata_response(x)); case server_message_content_tag::POST_ISS_OBJECT_RESPONSE: return cradle::invoke_hash(as_post_iss_object_response(x)); case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE: return cradle::invoke_hash(as_copy_iss_object_response(x)); case server_message_content_tag::COPY_CALCULATION_RESPONSE: return cradle::invoke_hash(as_copy_calculation_response(x)); case server_message_content_tag::POST_CALCULATION_RESPONSE: return cradle::invoke_hash(as_post_calculation_response(x)); case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE: return cradle::invoke_hash(as_resolve_meta_chain_response(x)); case server_message_content_tag::CALCULATION_REQUEST_RESPONSE: return cradle::invoke_hash(as_calculation_request_response(x)); case server_message_content_tag::CALCULATION_DIFF_RESPONSE: return cradle::invoke_hash(as_calculation_diff_response(x)); case server_message_content_tag::CALCULATION_SEARCH_RESPONSE: return cradle::invoke_hash(as_calculation_search_response(x)); case server_message_content_tag::ISS_DIFF_RESPONSE: return cradle::invoke_hash(as_iss_diff_response(x)); case server_message_content_tag::LOCAL_CALC_RESULT: return cradle::invoke_hash(as_local_calc_result(x)); case server_message_content_tag::RESULTS_API_RESPONSE: return cradle::invoke_hash(as_results_api_response(x)); case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE: return cradle::invoke_hash(as_local_results_api_response(x)); case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE: return cradle::invoke_hash(as_introspection_control_response(x)); case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE: return cradle::invoke_hash(as_introspection_status_response(x)); case server_message_content_tag::REQUESTS_META_INFO_RESPONSE: return cradle::invoke_hash(as_requests_meta_info_response(x)); case server_message_content_tag::RESOLVE_REQUEST_RESPONSE: return cradle::invoke_hash(as_resolve_request_response(x));      } assert(0); return 0; }void swap(server_message_content& a, server_message_content& b) { using std::swap; swap(a.type, b.type); swap(a.contents_, b.contents_); } void to_dynamic(cradle::dynamic* v, server_message_content const& x) { cradle::dynamic_map s; switch (x.type) { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT: to_dynamic(&s[dynamic("registration_acknowledgement")], as_registration_acknowledgement(x)); break; case server_message_content_tag::TEST: to_dynamic(&s[dynamic("test")], as_test(x)); break; case server_message_content_tag::CACHE_RESPONSE: to_dynamic(&s[dynamic("cache_response")], as_cache_response(x)); break; case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT: to_dynamic(&s[dynamic("cache_insert_acknowledgement")], as_cache_insert_acknowledgement(x)); break; case server_message_content_tag::ERROR: to_dynamic(&s[dynamic("error")], as_error(x)); break; case server_message_content_tag::ISS_OBJECT_RESPONSE: to_dynamic(&s[dynamic("iss_object_response")], as_iss_object_response(x)); break; case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE: to_dynamic(&s[dynamic("resolve_iss_object_response")], as_resolve_iss_object_response(x)); break; case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE: to_dynamic(&s[dynamic("iss_object_metadata_response")], as_iss_object_metadata_response(x)); break; case server_message_content_tag::POST_ISS_OBJECT_RESPONSE: to_dynamic(&s[dynamic("post_iss_object_response")], as_post_iss_object_response(x)); break; case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE: to_dynamic(&s[dynamic("copy_iss_object_response")], as_copy_iss_object_response(x)); break; case server_message_content_tag::COPY_CALCULATION_RESPONSE: to_dynamic(&s[dynamic("copy_calculation_response")], as_copy_calculation_response(x)); break; case server_message_content_tag::POST_CALCULATION_RESPONSE: to_dynamic(&s[dynamic("post_calculation_response")], as_post_calculation_response(x)); break; case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE: to_dynamic(&s[dynamic("resolve_meta_chain_response")], as_resolve_meta_chain_response(x)); break; case server_message_content_tag::CALCULATION_REQUEST_RESPONSE: to_dynamic(&s[dynamic("calculation_request_response")], as_calculation_request_response(x)); break; case server_message_content_tag::CALCULATION_DIFF_RESPONSE: to_dynamic(&s[dynamic("calculation_diff_response")], as_calculation_diff_response(x)); break; case server_message_content_tag::CALCULATION_SEARCH_RESPONSE: to_dynamic(&s[dynamic("calculation_search_response")], as_calculation_search_response(x)); break; case server_message_content_tag::ISS_DIFF_RESPONSE: to_dynamic(&s[dynamic("iss_diff_response")], as_iss_diff_response(x)); break; case server_message_content_tag::LOCAL_CALC_RESULT: to_dynamic(&s[dynamic("local_calc_result")], as_local_calc_result(x)); break; case server_message_content_tag::RESULTS_API_RESPONSE: to_dynamic(&s[dynamic("results_api_response")], as_results_api_response(x)); break; case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE: to_dynamic(&s[dynamic("local_results_api_response")], as_local_results_api_response(x)); break; case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE: to_dynamic(&s[dynamic("introspection_control_response")], as_introspection_control_response(x)); break; case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE: to_dynamic(&s[dynamic("introspection_status_response")], as_introspection_status_response(x)); break; case server_message_content_tag::REQUESTS_META_INFO_RESPONSE: to_dynamic(&s[dynamic("requests_meta_info_response")], as_requests_meta_info_response(x)); break; case server_message_content_tag::RESOLVE_REQUEST_RESPONSE: to_dynamic(&s[dynamic("resolve_request_response")], as_resolve_request_response(x)); break; } *v = std::move(s); } void from_dynamic(server_message_content* x, cradle::dynamic const& v) { cradle::dynamic_map const& s = cradle::cast<cradle::dynamic_map>(v); from_dynamic(&x->type, get_union_tag(s)); switch (x->type) { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT:  { nil_t tmp; from_dynamic(&tmp, get_field(s, "registration_acknowledgement")); x->contents_ = tmp; break;  } case server_message_content_tag::TEST:  { cradle::websocket_test_response tmp; from_dynamic(&tmp, get_field(s, "test")); x->contents_ = tmp; break;  } case server_message_content_tag::CACHE_RESPONSE:  { cradle::websocket_cache_response tmp; from_dynamic(&tmp, get_field(s, "cache_response")); x->contents_ = tmp; break;  } case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT:  { nil_t tmp; from_dynamic(&tmp, get_field(s, "cache_insert_acknowledgement")); x->contents_ = tmp; break;  } case server_message_content_tag::ERROR:  { cradle::error_response tmp; from_dynamic(&tmp, get_field(s, "error")); x->contents_ = tmp; break;  } case server_message_content_tag::ISS_OBJECT_RESPONSE:  { cradle::iss_object_response tmp; from_dynamic(&tmp, get_field(s, "iss_object_response")); x->contents_ = tmp; break;  } case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE:  { cradle::resolve_iss_object_response tmp; from_dynamic(&tmp, get_field(s, "resolve_iss_object_response")); x->contents_ = tmp; break;  } case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE:  { cradle::iss_object_metadata_response tmp; from_dynamic(&tmp, get_field(s, "iss_object_metadata_response")); x->contents_ = tmp; break;  } case server_message_content_tag::POST_ISS_OBJECT_RESPONSE:  { cradle::post_iss_object_response tmp; from_dynamic(&tmp, get_field(s, "post_iss_object_response")); x->contents_ = tmp; break;  } case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE:  { cradle::nil_t tmp; from_dynamic(&tmp, get_field(s, "copy_iss_object_response")); x->contents_ = tmp; break;  } case server_message_content_tag::COPY_CALCULATION_RESPONSE:  { cradle::nil_t tmp; from_dynamic(&tmp, get_field(s, "copy_calculation_response")); x->contents_ = tmp; break;  } case server_message_content_tag::POST_CALCULATION_RESPONSE:  { cradle::post_calculation_response tmp; from_dynamic(&tmp, get_field(s, "post_calculation_response")); x->contents_ = tmp; break;  } case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE:  { cradle::resolve_meta_chain_response tmp; from_dynamic(&tmp, get_field(s, "resolve_meta_chain_response")); x->contents_ = tmp; break;  } case server_message_content_tag::CALCULATION_REQUEST_RESPONSE:  { cradle::calculation_request_response tmp; from_dynamic(&tmp, get_field(s, "calculation_request_response")); x->contents_ = tmp; break;  } case server_message_content_tag::CALCULATION_DIFF_RESPONSE:  { cradle::calculation_diff_response tmp; from_dynamic(&tmp, get_field(s, "calculation_diff_response")); x->contents_ = tmp; break;  } case server_message_content_tag::CALCULATION_SEARCH_RESPONSE:  { cradle::calculation_search_response tmp; from_dynamic(&tmp, get_field(s, "calculation_search_response")); x->contents_ = tmp; break;  } case server_message_content_tag::ISS_DIFF_RESPONSE:  { cradle::iss_diff_response tmp; from_dynamic(&tmp, get_field(s, "iss_diff_response")); x->contents_ = tmp; break;  } case server_message_content_tag::LOCAL_CALC_RESULT:  { cradle::dynamic tmp; from_dynamic(&tmp, get_field(s, "local_calc_result")); x->contents_ = tmp; break;  } case server_message_content_tag::RESULTS_API_RESPONSE:  { cradle::results_api_response tmp; from_dynamic(&tmp, get_field(s, "results_api_response")); x->contents_ = tmp; break;  } case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE:  { cradle::local_results_api_response tmp; from_dynamic(&tmp, get_field(s, "local_results_api_response")); x->contents_ = tmp; break;  } case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE:  { nil_t tmp; from_dynamic(&tmp, get_field(s, "introspection_control_response")); x->contents_ = tmp; break;  } case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE:  { cradle::introspection_status_response tmp; from_dynamic(&tmp, get_field(s, "introspection_status_response")); x->contents_ = tmp; break;  } case server_message_content_tag::REQUESTS_META_INFO_RESPONSE:  { cradle::requests_meta_info_response tmp; from_dynamic(&tmp, get_field(s, "requests_meta_info_response")); x->contents_ = tmp; break;  } case server_message_content_tag::RESOLVE_REQUEST_RESPONSE:  { cradle::dynamic tmp; from_dynamic(&tmp, get_field(s, "resolve_request_response")); x->contents_ = tmp; break;  } } } std::ostream& operator<<(std::ostream& s, server_message_content const& x) { return s << to_dynamic(x); } size_t deep_sizeof(server_message_content const& x) { using cradle::deep_sizeof; size_t size = sizeof(x); switch (x.type) { case server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT: size += deep_sizeof(as_registration_acknowledgement(x)); break; case server_message_content_tag::TEST: size += deep_sizeof(as_test(x)); break; case server_message_content_tag::CACHE_RESPONSE: size += deep_sizeof(as_cache_response(x)); break; case server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT: size += deep_sizeof(as_cache_insert_acknowledgement(x)); break; case server_message_content_tag::ERROR: size += deep_sizeof(as_error(x)); break; case server_message_content_tag::ISS_OBJECT_RESPONSE: size += deep_sizeof(as_iss_object_response(x)); break; case server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE: size += deep_sizeof(as_resolve_iss_object_response(x)); break; case server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE: size += deep_sizeof(as_iss_object_metadata_response(x)); break; case server_message_content_tag::POST_ISS_OBJECT_RESPONSE: size += deep_sizeof(as_post_iss_object_response(x)); break; case server_message_content_tag::COPY_ISS_OBJECT_RESPONSE: size += deep_sizeof(as_copy_iss_object_response(x)); break; case server_message_content_tag::COPY_CALCULATION_RESPONSE: size += deep_sizeof(as_copy_calculation_response(x)); break; case server_message_content_tag::POST_CALCULATION_RESPONSE: size += deep_sizeof(as_post_calculation_response(x)); break; case server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE: size += deep_sizeof(as_resolve_meta_chain_response(x)); break; case server_message_content_tag::CALCULATION_REQUEST_RESPONSE: size += deep_sizeof(as_calculation_request_response(x)); break; case server_message_content_tag::CALCULATION_DIFF_RESPONSE: size += deep_sizeof(as_calculation_diff_response(x)); break; case server_message_content_tag::CALCULATION_SEARCH_RESPONSE: size += deep_sizeof(as_calculation_search_response(x)); break; case server_message_content_tag::ISS_DIFF_RESPONSE: size += deep_sizeof(as_iss_diff_response(x)); break; case server_message_content_tag::LOCAL_CALC_RESULT: size += deep_sizeof(as_local_calc_result(x)); break; case server_message_content_tag::RESULTS_API_RESPONSE: size += deep_sizeof(as_results_api_response(x)); break; case server_message_content_tag::LOCAL_RESULTS_API_RESPONSE: size += deep_sizeof(as_local_results_api_response(x)); break; case server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE: size += deep_sizeof(as_introspection_control_response(x)); break; case server_message_content_tag::INTROSPECTION_STATUS_RESPONSE: size += deep_sizeof(as_introspection_status_response(x)); break; case server_message_content_tag::REQUESTS_META_INFO_RESPONSE: size += deep_sizeof(as_requests_meta_info_response(x)); break; case server_message_content_tag::RESOLVE_REQUEST_RESPONSE: size += deep_sizeof(as_resolve_request_response(x)); break; } return size; } 

#line 391 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { void definitive_type_info_query<websocket_server_message>::get(     cradle::api_type_info* info) {     std::map<std::string, cradle::api_structure_field_info> fields;     structure_field_type_info_adder<websocket_server_message>::add(&fields);     *info =         cradle::make_api_type_info_with_structure_type(             cradle::api_structure_info(                 fields)); } void type_info_query<websocket_server_message>::get(     cradle::api_type_info* info) {     *info =         cradle::make_api_type_info_with_named_type(             cradle::api_named_type_reference(                 "dosimetry", "websocket_server_message")); } void structure_field_type_info_adder<websocket_server_message>::add(     std::map<std::string, cradle::api_structure_field_info>* fields) {      (*fields)["request_id"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_server_message>().request_id)>(),             none);    (*fields)["content"] =         cradle::api_structure_field_info(             "",             cradle::get_type_info<decltype(std::declval<websocket_server_message>().content)>(),             none); } bool operator==(websocket_server_message const& a, websocket_server_message const& b) { return a.request_id == b.request_id && a.content == b.content; } bool operator!=(websocket_server_message const& a, websocket_server_message const& b) { return !(a == b); } bool operator<(websocket_server_message const& a, websocket_server_message const& b) { if (a.request_id < b.request_id) return true; if (b.request_id < a.request_id) return false; if (a.content < b.content) return true; if (b.content < a.content) return false;     return false; } void swap(websocket_server_message& a, websocket_server_message& b) {     using std::swap;     swap(a.request_id, b.request_id);     swap(a.content, b.content); } size_t deep_sizeof(websocket_server_message const& x) {     using cradle::deep_sizeof;     return 0 + deep_sizeof(x.request_id) + deep_sizeof(x.content) ; } void write_fields_to_record(cradle::dynamic_map& record, websocket_server_message const& x) { using cradle::write_field_to_record; write_field_to_record(record, "request_id", x.request_id); write_field_to_record(record, "content", x.content); } void to_dynamic(cradle::dynamic* v, websocket_server_message const& x) { cradle::dynamic_map r; write_fields_to_record(r, x); *v = std::move(r); } void read_fields_from_record(websocket_server_message& x, cradle::dynamic_map const& record) { using cradle::read_field_from_record; read_field_from_record(&x.request_id, record, "request_id"); read_field_from_record(&x.content, record, "content"); } void from_dynamic(websocket_server_message* x, cradle::dynamic const& v) { cradle::dynamic_map const& r = cradle::cast<cradle::dynamic_map>(v); read_fields_from_record(*x, r); } std::ostream& operator<<(std::ostream& s, websocket_server_message const& x) { return s << to_dynamic(x); } size_t hash_value(websocket_server_message const& x) { size_t h = 0; boost::hash_combine(h, cradle::invoke_hash(x.request_id)); boost::hash_combine(h, cradle::invoke_hash(x.content));  return h; }} namespace cradle { 

}

namespace cradle {
void add_src_cradle_websocket_messages_api(cradle::api_implementation& api)
{
register_api_named_type(     api,     "websocket_registration_message",     0,     "",     get_definitive_type_info<websocket_registration_message>());register_api_named_type(     api,     "websocket_test_query",     0,     "",     get_definitive_type_info<websocket_test_query>());register_api_named_type(     api,     "websocket_test_response",     0,     "",     get_definitive_type_info<websocket_test_response>());register_api_named_type(     api,     "websocket_cache_insert",     0,     "",     get_definitive_type_info<websocket_cache_insert>());register_api_named_type(     api,     "websocket_cache_response",     0,     "",     get_definitive_type_info<websocket_cache_response>());register_api_named_type(     api,     "output_data_encoding",     0,     "",     get_definitive_type_info<output_data_encoding>());register_api_named_type(     api,     "input_data_encoding",     0,     "",     get_definitive_type_info<input_data_encoding>());register_api_named_type(     api,     "iss_object_request",     0,     "",     get_definitive_type_info<iss_object_request>());register_api_named_type(     api,     "iss_object_response",     0,     "",     get_definitive_type_info<iss_object_response>());register_api_named_type(     api,     "resolve_iss_object_request",     0,     "",     get_definitive_type_info<resolve_iss_object_request>());register_api_named_type(     api,     "resolve_iss_object_response",     0,     "",     get_definitive_type_info<resolve_iss_object_response>());register_api_named_type(     api,     "iss_object_metadata_request",     0,     "",     get_definitive_type_info<iss_object_metadata_request>());register_api_named_type(     api,     "iss_object_metadata_response",     0,     "",     get_definitive_type_info<iss_object_metadata_response>());register_api_named_type(     api,     "post_iss_object_request",     0,     "",     get_definitive_type_info<post_iss_object_request>());register_api_named_type(     api,     "post_iss_object_response",     0,     "",     get_definitive_type_info<post_iss_object_response>());register_api_named_type(     api,     "copy_iss_object_request",     0,     "",     get_definitive_type_info<copy_iss_object_request>());register_api_named_type(     api,     "copy_calculation_request",     0,     "",     get_definitive_type_info<copy_calculation_request>());register_api_named_type(     api,     "post_calculation_request",     0,     "",     get_definitive_type_info<post_calculation_request>());register_api_named_type(     api,     "post_calculation_response",     0,     "",     get_definitive_type_info<post_calculation_response>());register_api_named_type(     api,     "calculation_search_request",     0,     "",     get_definitive_type_info<calculation_search_request>());register_api_named_type(     api,     "calculation_search_response",     0,     "",     get_definitive_type_info<calculation_search_response>());register_api_named_type(     api,     "resolve_meta_chain_request",     0,     "",     get_definitive_type_info<resolve_meta_chain_request>());register_api_named_type(     api,     "resolve_meta_chain_response",     0,     "",     get_definitive_type_info<resolve_meta_chain_response>());register_api_named_type(     api,     "calculation_request_message",     0,     "",     get_definitive_type_info<calculation_request_message>());register_api_named_type(     api,     "calculation_request_response",     0,     "",     get_definitive_type_info<calculation_request_response>());register_api_named_type(     api,     "calculation_diff_request",     0,     "",     get_definitive_type_info<calculation_diff_request>());register_api_named_type(     api,     "object_node_diff",     0,     "",     get_definitive_type_info<object_node_diff>());register_api_named_type(     api,     "iss_diff_request",     0,     "",     get_definitive_type_info<iss_diff_request>());register_api_named_type(     api,     "results_api_query",     0,     "",     get_definitive_type_info<results_api_query>());register_api_named_type(     api,     "results_api_response",     0,     "",     get_definitive_type_info<results_api_response>());register_api_named_type(     api,     "local_results_api_response",     0,     "",     get_definitive_type_info<local_results_api_response>());register_api_named_type(     api,     "introspection_control_request",     0,     "",     get_definitive_type_info<introspection_control_request>());register_api_named_type(     api,     "introspection_status_request",     0,     "",     get_definitive_type_info<introspection_status_request>());register_api_named_type(     api,     "resolve_request_request",     0,     "",     get_definitive_type_info<resolve_request_request>());register_api_named_type(     api,     "client_message_content",     0,     "",     get_definitive_type_info<client_message_content>());register_api_named_type(     api,     "websocket_client_message",     0,     "",     get_definitive_type_info<websocket_client_message>());register_api_named_type(     api,     "http_failure_info",     0,     "",     get_definitive_type_info<http_failure_info>());register_api_named_type(     api,     "error_response",     0,     "",     get_definitive_type_info<error_response>());register_api_named_type(     api,     "tasklet_msg_event",     0,     "",     get_definitive_type_info<tasklet_msg_event>());register_api_named_type(     api,     "tasklet_overview",     0,     "",     get_definitive_type_info<tasklet_overview>());register_api_named_type(     api,     "introspection_status_response",     0,     "",     get_definitive_type_info<introspection_status_response>());register_api_named_type(     api,     "requests_meta_info_response",     0,     "Information on the requests subsystem",     get_definitive_type_info<requests_meta_info_response>());register_api_named_type(     api,     "server_message_content",     0,     "",     get_definitive_type_info<server_message_content>());register_api_named_type(     api,     "websocket_server_message",     0,     "",     get_definitive_type_info<websocket_server_message>());
}

}
