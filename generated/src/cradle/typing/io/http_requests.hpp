// THIS FILE WAS AUTOMATICALLY GENERATED BY THE PREPROCESSOR.
// DO NOT EDIT!

#ifndef THINKNODE_ACCOUNT
#define THINKNODE_ACCOUNT "mgh"
#endif
#ifndef THINKNODE_FUNCTION_APP
#define THINKNODE_FUNCTION_APP "dosimetry"
#endif
#ifndef THINKNODE_TYPES_APP
#define THINKNODE_TYPES_APP "dosimetry"
#endif
#include <cradle/typing/core/preprocessed.h>







#ifdef POST 
    #undef POST 
#endif 

#ifdef GET 
    #undef GET 
#endif 

#ifdef PUT 
    #undef PUT 
#endif 

#ifdef DELETE 
    #undef DELETE 
#endif 

#ifdef PATCH 
    #undef PATCH 
#endif 

#ifdef HEAD 
    #undef HEAD 
#endif 
















#line 1 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
#ifndef CRADLE_TYPING_IO_HTTP_REQUESTS_HPP
#define CRADLE_TYPING_IO_HTTP_REQUESTS_HPP

#line 4 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
#include <cradle/inner/io/http_requests.h>
#include <cradle/typing/core/type_definitions.h>

#line 7 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
namespace cradle {


#ifdef POST 
    #undef POST 
#endif 

#ifdef GET 
    #undef GET 
#endif 

#ifdef PUT 
    #undef PUT 
#endif 

#ifdef DELETE 
    #undef DELETE 
#endif 

#ifdef PATCH 
    #undef PATCH 
#endif 

#ifdef HEAD 
    #undef HEAD 
#endif 
#line 9 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
enum class prep_http_request_method { POST,GET,PUT,DELETE,PATCH,HEAD }; template<> struct definitive_type_info_query<prep_http_request_method> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<prep_http_request_method> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<prep_http_request_method> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(prep_http_request_method) { return sizeof(prep_http_request_method); } inline size_t hash_value(prep_http_request_method const& x) {     return size_t(x); }static inline unsigned get_value_count(prep_http_request_method) { return 6; } char const* get_value_id(prep_http_request_method value); void to_dynamic(     cradle::dynamic* v,     prep_http_request_method x); void from_dynamic(     prep_http_request_method* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      prep_http_request_method const& x); 

#line 22 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
} namespace cradle { struct prep_http_request { prep_http_request_method method;  string url;  http_header_list headers;  blob body;  optional<string > socket;  prep_http_request() {} prep_http_request(prep_http_request_method const& method, string const& url, http_header_list const& headers, blob const& body, optional<string > const& socket) : method(method), url(url), headers(headers), body(body), socket(socket) {} };  inline prep_http_request make_prep_http_request(  prep_http_request_method method, string url, http_header_list headers, blob body, optional<string > socket ) { return prep_http_request(  std::move(method), std::move(url), std::move(headers), std::move(body), std::move(socket) ); }template<> struct definitive_type_info_query<prep_http_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<prep_http_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<prep_http_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(prep_http_request const& a, prep_http_request const& b); bool operator!=(prep_http_request const& a, prep_http_request const& b); bool operator<(prep_http_request const& a, prep_http_request const& b); void swap(prep_http_request& a, prep_http_request& b); size_t deep_sizeof(prep_http_request const& x); void write_fields_to_record(cradle::dynamic_map& record, prep_http_request const& x); void to_dynamic(cradle::dynamic* v, prep_http_request const& x); void read_fields_from_record(prep_http_request& x, cradle::dynamic_map const& record); void from_dynamic(prep_http_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, prep_http_request const& x);std::ostream& operator<<(std::ostream& s, prep_http_request const& x);size_t hash_value(prep_http_request const& x);} namespace cradle { 

#line 33 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
prep_http_request
make_prep_http_request(http_request const& orig);

#line 36 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
} namespace cradle { struct prep_http_response { int status_code;  http_header_list headers;  blob body;  prep_http_response() {} prep_http_response(int const& status_code, http_header_list const& headers, blob const& body) : status_code(status_code), headers(headers), body(body) {} };  inline prep_http_response make_prep_http_response(  int status_code, http_header_list headers, blob body ) { return prep_http_response(  std::move(status_code), std::move(headers), std::move(body) ); }template<> struct definitive_type_info_query<prep_http_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<prep_http_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<prep_http_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(prep_http_response const& a, prep_http_response const& b); bool operator!=(prep_http_response const& a, prep_http_response const& b); bool operator<(prep_http_response const& a, prep_http_response const& b); void swap(prep_http_response& a, prep_http_response& b); size_t deep_sizeof(prep_http_response const& x); void write_fields_to_record(cradle::dynamic_map& record, prep_http_response const& x); void to_dynamic(cradle::dynamic* v, prep_http_response const& x); void read_fields_from_record(prep_http_response& x, cradle::dynamic_map const& record); void from_dynamic(prep_http_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, prep_http_response const& x);std::ostream& operator<<(std::ostream& s, prep_http_response const& x);size_t hash_value(prep_http_response const& x);} namespace cradle { 

#line 45 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
prep_http_response
make_prep_http_response(http_response const& orig);

#line 48 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
// Parse a http_response as a JSON value.
dynamic
parse_json_response(http_response const& response);

#line 52 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
// Parse a http_response as a MessagePack value.
dynamic
parse_msgpack_response(http_response const& response);

#line 56 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
} // namespace cradle

#line 58 "/home/runner/work/cradle/cradle/src/cradle/typing/io/http_requests.hpp"
#endif
