// THIS FILE WAS AUTOMATICALLY GENERATED BY THE PREPROCESSOR.
// DO NOT EDIT!

#ifndef THINKNODE_ACCOUNT
#define THINKNODE_ACCOUNT "mgh"
#endif
#ifndef THINKNODE_FUNCTION_APP
#define THINKNODE_FUNCTION_APP "dosimetry"
#endif
#ifndef THINKNODE_TYPES_APP
#define THINKNODE_TYPES_APP "dosimetry"
#endif
#include <cradle/typing/core/preprocessed.h>

















#ifdef YAML 
    #undef YAML 
#endif 

#ifdef DIAGNOSTIC_YAML 
    #undef DIAGNOSTIC_YAML 
#endif 

#ifdef MSGPACK 
    #undef MSGPACK 
#endif 

#ifdef JSON 
    #undef JSON 
#endif 



#ifdef YAML 
    #undef YAML 
#endif 

#ifdef MSGPACK 
    #undef MSGPACK 
#endif 

#ifdef JSON 
    #undef JSON 
#endif 

























































#ifdef ENABLED 
    #undef ENABLED 
#endif 

#ifdef CLEAR_ADMIN 
    #undef CLEAR_ADMIN 
#endif 







#ifdef KILL 
    #undef KILL 
#endif 

#ifdef REGISTRATION 
    #undef REGISTRATION 
#endif 

#ifdef TEST 
    #undef TEST 
#endif 

#ifdef CACHE_INSERT 
    #undef CACHE_INSERT 
#endif 

#ifdef CACHE_QUERY 
    #undef CACHE_QUERY 
#endif 

#ifdef ISS_OBJECT 
    #undef ISS_OBJECT 
#endif 

#ifdef RESOLVE_ISS_OBJECT 
    #undef RESOLVE_ISS_OBJECT 
#endif 

#ifdef ISS_OBJECT_METADATA 
    #undef ISS_OBJECT_METADATA 
#endif 

#ifdef POST_ISS_OBJECT 
    #undef POST_ISS_OBJECT 
#endif 

#ifdef COPY_ISS_OBJECT 
    #undef COPY_ISS_OBJECT 
#endif 

#ifdef COPY_CALCULATION 
    #undef COPY_CALCULATION 
#endif 

#ifdef POST_CALCULATION 
    #undef POST_CALCULATION 
#endif 

#ifdef RESOLVE_META_CHAIN 
    #undef RESOLVE_META_CHAIN 
#endif 

#ifdef CALCULATION_REQUEST 
    #undef CALCULATION_REQUEST 
#endif 

#ifdef CALCULATION_DIFF 
    #undef CALCULATION_DIFF 
#endif 

#ifdef CALCULATION_SEARCH 
    #undef CALCULATION_SEARCH 
#endif 

#ifdef ISS_DIFF 
    #undef ISS_DIFF 
#endif 

#ifdef PERFORM_LOCAL_CALC 
    #undef PERFORM_LOCAL_CALC 
#endif 

#ifdef RESULTS_API_QUERY 
    #undef RESULTS_API_QUERY 
#endif 

#ifdef LOCAL_RESULTS_API_QUERY 
    #undef LOCAL_RESULTS_API_QUERY 
#endif 

#ifdef INTROSPECTION_CONTROL 
    #undef INTROSPECTION_CONTROL 
#endif 

#ifdef INTROSPECTION_STATUS_QUERY 
    #undef INTROSPECTION_STATUS_QUERY 
#endif 

#ifdef RESOLVE_REQUEST 
    #undef RESOLVE_REQUEST 
#endif 







#ifdef BAD_STATUS_CODE 
    #undef BAD_STATUS_CODE 
#endif 

#ifdef UNREGISTERED_CLIENT 
    #undef UNREGISTERED_CLIENT 
#endif 

#ifdef UNKNOWN 
    #undef UNKNOWN 
#endif 









#ifdef REGISTRATION_ACKNOWLEDGEMENT 
    #undef REGISTRATION_ACKNOWLEDGEMENT 
#endif 

#ifdef TEST 
    #undef TEST 
#endif 

#ifdef CACHE_RESPONSE 
    #undef CACHE_RESPONSE 
#endif 

#ifdef CACHE_INSERT_ACKNOWLEDGEMENT 
    #undef CACHE_INSERT_ACKNOWLEDGEMENT 
#endif 

#ifdef ERROR 
    #undef ERROR 
#endif 

#ifdef ISS_OBJECT_RESPONSE 
    #undef ISS_OBJECT_RESPONSE 
#endif 

#ifdef RESOLVE_ISS_OBJECT_RESPONSE 
    #undef RESOLVE_ISS_OBJECT_RESPONSE 
#endif 

#ifdef ISS_OBJECT_METADATA_RESPONSE 
    #undef ISS_OBJECT_METADATA_RESPONSE 
#endif 

#ifdef POST_ISS_OBJECT_RESPONSE 
    #undef POST_ISS_OBJECT_RESPONSE 
#endif 

#ifdef COPY_ISS_OBJECT_RESPONSE 
    #undef COPY_ISS_OBJECT_RESPONSE 
#endif 

#ifdef COPY_CALCULATION_RESPONSE 
    #undef COPY_CALCULATION_RESPONSE 
#endif 

#ifdef POST_CALCULATION_RESPONSE 
    #undef POST_CALCULATION_RESPONSE 
#endif 

#ifdef RESOLVE_META_CHAIN_RESPONSE 
    #undef RESOLVE_META_CHAIN_RESPONSE 
#endif 

#ifdef CALCULATION_REQUEST_RESPONSE 
    #undef CALCULATION_REQUEST_RESPONSE 
#endif 

#ifdef CALCULATION_DIFF_RESPONSE 
    #undef CALCULATION_DIFF_RESPONSE 
#endif 

#ifdef CALCULATION_SEARCH_RESPONSE 
    #undef CALCULATION_SEARCH_RESPONSE 
#endif 

#ifdef ISS_DIFF_RESPONSE 
    #undef ISS_DIFF_RESPONSE 
#endif 

#ifdef LOCAL_CALC_RESULT 
    #undef LOCAL_CALC_RESULT 
#endif 

#ifdef RESULTS_API_RESPONSE 
    #undef RESULTS_API_RESPONSE 
#endif 

#ifdef LOCAL_RESULTS_API_RESPONSE 
    #undef LOCAL_RESULTS_API_RESPONSE 
#endif 

#ifdef INTROSPECTION_CONTROL_RESPONSE 
    #undef INTROSPECTION_CONTROL_RESPONSE 
#endif 

#ifdef INTROSPECTION_STATUS_RESPONSE 
    #undef INTROSPECTION_STATUS_RESPONSE 
#endif 

#ifdef RESOLVE_REQUEST_RESPONSE 
    #undef RESOLVE_REQUEST_RESPONSE 
#endif 






#line 1 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
#ifndef CRADLE_WEBSOCKET_MESSAGES_HPP
#define CRADLE_WEBSOCKET_MESSAGES_HPP

#line 4 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
#include <cradle/thinknode/types.hpp>
#include <cradle/typing/io/http_requests.hpp>
#include <cradle/typing/utilities/diff.hpp>
#include <cradle/websocket/types.hpp>

#line 9 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
namespace cradle {

#line 11 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_registration_message { std::string name;  cradle::thinknode_session session;  websocket_registration_message() {} websocket_registration_message(std::string const& name, cradle::thinknode_session const& session) : name(name), session(session) {} };  inline websocket_registration_message make_websocket_registration_message(  std::string name, cradle::thinknode_session session ) { return websocket_registration_message(  std::move(name), std::move(session) ); }template<> struct definitive_type_info_query<websocket_registration_message> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_registration_message> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_registration_message> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_registration_message const& a, websocket_registration_message const& b); bool operator!=(websocket_registration_message const& a, websocket_registration_message const& b); bool operator<(websocket_registration_message const& a, websocket_registration_message const& b); void swap(websocket_registration_message& a, websocket_registration_message& b); size_t deep_sizeof(websocket_registration_message const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_registration_message const& x); void to_dynamic(cradle::dynamic* v, websocket_registration_message const& x); void read_fields_from_record(websocket_registration_message& x, cradle::dynamic_map const& record); void from_dynamic(websocket_registration_message* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_registration_message const& x);std::ostream& operator<<(std::ostream& s, websocket_registration_message const& x);size_t hash_value(websocket_registration_message const& x);} namespace cradle { 

#line 18 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_test_query { std::string message;  websocket_test_query() {} explicit websocket_test_query(std::string const& message) : message(message) {} };  inline websocket_test_query make_websocket_test_query(  std::string message ) { return websocket_test_query(  std::move(message) ); }template<> struct definitive_type_info_query<websocket_test_query> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_test_query> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_test_query> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_test_query const& a, websocket_test_query const& b); bool operator!=(websocket_test_query const& a, websocket_test_query const& b); bool operator<(websocket_test_query const& a, websocket_test_query const& b); void swap(websocket_test_query& a, websocket_test_query& b); size_t deep_sizeof(websocket_test_query const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_test_query const& x); void to_dynamic(cradle::dynamic* v, websocket_test_query const& x); void read_fields_from_record(websocket_test_query& x, cradle::dynamic_map const& record); void from_dynamic(websocket_test_query* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_test_query const& x);std::ostream& operator<<(std::ostream& s, websocket_test_query const& x);size_t hash_value(websocket_test_query const& x);} namespace cradle { 

#line 24 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_test_response { std::string name;  std::string message;  websocket_test_response() {} websocket_test_response(std::string const& name, std::string const& message) : name(name), message(message) {} };  inline websocket_test_response make_websocket_test_response(  std::string name, std::string message ) { return websocket_test_response(  std::move(name), std::move(message) ); }template<> struct definitive_type_info_query<websocket_test_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_test_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_test_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_test_response const& a, websocket_test_response const& b); bool operator!=(websocket_test_response const& a, websocket_test_response const& b); bool operator<(websocket_test_response const& a, websocket_test_response const& b); void swap(websocket_test_response& a, websocket_test_response& b); size_t deep_sizeof(websocket_test_response const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_test_response const& x); void to_dynamic(cradle::dynamic* v, websocket_test_response const& x); void read_fields_from_record(websocket_test_response& x, cradle::dynamic_map const& record); void from_dynamic(websocket_test_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_test_response const& x);std::ostream& operator<<(std::ostream& s, websocket_test_response const& x);size_t hash_value(websocket_test_response const& x);} namespace cradle { 

#line 31 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_cache_insert { std::string key;  std::string value;  websocket_cache_insert() {} websocket_cache_insert(std::string const& key, std::string const& value) : key(key), value(value) {} };  inline websocket_cache_insert make_websocket_cache_insert(  std::string key, std::string value ) { return websocket_cache_insert(  std::move(key), std::move(value) ); }template<> struct definitive_type_info_query<websocket_cache_insert> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_cache_insert> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_cache_insert> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_cache_insert const& a, websocket_cache_insert const& b); bool operator!=(websocket_cache_insert const& a, websocket_cache_insert const& b); bool operator<(websocket_cache_insert const& a, websocket_cache_insert const& b); void swap(websocket_cache_insert& a, websocket_cache_insert& b); size_t deep_sizeof(websocket_cache_insert const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_cache_insert const& x); void to_dynamic(cradle::dynamic* v, websocket_cache_insert const& x); void read_fields_from_record(websocket_cache_insert& x, cradle::dynamic_map const& record); void from_dynamic(websocket_cache_insert* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_cache_insert const& x);std::ostream& operator<<(std::ostream& s, websocket_cache_insert const& x);size_t hash_value(websocket_cache_insert const& x);} namespace cradle { 

#line 38 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_cache_response { std::string key;  optional<std::string > value;  websocket_cache_response() {} websocket_cache_response(std::string const& key, optional<std::string > const& value) : key(key), value(value) {} };  inline websocket_cache_response make_websocket_cache_response(  std::string key, optional<std::string > value ) { return websocket_cache_response(  std::move(key), std::move(value) ); }template<> struct definitive_type_info_query<websocket_cache_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_cache_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_cache_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_cache_response const& a, websocket_cache_response const& b); bool operator!=(websocket_cache_response const& a, websocket_cache_response const& b); bool operator<(websocket_cache_response const& a, websocket_cache_response const& b); void swap(websocket_cache_response& a, websocket_cache_response& b); size_t deep_sizeof(websocket_cache_response const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_cache_response const& x); void to_dynamic(cradle::dynamic* v, websocket_cache_response const& x); void read_fields_from_record(websocket_cache_response& x, cradle::dynamic_map const& record); void from_dynamic(websocket_cache_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_cache_response const& x);std::ostream& operator<<(std::ostream& s, websocket_cache_response const& x);size_t hash_value(websocket_cache_response const& x);} namespace cradle { 


#ifdef YAML 
    #undef YAML 
#endif 

#ifdef DIAGNOSTIC_YAML 
    #undef DIAGNOSTIC_YAML 
#endif 

#ifdef MSGPACK 
    #undef MSGPACK 
#endif 

#ifdef JSON 
    #undef JSON 
#endif 
#line 45 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
enum class output_data_encoding { YAML,DIAGNOSTIC_YAML,MSGPACK,JSON }; template<> struct definitive_type_info_query<output_data_encoding> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<output_data_encoding> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<output_data_encoding> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(output_data_encoding) { return sizeof(output_data_encoding); } inline size_t hash_value(output_data_encoding const& x) {     return size_t(x); }static inline unsigned get_value_count(output_data_encoding) { return 4; } char const* get_value_id(output_data_encoding value); void to_dynamic(     cradle::dynamic* v,     output_data_encoding x); void from_dynamic(     output_data_encoding* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      output_data_encoding const& x); 


#ifdef YAML 
    #undef YAML 
#endif 

#ifdef MSGPACK 
    #undef MSGPACK 
#endif 

#ifdef JSON 
    #undef JSON 
#endif 
#line 59 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
enum class input_data_encoding { YAML,MSGPACK,JSON }; template<> struct definitive_type_info_query<input_data_encoding> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<input_data_encoding> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<input_data_encoding> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(input_data_encoding) { return sizeof(input_data_encoding); } inline size_t hash_value(input_data_encoding const& x) {     return size_t(x); }static inline unsigned get_value_count(input_data_encoding) { return 3; } char const* get_value_id(input_data_encoding value); void to_dynamic(     cradle::dynamic* v,     input_data_encoding x); void from_dynamic(     input_data_encoding* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      input_data_encoding const& x); 

#line 70 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct iss_object_request { std::string context_id;  std::string object_id;  bool ignore_upgrades;  cradle::output_data_encoding encoding;  iss_object_request() {} iss_object_request(std::string const& context_id, std::string const& object_id, bool const& ignore_upgrades, cradle::output_data_encoding const& encoding) : context_id(context_id), object_id(object_id), ignore_upgrades(ignore_upgrades), encoding(encoding) {} };  inline iss_object_request make_iss_object_request(  std::string context_id, std::string object_id, bool ignore_upgrades, cradle::output_data_encoding encoding ) { return iss_object_request(  std::move(context_id), std::move(object_id), std::move(ignore_upgrades), std::move(encoding) ); }template<> struct definitive_type_info_query<iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<iss_object_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(iss_object_request const& a, iss_object_request const& b); bool operator!=(iss_object_request const& a, iss_object_request const& b); bool operator<(iss_object_request const& a, iss_object_request const& b); void swap(iss_object_request& a, iss_object_request& b); size_t deep_sizeof(iss_object_request const& x); void write_fields_to_record(cradle::dynamic_map& record, iss_object_request const& x); void to_dynamic(cradle::dynamic* v, iss_object_request const& x); void read_fields_from_record(iss_object_request& x, cradle::dynamic_map const& record); void from_dynamic(iss_object_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, iss_object_request const& x);std::ostream& operator<<(std::ostream& s, iss_object_request const& x);size_t hash_value(iss_object_request const& x);} namespace cradle { 

#line 79 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct iss_object_response { cradle::blob object;  iss_object_response() {} explicit iss_object_response(cradle::blob const& object) : object(object) {} };  inline iss_object_response make_iss_object_response(  cradle::blob object ) { return iss_object_response(  std::move(object) ); }template<> struct definitive_type_info_query<iss_object_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<iss_object_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<iss_object_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(iss_object_response const& a, iss_object_response const& b); bool operator!=(iss_object_response const& a, iss_object_response const& b); bool operator<(iss_object_response const& a, iss_object_response const& b); void swap(iss_object_response& a, iss_object_response& b); size_t deep_sizeof(iss_object_response const& x); void write_fields_to_record(cradle::dynamic_map& record, iss_object_response const& x); void to_dynamic(cradle::dynamic* v, iss_object_response const& x); void read_fields_from_record(iss_object_response& x, cradle::dynamic_map const& record); void from_dynamic(iss_object_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, iss_object_response const& x);std::ostream& operator<<(std::ostream& s, iss_object_response const& x);size_t hash_value(iss_object_response const& x);} namespace cradle { 

#line 85 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct resolve_iss_object_request { std::string context_id;  std::string object_id;  bool ignore_upgrades;  resolve_iss_object_request() {} resolve_iss_object_request(std::string const& context_id, std::string const& object_id, bool const& ignore_upgrades) : context_id(context_id), object_id(object_id), ignore_upgrades(ignore_upgrades) {} };  inline resolve_iss_object_request make_resolve_iss_object_request(  std::string context_id, std::string object_id, bool ignore_upgrades ) { return resolve_iss_object_request(  std::move(context_id), std::move(object_id), std::move(ignore_upgrades) ); }template<> struct definitive_type_info_query<resolve_iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<resolve_iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<resolve_iss_object_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(resolve_iss_object_request const& a, resolve_iss_object_request const& b); bool operator!=(resolve_iss_object_request const& a, resolve_iss_object_request const& b); bool operator<(resolve_iss_object_request const& a, resolve_iss_object_request const& b); void swap(resolve_iss_object_request& a, resolve_iss_object_request& b); size_t deep_sizeof(resolve_iss_object_request const& x); void write_fields_to_record(cradle::dynamic_map& record, resolve_iss_object_request const& x); void to_dynamic(cradle::dynamic* v, resolve_iss_object_request const& x); void read_fields_from_record(resolve_iss_object_request& x, cradle::dynamic_map const& record); void from_dynamic(resolve_iss_object_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, resolve_iss_object_request const& x);std::ostream& operator<<(std::ostream& s, resolve_iss_object_request const& x);size_t hash_value(resolve_iss_object_request const& x);} namespace cradle { 

#line 93 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct resolve_iss_object_response { std::string immutable_id;  resolve_iss_object_response() {} explicit resolve_iss_object_response(std::string const& immutable_id) : immutable_id(immutable_id) {} };  inline resolve_iss_object_response make_resolve_iss_object_response(  std::string immutable_id ) { return resolve_iss_object_response(  std::move(immutable_id) ); }template<> struct definitive_type_info_query<resolve_iss_object_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<resolve_iss_object_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<resolve_iss_object_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(resolve_iss_object_response const& a, resolve_iss_object_response const& b); bool operator!=(resolve_iss_object_response const& a, resolve_iss_object_response const& b); bool operator<(resolve_iss_object_response const& a, resolve_iss_object_response const& b); void swap(resolve_iss_object_response& a, resolve_iss_object_response& b); size_t deep_sizeof(resolve_iss_object_response const& x); void write_fields_to_record(cradle::dynamic_map& record, resolve_iss_object_response const& x); void to_dynamic(cradle::dynamic* v, resolve_iss_object_response const& x); void read_fields_from_record(resolve_iss_object_response& x, cradle::dynamic_map const& record); void from_dynamic(resolve_iss_object_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, resolve_iss_object_response const& x);std::ostream& operator<<(std::ostream& s, resolve_iss_object_response const& x);size_t hash_value(resolve_iss_object_response const& x);} namespace cradle { 

#line 99 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct iss_object_metadata_request { std::string context_id;  std::string object_id;  iss_object_metadata_request() {} iss_object_metadata_request(std::string const& context_id, std::string const& object_id) : context_id(context_id), object_id(object_id) {} };  inline iss_object_metadata_request make_iss_object_metadata_request(  std::string context_id, std::string object_id ) { return iss_object_metadata_request(  std::move(context_id), std::move(object_id) ); }template<> struct definitive_type_info_query<iss_object_metadata_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<iss_object_metadata_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<iss_object_metadata_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(iss_object_metadata_request const& a, iss_object_metadata_request const& b); bool operator!=(iss_object_metadata_request const& a, iss_object_metadata_request const& b); bool operator<(iss_object_metadata_request const& a, iss_object_metadata_request const& b); void swap(iss_object_metadata_request& a, iss_object_metadata_request& b); size_t deep_sizeof(iss_object_metadata_request const& x); void write_fields_to_record(cradle::dynamic_map& record, iss_object_metadata_request const& x); void to_dynamic(cradle::dynamic* v, iss_object_metadata_request const& x); void read_fields_from_record(iss_object_metadata_request& x, cradle::dynamic_map const& record); void from_dynamic(iss_object_metadata_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, iss_object_metadata_request const& x);std::ostream& operator<<(std::ostream& s, iss_object_metadata_request const& x);size_t hash_value(iss_object_metadata_request const& x);} namespace cradle { 

#line 106 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct iss_object_metadata_response { std::map<std::string,std::string > metadata;  iss_object_metadata_response() {} explicit iss_object_metadata_response(std::map<std::string,std::string > const& metadata) : metadata(metadata) {} };  inline iss_object_metadata_response make_iss_object_metadata_response(  std::map<std::string,std::string > metadata ) { return iss_object_metadata_response(  std::move(metadata) ); }template<> struct definitive_type_info_query<iss_object_metadata_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<iss_object_metadata_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<iss_object_metadata_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(iss_object_metadata_response const& a, iss_object_metadata_response const& b); bool operator!=(iss_object_metadata_response const& a, iss_object_metadata_response const& b); bool operator<(iss_object_metadata_response const& a, iss_object_metadata_response const& b); void swap(iss_object_metadata_response& a, iss_object_metadata_response& b); size_t deep_sizeof(iss_object_metadata_response const& x); void write_fields_to_record(cradle::dynamic_map& record, iss_object_metadata_response const& x); void to_dynamic(cradle::dynamic* v, iss_object_metadata_response const& x); void read_fields_from_record(iss_object_metadata_response& x, cradle::dynamic_map const& record); void from_dynamic(iss_object_metadata_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, iss_object_metadata_response const& x);std::ostream& operator<<(std::ostream& s, iss_object_metadata_response const& x);size_t hash_value(iss_object_metadata_response const& x);} namespace cradle { 

#line 112 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct post_iss_object_request { std::string context_id;  std::string schema;  cradle::input_data_encoding encoding;  cradle::blob object;  post_iss_object_request() {} post_iss_object_request(std::string const& context_id, std::string const& schema, cradle::input_data_encoding const& encoding, cradle::blob const& object) : context_id(context_id), schema(schema), encoding(encoding), object(object) {} };  inline post_iss_object_request make_post_iss_object_request(  std::string context_id, std::string schema, cradle::input_data_encoding encoding, cradle::blob object ) { return post_iss_object_request(  std::move(context_id), std::move(schema), std::move(encoding), std::move(object) ); }template<> struct definitive_type_info_query<post_iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<post_iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<post_iss_object_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(post_iss_object_request const& a, post_iss_object_request const& b); bool operator!=(post_iss_object_request const& a, post_iss_object_request const& b); bool operator<(post_iss_object_request const& a, post_iss_object_request const& b); void swap(post_iss_object_request& a, post_iss_object_request& b); size_t deep_sizeof(post_iss_object_request const& x); void write_fields_to_record(cradle::dynamic_map& record, post_iss_object_request const& x); void to_dynamic(cradle::dynamic* v, post_iss_object_request const& x); void read_fields_from_record(post_iss_object_request& x, cradle::dynamic_map const& record); void from_dynamic(post_iss_object_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, post_iss_object_request const& x);std::ostream& operator<<(std::ostream& s, post_iss_object_request const& x);size_t hash_value(post_iss_object_request const& x);} namespace cradle { 

#line 121 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct post_iss_object_response { std::string object_id;  post_iss_object_response() {} explicit post_iss_object_response(std::string const& object_id) : object_id(object_id) {} };  inline post_iss_object_response make_post_iss_object_response(  std::string object_id ) { return post_iss_object_response(  std::move(object_id) ); }template<> struct definitive_type_info_query<post_iss_object_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<post_iss_object_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<post_iss_object_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(post_iss_object_response const& a, post_iss_object_response const& b); bool operator!=(post_iss_object_response const& a, post_iss_object_response const& b); bool operator<(post_iss_object_response const& a, post_iss_object_response const& b); void swap(post_iss_object_response& a, post_iss_object_response& b); size_t deep_sizeof(post_iss_object_response const& x); void write_fields_to_record(cradle::dynamic_map& record, post_iss_object_response const& x); void to_dynamic(cradle::dynamic* v, post_iss_object_response const& x); void read_fields_from_record(post_iss_object_response& x, cradle::dynamic_map const& record); void from_dynamic(post_iss_object_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, post_iss_object_response const& x);std::ostream& operator<<(std::ostream& s, post_iss_object_response const& x);size_t hash_value(post_iss_object_response const& x);} namespace cradle { 

#line 127 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct copy_iss_object_request { std::string source_context_id;  std::string destination_context_id;  std::string object_id;  copy_iss_object_request() {} copy_iss_object_request(std::string const& source_context_id, std::string const& destination_context_id, std::string const& object_id) : source_context_id(source_context_id), destination_context_id(destination_context_id), object_id(object_id) {} };  inline copy_iss_object_request make_copy_iss_object_request(  std::string source_context_id, std::string destination_context_id, std::string object_id ) { return copy_iss_object_request(  std::move(source_context_id), std::move(destination_context_id), std::move(object_id) ); }template<> struct definitive_type_info_query<copy_iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<copy_iss_object_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<copy_iss_object_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(copy_iss_object_request const& a, copy_iss_object_request const& b); bool operator!=(copy_iss_object_request const& a, copy_iss_object_request const& b); bool operator<(copy_iss_object_request const& a, copy_iss_object_request const& b); void swap(copy_iss_object_request& a, copy_iss_object_request& b); size_t deep_sizeof(copy_iss_object_request const& x); void write_fields_to_record(cradle::dynamic_map& record, copy_iss_object_request const& x); void to_dynamic(cradle::dynamic* v, copy_iss_object_request const& x); void read_fields_from_record(copy_iss_object_request& x, cradle::dynamic_map const& record); void from_dynamic(copy_iss_object_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, copy_iss_object_request const& x);std::ostream& operator<<(std::ostream& s, copy_iss_object_request const& x);size_t hash_value(copy_iss_object_request const& x);} namespace cradle { 

#line 135 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct copy_calculation_request { std::string source_context_id;  std::string destination_context_id;  std::string calculation_id;  copy_calculation_request() {} copy_calculation_request(std::string const& source_context_id, std::string const& destination_context_id, std::string const& calculation_id) : source_context_id(source_context_id), destination_context_id(destination_context_id), calculation_id(calculation_id) {} };  inline copy_calculation_request make_copy_calculation_request(  std::string source_context_id, std::string destination_context_id, std::string calculation_id ) { return copy_calculation_request(  std::move(source_context_id), std::move(destination_context_id), std::move(calculation_id) ); }template<> struct definitive_type_info_query<copy_calculation_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<copy_calculation_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<copy_calculation_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(copy_calculation_request const& a, copy_calculation_request const& b); bool operator!=(copy_calculation_request const& a, copy_calculation_request const& b); bool operator<(copy_calculation_request const& a, copy_calculation_request const& b); void swap(copy_calculation_request& a, copy_calculation_request& b); size_t deep_sizeof(copy_calculation_request const& x); void write_fields_to_record(cradle::dynamic_map& record, copy_calculation_request const& x); void to_dynamic(cradle::dynamic* v, copy_calculation_request const& x); void read_fields_from_record(copy_calculation_request& x, cradle::dynamic_map const& record); void from_dynamic(copy_calculation_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, copy_calculation_request const& x);std::ostream& operator<<(std::ostream& s, copy_calculation_request const& x);size_t hash_value(copy_calculation_request const& x);} namespace cradle { 

#line 143 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct post_calculation_request { std::string context_id;  cradle::calculation_request calculation;  post_calculation_request() {} post_calculation_request(std::string const& context_id, cradle::calculation_request const& calculation) : context_id(context_id), calculation(calculation) {} };  inline post_calculation_request make_post_calculation_request(  std::string context_id, cradle::calculation_request calculation ) { return post_calculation_request(  std::move(context_id), std::move(calculation) ); }template<> struct definitive_type_info_query<post_calculation_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<post_calculation_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<post_calculation_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(post_calculation_request const& a, post_calculation_request const& b); bool operator!=(post_calculation_request const& a, post_calculation_request const& b); bool operator<(post_calculation_request const& a, post_calculation_request const& b); void swap(post_calculation_request& a, post_calculation_request& b); size_t deep_sizeof(post_calculation_request const& x); void write_fields_to_record(cradle::dynamic_map& record, post_calculation_request const& x); void to_dynamic(cradle::dynamic* v, post_calculation_request const& x); void read_fields_from_record(post_calculation_request& x, cradle::dynamic_map const& record); void from_dynamic(post_calculation_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, post_calculation_request const& x);std::ostream& operator<<(std::ostream& s, post_calculation_request const& x);size_t hash_value(post_calculation_request const& x);} namespace cradle { 

#line 150 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct post_calculation_response { std::string calculation_id;  post_calculation_response() {} explicit post_calculation_response(std::string const& calculation_id) : calculation_id(calculation_id) {} };  inline post_calculation_response make_post_calculation_response(  std::string calculation_id ) { return post_calculation_response(  std::move(calculation_id) ); }template<> struct definitive_type_info_query<post_calculation_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<post_calculation_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<post_calculation_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(post_calculation_response const& a, post_calculation_response const& b); bool operator!=(post_calculation_response const& a, post_calculation_response const& b); bool operator<(post_calculation_response const& a, post_calculation_response const& b); void swap(post_calculation_response& a, post_calculation_response& b); size_t deep_sizeof(post_calculation_response const& x); void write_fields_to_record(cradle::dynamic_map& record, post_calculation_response const& x); void to_dynamic(cradle::dynamic* v, post_calculation_response const& x); void read_fields_from_record(post_calculation_response& x, cradle::dynamic_map const& record); void from_dynamic(post_calculation_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, post_calculation_response const& x);std::ostream& operator<<(std::ostream& s, post_calculation_response const& x);size_t hash_value(post_calculation_response const& x);} namespace cradle { 

#line 156 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct calculation_search_request { std::string context_id;  std::string calculation_id;  std::string search_string;  calculation_search_request() {} calculation_search_request(std::string const& context_id, std::string const& calculation_id, std::string const& search_string) : context_id(context_id), calculation_id(calculation_id), search_string(search_string) {} };  inline calculation_search_request make_calculation_search_request(  std::string context_id, std::string calculation_id, std::string search_string ) { return calculation_search_request(  std::move(context_id), std::move(calculation_id), std::move(search_string) ); }template<> struct definitive_type_info_query<calculation_search_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<calculation_search_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<calculation_search_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(calculation_search_request const& a, calculation_search_request const& b); bool operator!=(calculation_search_request const& a, calculation_search_request const& b); bool operator<(calculation_search_request const& a, calculation_search_request const& b); void swap(calculation_search_request& a, calculation_search_request& b); size_t deep_sizeof(calculation_search_request const& x); void write_fields_to_record(cradle::dynamic_map& record, calculation_search_request const& x); void to_dynamic(cradle::dynamic* v, calculation_search_request const& x); void read_fields_from_record(calculation_search_request& x, cradle::dynamic_map const& record); void from_dynamic(calculation_search_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, calculation_search_request const& x);std::ostream& operator<<(std::ostream& s, calculation_search_request const& x);size_t hash_value(calculation_search_request const& x);} namespace cradle { 

#line 164 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct calculation_search_response { std::vector<std::string > matches;  calculation_search_response() {} explicit calculation_search_response(std::vector<std::string > const& matches) : matches(matches) {} };  inline calculation_search_response make_calculation_search_response(  std::vector<std::string > matches ) { return calculation_search_response(  std::move(matches) ); }template<> struct definitive_type_info_query<calculation_search_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<calculation_search_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<calculation_search_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(calculation_search_response const& a, calculation_search_response const& b); bool operator!=(calculation_search_response const& a, calculation_search_response const& b); bool operator<(calculation_search_response const& a, calculation_search_response const& b); void swap(calculation_search_response& a, calculation_search_response& b); size_t deep_sizeof(calculation_search_response const& x); void write_fields_to_record(cradle::dynamic_map& record, calculation_search_response const& x); void to_dynamic(cradle::dynamic* v, calculation_search_response const& x); void read_fields_from_record(calculation_search_response& x, cradle::dynamic_map const& record); void from_dynamic(calculation_search_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, calculation_search_response const& x);std::ostream& operator<<(std::ostream& s, calculation_search_response const& x);size_t hash_value(calculation_search_response const& x);} namespace cradle { 

#line 170 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct resolve_meta_chain_request { std::string context_id;  calculation_request generator;  resolve_meta_chain_request() {} resolve_meta_chain_request(std::string const& context_id, calculation_request const& generator) : context_id(context_id), generator(generator) {} };  inline resolve_meta_chain_request make_resolve_meta_chain_request(  std::string context_id, calculation_request generator ) { return resolve_meta_chain_request(  std::move(context_id), std::move(generator) ); }template<> struct definitive_type_info_query<resolve_meta_chain_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<resolve_meta_chain_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<resolve_meta_chain_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(resolve_meta_chain_request const& a, resolve_meta_chain_request const& b); bool operator!=(resolve_meta_chain_request const& a, resolve_meta_chain_request const& b); bool operator<(resolve_meta_chain_request const& a, resolve_meta_chain_request const& b); void swap(resolve_meta_chain_request& a, resolve_meta_chain_request& b); size_t deep_sizeof(resolve_meta_chain_request const& x); void write_fields_to_record(cradle::dynamic_map& record, resolve_meta_chain_request const& x); void to_dynamic(cradle::dynamic* v, resolve_meta_chain_request const& x); void read_fields_from_record(resolve_meta_chain_request& x, cradle::dynamic_map const& record); void from_dynamic(resolve_meta_chain_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, resolve_meta_chain_request const& x);std::ostream& operator<<(std::ostream& s, resolve_meta_chain_request const& x);size_t hash_value(resolve_meta_chain_request const& x);} namespace cradle { 

#line 177 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct resolve_meta_chain_response { std::string calculation_id;  resolve_meta_chain_response() {} explicit resolve_meta_chain_response(std::string const& calculation_id) : calculation_id(calculation_id) {} };  inline resolve_meta_chain_response make_resolve_meta_chain_response(  std::string calculation_id ) { return resolve_meta_chain_response(  std::move(calculation_id) ); }template<> struct definitive_type_info_query<resolve_meta_chain_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<resolve_meta_chain_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<resolve_meta_chain_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(resolve_meta_chain_response const& a, resolve_meta_chain_response const& b); bool operator!=(resolve_meta_chain_response const& a, resolve_meta_chain_response const& b); bool operator<(resolve_meta_chain_response const& a, resolve_meta_chain_response const& b); void swap(resolve_meta_chain_response& a, resolve_meta_chain_response& b); size_t deep_sizeof(resolve_meta_chain_response const& x); void write_fields_to_record(cradle::dynamic_map& record, resolve_meta_chain_response const& x); void to_dynamic(cradle::dynamic* v, resolve_meta_chain_response const& x); void read_fields_from_record(resolve_meta_chain_response& x, cradle::dynamic_map const& record); void from_dynamic(resolve_meta_chain_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, resolve_meta_chain_response const& x);std::ostream& operator<<(std::ostream& s, resolve_meta_chain_response const& x);size_t hash_value(resolve_meta_chain_response const& x);} namespace cradle { 

#line 183 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct calculation_request_message { std::string context_id;  std::string calculation_id;  calculation_request_message() {} calculation_request_message(std::string const& context_id, std::string const& calculation_id) : context_id(context_id), calculation_id(calculation_id) {} };  inline calculation_request_message make_calculation_request_message(  std::string context_id, std::string calculation_id ) { return calculation_request_message(  std::move(context_id), std::move(calculation_id) ); }template<> struct definitive_type_info_query<calculation_request_message> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<calculation_request_message> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<calculation_request_message> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(calculation_request_message const& a, calculation_request_message const& b); bool operator!=(calculation_request_message const& a, calculation_request_message const& b); bool operator<(calculation_request_message const& a, calculation_request_message const& b); void swap(calculation_request_message& a, calculation_request_message& b); size_t deep_sizeof(calculation_request_message const& x); void write_fields_to_record(cradle::dynamic_map& record, calculation_request_message const& x); void to_dynamic(cradle::dynamic* v, calculation_request_message const& x); void read_fields_from_record(calculation_request_message& x, cradle::dynamic_map const& record); void from_dynamic(calculation_request_message* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, calculation_request_message const& x);std::ostream& operator<<(std::ostream& s, calculation_request_message const& x);size_t hash_value(calculation_request_message const& x);} namespace cradle { 

#line 190 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct calculation_request_response { cradle::thinknode_calc_request calculation;  calculation_request_response() {} explicit calculation_request_response(cradle::thinknode_calc_request const& calculation) : calculation(calculation) {} };  inline calculation_request_response make_calculation_request_response(  cradle::thinknode_calc_request calculation ) { return calculation_request_response(  std::move(calculation) ); }template<> struct definitive_type_info_query<calculation_request_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<calculation_request_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<calculation_request_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(calculation_request_response const& a, calculation_request_response const& b); bool operator!=(calculation_request_response const& a, calculation_request_response const& b); bool operator<(calculation_request_response const& a, calculation_request_response const& b); void swap(calculation_request_response& a, calculation_request_response& b); size_t deep_sizeof(calculation_request_response const& x); void write_fields_to_record(cradle::dynamic_map& record, calculation_request_response const& x); void to_dynamic(cradle::dynamic* v, calculation_request_response const& x); void read_fields_from_record(calculation_request_response& x, cradle::dynamic_map const& record); void from_dynamic(calculation_request_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, calculation_request_response const& x);std::ostream& operator<<(std::ostream& s, calculation_request_response const& x);size_t hash_value(calculation_request_response const& x);} namespace cradle { 

#line 196 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct calculation_diff_request { std::string id_a;  std::string context_a;  std::string id_b;  std::string context_b;  calculation_diff_request() {} calculation_diff_request(std::string const& id_a, std::string const& context_a, std::string const& id_b, std::string const& context_b) : id_a(id_a), context_a(context_a), id_b(id_b), context_b(context_b) {} };  inline calculation_diff_request make_calculation_diff_request(  std::string id_a, std::string context_a, std::string id_b, std::string context_b ) { return calculation_diff_request(  std::move(id_a), std::move(context_a), std::move(id_b), std::move(context_b) ); }template<> struct definitive_type_info_query<calculation_diff_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<calculation_diff_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<calculation_diff_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(calculation_diff_request const& a, calculation_diff_request const& b); bool operator!=(calculation_diff_request const& a, calculation_diff_request const& b); bool operator<(calculation_diff_request const& a, calculation_diff_request const& b); void swap(calculation_diff_request& a, calculation_diff_request& b); size_t deep_sizeof(calculation_diff_request const& x); void write_fields_to_record(cradle::dynamic_map& record, calculation_diff_request const& x); void to_dynamic(cradle::dynamic* v, calculation_diff_request const& x); void read_fields_from_record(calculation_diff_request& x, cradle::dynamic_map const& record); void from_dynamic(calculation_diff_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, calculation_diff_request const& x);std::ostream& operator<<(std::ostream& s, calculation_diff_request const& x);size_t hash_value(calculation_diff_request const& x);} namespace cradle { 

#line 205 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct object_node_diff { cradle::thinknode_service_id service;  cradle::value_diff_path path_from_root;  std::string id_in_a;  std::string id_in_b;  cradle::value_diff diff;  object_node_diff() {} object_node_diff(cradle::thinknode_service_id const& service, cradle::value_diff_path const& path_from_root, std::string const& id_in_a, std::string const& id_in_b, cradle::value_diff const& diff) : service(service), path_from_root(path_from_root), id_in_a(id_in_a), id_in_b(id_in_b), diff(diff) {} };  inline object_node_diff make_object_node_diff(  cradle::thinknode_service_id service, cradle::value_diff_path path_from_root, std::string id_in_a, std::string id_in_b, cradle::value_diff diff ) { return object_node_diff(  std::move(service), std::move(path_from_root), std::move(id_in_a), std::move(id_in_b), std::move(diff) ); }template<> struct definitive_type_info_query<object_node_diff> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<object_node_diff> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<object_node_diff> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(object_node_diff const& a, object_node_diff const& b); bool operator!=(object_node_diff const& a, object_node_diff const& b); bool operator<(object_node_diff const& a, object_node_diff const& b); void swap(object_node_diff& a, object_node_diff& b); size_t deep_sizeof(object_node_diff const& x); void write_fields_to_record(cradle::dynamic_map& record, object_node_diff const& x); void to_dynamic(cradle::dynamic* v, object_node_diff const& x); void read_fields_from_record(object_node_diff& x, cradle::dynamic_map const& record); void from_dynamic(object_node_diff* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, object_node_diff const& x);std::ostream& operator<<(std::ostream& s, object_node_diff const& x);size_t hash_value(object_node_diff const& x);} namespace cradle { 

#line 220 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
typedef std::vector<cradle::object_node_diff> object_tree_diff;

#line 222 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
typedef cradle::object_tree_diff calculation_diff_response;

#line 224 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct iss_diff_request { std::string id_a;  std::string context_a;  std::string id_b;  std::string context_b;  iss_diff_request() {} iss_diff_request(std::string const& id_a, std::string const& context_a, std::string const& id_b, std::string const& context_b) : id_a(id_a), context_a(context_a), id_b(id_b), context_b(context_b) {} };  inline iss_diff_request make_iss_diff_request(  std::string id_a, std::string context_a, std::string id_b, std::string context_b ) { return iss_diff_request(  std::move(id_a), std::move(context_a), std::move(id_b), std::move(context_b) ); }template<> struct definitive_type_info_query<iss_diff_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<iss_diff_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<iss_diff_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(iss_diff_request const& a, iss_diff_request const& b); bool operator!=(iss_diff_request const& a, iss_diff_request const& b); bool operator<(iss_diff_request const& a, iss_diff_request const& b); void swap(iss_diff_request& a, iss_diff_request& b); size_t deep_sizeof(iss_diff_request const& x); void write_fields_to_record(cradle::dynamic_map& record, iss_diff_request const& x); void to_dynamic(cradle::dynamic* v, iss_diff_request const& x); void read_fields_from_record(iss_diff_request& x, cradle::dynamic_map const& record); void from_dynamic(iss_diff_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, iss_diff_request const& x);std::ostream& operator<<(std::ostream& s, iss_diff_request const& x);size_t hash_value(iss_diff_request const& x);} namespace cradle { 

#line 233 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
typedef cradle::object_tree_diff iss_diff_response;

#line 235 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct results_api_query { string context_id;  string plan_iss_id;  string function;  std::vector<dynamic > args;  results_api_query() {} results_api_query(string const& context_id, string const& plan_iss_id, string const& function, std::vector<dynamic > const& args) : context_id(context_id), plan_iss_id(plan_iss_id), function(function), args(args) {} };  inline results_api_query make_results_api_query(  string context_id, string plan_iss_id, string function, std::vector<dynamic > args ) { return results_api_query(  std::move(context_id), std::move(plan_iss_id), std::move(function), std::move(args) ); }template<> struct definitive_type_info_query<results_api_query> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<results_api_query> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<results_api_query> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(results_api_query const& a, results_api_query const& b); bool operator!=(results_api_query const& a, results_api_query const& b); bool operator<(results_api_query const& a, results_api_query const& b); void swap(results_api_query& a, results_api_query& b); size_t deep_sizeof(results_api_query const& x); void write_fields_to_record(cradle::dynamic_map& record, results_api_query const& x); void to_dynamic(cradle::dynamic* v, results_api_query const& x); void read_fields_from_record(results_api_query& x, cradle::dynamic_map const& record); void from_dynamic(results_api_query* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, results_api_query const& x);std::ostream& operator<<(std::ostream& s, results_api_query const& x);size_t hash_value(results_api_query const& x);} namespace cradle { 

#line 244 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct results_api_response { std::string calculation_id;  results_api_response() {} explicit results_api_response(std::string const& calculation_id) : calculation_id(calculation_id) {} };  inline results_api_response make_results_api_response(  std::string calculation_id ) { return results_api_response(  std::move(calculation_id) ); }template<> struct definitive_type_info_query<results_api_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<results_api_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<results_api_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(results_api_response const& a, results_api_response const& b); bool operator!=(results_api_response const& a, results_api_response const& b); bool operator<(results_api_response const& a, results_api_response const& b); void swap(results_api_response& a, results_api_response& b); size_t deep_sizeof(results_api_response const& x); void write_fields_to_record(cradle::dynamic_map& record, results_api_response const& x); void to_dynamic(cradle::dynamic* v, results_api_response const& x); void read_fields_from_record(results_api_response& x, cradle::dynamic_map const& record); void from_dynamic(results_api_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, results_api_response const& x);std::ostream& operator<<(std::ostream& s, results_api_response const& x);size_t hash_value(results_api_response const& x);} namespace cradle { 

#line 250 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct local_results_api_response { dynamic result;  local_results_api_response() {} explicit local_results_api_response(dynamic const& result) : result(result) {} };  inline local_results_api_response make_local_results_api_response(  dynamic result ) { return local_results_api_response(  std::move(result) ); }template<> struct definitive_type_info_query<local_results_api_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<local_results_api_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<local_results_api_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(local_results_api_response const& a, local_results_api_response const& b); bool operator!=(local_results_api_response const& a, local_results_api_response const& b); bool operator<(local_results_api_response const& a, local_results_api_response const& b); void swap(local_results_api_response& a, local_results_api_response& b); size_t deep_sizeof(local_results_api_response const& x); void write_fields_to_record(cradle::dynamic_map& record, local_results_api_response const& x); void to_dynamic(cradle::dynamic* v, local_results_api_response const& x); void read_fields_from_record(local_results_api_response& x, cradle::dynamic_map const& record); void from_dynamic(local_results_api_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, local_results_api_response const& x);std::ostream& operator<<(std::ostream& s, local_results_api_response const& x);size_t hash_value(local_results_api_response const& x);} namespace cradle { 


#ifdef ENABLED 
    #undef ENABLED 
#endif 

#ifdef CLEAR_ADMIN 
    #undef CLEAR_ADMIN 
#endif 
#line 256 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
enum class introspection_control_request_tag { ENABLED,CLEAR_ADMIN }; template<> struct definitive_type_info_query<introspection_control_request_tag> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<introspection_control_request_tag> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<introspection_control_request_tag> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(introspection_control_request_tag) { return sizeof(introspection_control_request_tag); } inline size_t hash_value(introspection_control_request_tag const& x) {     return size_t(x); }static inline unsigned get_value_count(introspection_control_request_tag) { return 2; } char const* get_value_id(introspection_control_request_tag value); void to_dynamic(     cradle::dynamic* v,     introspection_control_request_tag x); void from_dynamic(     introspection_control_request_tag* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      introspection_control_request_tag const& x); struct introspection_control_request { introspection_control_request_tag type; std::any contents_; introspection_control_request() {} introspection_control_request(introspection_control_request const& other) : type(other.type), contents_(other.contents_) {} introspection_control_request(introspection_control_request&& other) : type(other.type), contents_(std::move(other.contents_)) {} introspection_control_request& operator=(introspection_control_request const& other) { type = other.type; contents_ = other.contents_; return *this; } introspection_control_request& operator=(introspection_control_request&& other) { type = other.type; contents_ = std::move(other.contents_); return *this; } }; template<> struct definitive_type_info_query<introspection_control_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<introspection_control_request> {     static void     get(cradle::api_type_info*); }; introspection_control_request make_introspection_control_request_with_enabled(bool const& x); introspection_control_request make_introspection_control_request_with_enabled(bool&& x); introspection_control_request make_introspection_control_request_with_clear_admin(nil_t const& x); introspection_control_request make_introspection_control_request_with_clear_admin(nil_t&& x); static inline introspection_control_request_tag  get_tag(introspection_control_request const& x) { return x.type; } bool static inline is_enabled(introspection_control_request const& x) { return x.type == introspection_control_request_tag::ENABLED; } bool static inline is_clear_admin(introspection_control_request const& x) { return x.type == introspection_control_request_tag::CLEAR_ADMIN; } bool const& as_enabled(introspection_control_request const& x); nil_t const& as_clear_admin(introspection_control_request const& x); bool& as_enabled(introspection_control_request& x); nil_t& as_clear_admin(introspection_control_request& x); void set_to_enabled(introspection_control_request& x, bool const& y); void set_to_enabled(introspection_control_request& x, bool&& y); void set_to_clear_admin(introspection_control_request& x, nil_t const& y); void set_to_clear_admin(introspection_control_request& x, nil_t&& y); bool operator==(introspection_control_request const& a, introspection_control_request const& b); bool operator!=(introspection_control_request const& a, introspection_control_request const& b); bool operator<(introspection_control_request const& a, introspection_control_request const& b); size_t hash_value(introspection_control_request const& x);void swap(introspection_control_request& a, introspection_control_request& b); void to_dynamic(cradle::dynamic* v, introspection_control_request const& x); void from_dynamic(introspection_control_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, introspection_control_request const& x); size_t deep_sizeof(introspection_control_request const& x); 

#line 263 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct introspection_status_request { bool include_finished;  introspection_status_request() {} explicit introspection_status_request(bool const& include_finished) : include_finished(include_finished) {} };  inline introspection_status_request make_introspection_status_request(  bool include_finished ) { return introspection_status_request(  std::move(include_finished) ); }template<> struct definitive_type_info_query<introspection_status_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<introspection_status_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<introspection_status_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(introspection_status_request const& a, introspection_status_request const& b); bool operator!=(introspection_status_request const& a, introspection_status_request const& b); bool operator<(introspection_status_request const& a, introspection_status_request const& b); void swap(introspection_status_request& a, introspection_status_request& b); size_t deep_sizeof(introspection_status_request const& x); void write_fields_to_record(cradle::dynamic_map& record, introspection_status_request const& x); void to_dynamic(cradle::dynamic* v, introspection_status_request const& x); void read_fields_from_record(introspection_status_request& x, cradle::dynamic_map const& record); void from_dynamic(introspection_status_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, introspection_status_request const& x);std::ostream& operator<<(std::ostream& s, introspection_status_request const& x);size_t hash_value(introspection_status_request const& x);} namespace cradle { 

#line 269 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct resolve_request_request { std::string json_text;  bool remote;  resolve_request_request() {} resolve_request_request(std::string const& json_text, bool const& remote) : json_text(json_text), remote(remote) {} };  inline resolve_request_request make_resolve_request_request(  std::string json_text, bool remote ) { return resolve_request_request(  std::move(json_text), std::move(remote) ); }template<> struct definitive_type_info_query<resolve_request_request> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<resolve_request_request> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<resolve_request_request> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(resolve_request_request const& a, resolve_request_request const& b); bool operator!=(resolve_request_request const& a, resolve_request_request const& b); bool operator<(resolve_request_request const& a, resolve_request_request const& b); void swap(resolve_request_request& a, resolve_request_request& b); size_t deep_sizeof(resolve_request_request const& x); void write_fields_to_record(cradle::dynamic_map& record, resolve_request_request const& x); void to_dynamic(cradle::dynamic* v, resolve_request_request const& x); void read_fields_from_record(resolve_request_request& x, cradle::dynamic_map const& record); void from_dynamic(resolve_request_request* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, resolve_request_request const& x);std::ostream& operator<<(std::ostream& s, resolve_request_request const& x);size_t hash_value(resolve_request_request const& x);} namespace cradle { 


#ifdef KILL 
    #undef KILL 
#endif 

#ifdef REGISTRATION 
    #undef REGISTRATION 
#endif 

#ifdef TEST 
    #undef TEST 
#endif 

#ifdef CACHE_INSERT 
    #undef CACHE_INSERT 
#endif 

#ifdef CACHE_QUERY 
    #undef CACHE_QUERY 
#endif 

#ifdef ISS_OBJECT 
    #undef ISS_OBJECT 
#endif 

#ifdef RESOLVE_ISS_OBJECT 
    #undef RESOLVE_ISS_OBJECT 
#endif 

#ifdef ISS_OBJECT_METADATA 
    #undef ISS_OBJECT_METADATA 
#endif 

#ifdef POST_ISS_OBJECT 
    #undef POST_ISS_OBJECT 
#endif 

#ifdef COPY_ISS_OBJECT 
    #undef COPY_ISS_OBJECT 
#endif 

#ifdef COPY_CALCULATION 
    #undef COPY_CALCULATION 
#endif 

#ifdef POST_CALCULATION 
    #undef POST_CALCULATION 
#endif 

#ifdef RESOLVE_META_CHAIN 
    #undef RESOLVE_META_CHAIN 
#endif 

#ifdef CALCULATION_REQUEST 
    #undef CALCULATION_REQUEST 
#endif 

#ifdef CALCULATION_DIFF 
    #undef CALCULATION_DIFF 
#endif 

#ifdef CALCULATION_SEARCH 
    #undef CALCULATION_SEARCH 
#endif 

#ifdef ISS_DIFF 
    #undef ISS_DIFF 
#endif 

#ifdef PERFORM_LOCAL_CALC 
    #undef PERFORM_LOCAL_CALC 
#endif 

#ifdef RESULTS_API_QUERY 
    #undef RESULTS_API_QUERY 
#endif 

#ifdef LOCAL_RESULTS_API_QUERY 
    #undef LOCAL_RESULTS_API_QUERY 
#endif 

#ifdef INTROSPECTION_CONTROL 
    #undef INTROSPECTION_CONTROL 
#endif 

#ifdef INTROSPECTION_STATUS_QUERY 
    #undef INTROSPECTION_STATUS_QUERY 
#endif 

#ifdef RESOLVE_REQUEST 
    #undef RESOLVE_REQUEST 
#endif 
#line 276 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
enum class client_message_content_tag { KILL,REGISTRATION,TEST,CACHE_INSERT,CACHE_QUERY,ISS_OBJECT,RESOLVE_ISS_OBJECT,ISS_OBJECT_METADATA,POST_ISS_OBJECT,COPY_ISS_OBJECT,COPY_CALCULATION,POST_CALCULATION,RESOLVE_META_CHAIN,CALCULATION_REQUEST,CALCULATION_DIFF,CALCULATION_SEARCH,ISS_DIFF,PERFORM_LOCAL_CALC,RESULTS_API_QUERY,LOCAL_RESULTS_API_QUERY,INTROSPECTION_CONTROL,INTROSPECTION_STATUS_QUERY,RESOLVE_REQUEST }; template<> struct definitive_type_info_query<client_message_content_tag> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<client_message_content_tag> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<client_message_content_tag> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(client_message_content_tag) { return sizeof(client_message_content_tag); } inline size_t hash_value(client_message_content_tag const& x) {     return size_t(x); }static inline unsigned get_value_count(client_message_content_tag) { return 23; } char const* get_value_id(client_message_content_tag value); void to_dynamic(     cradle::dynamic* v,     client_message_content_tag x); void from_dynamic(     client_message_content_tag* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      client_message_content_tag const& x); struct client_message_content { client_message_content_tag type; std::any contents_; client_message_content() {} client_message_content(client_message_content const& other) : type(other.type), contents_(other.contents_) {} client_message_content(client_message_content&& other) : type(other.type), contents_(std::move(other.contents_)) {} client_message_content& operator=(client_message_content const& other) { type = other.type; contents_ = other.contents_; return *this; } client_message_content& operator=(client_message_content&& other) { type = other.type; contents_ = std::move(other.contents_); return *this; } }; template<> struct definitive_type_info_query<client_message_content> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<client_message_content> {     static void     get(cradle::api_type_info*); }; client_message_content make_client_message_content_with_kill(cradle::nil_t const& x); client_message_content make_client_message_content_with_kill(cradle::nil_t&& x); client_message_content make_client_message_content_with_registration(cradle::websocket_registration_message const& x); client_message_content make_client_message_content_with_registration(cradle::websocket_registration_message&& x); client_message_content make_client_message_content_with_test(cradle::websocket_test_query const& x); client_message_content make_client_message_content_with_test(cradle::websocket_test_query&& x); client_message_content make_client_message_content_with_cache_insert(cradle::websocket_cache_insert const& x); client_message_content make_client_message_content_with_cache_insert(cradle::websocket_cache_insert&& x); client_message_content make_client_message_content_with_cache_query(std::string const& x); client_message_content make_client_message_content_with_cache_query(std::string&& x); client_message_content make_client_message_content_with_iss_object(cradle::iss_object_request const& x); client_message_content make_client_message_content_with_iss_object(cradle::iss_object_request&& x); client_message_content make_client_message_content_with_resolve_iss_object(cradle::resolve_iss_object_request const& x); client_message_content make_client_message_content_with_resolve_iss_object(cradle::resolve_iss_object_request&& x); client_message_content make_client_message_content_with_iss_object_metadata(cradle::iss_object_metadata_request const& x); client_message_content make_client_message_content_with_iss_object_metadata(cradle::iss_object_metadata_request&& x); client_message_content make_client_message_content_with_post_iss_object(cradle::post_iss_object_request const& x); client_message_content make_client_message_content_with_post_iss_object(cradle::post_iss_object_request&& x); client_message_content make_client_message_content_with_copy_iss_object(cradle::copy_iss_object_request const& x); client_message_content make_client_message_content_with_copy_iss_object(cradle::copy_iss_object_request&& x); client_message_content make_client_message_content_with_copy_calculation(cradle::copy_calculation_request const& x); client_message_content make_client_message_content_with_copy_calculation(cradle::copy_calculation_request&& x); client_message_content make_client_message_content_with_post_calculation(cradle::post_calculation_request const& x); client_message_content make_client_message_content_with_post_calculation(cradle::post_calculation_request&& x); client_message_content make_client_message_content_with_resolve_meta_chain(cradle::resolve_meta_chain_request const& x); client_message_content make_client_message_content_with_resolve_meta_chain(cradle::resolve_meta_chain_request&& x); client_message_content make_client_message_content_with_calculation_request(cradle::calculation_request_message const& x); client_message_content make_client_message_content_with_calculation_request(cradle::calculation_request_message&& x); client_message_content make_client_message_content_with_calculation_diff(cradle::calculation_diff_request const& x); client_message_content make_client_message_content_with_calculation_diff(cradle::calculation_diff_request&& x); client_message_content make_client_message_content_with_calculation_search(cradle::calculation_search_request const& x); client_message_content make_client_message_content_with_calculation_search(cradle::calculation_search_request&& x); client_message_content make_client_message_content_with_iss_diff(cradle::iss_diff_request const& x); client_message_content make_client_message_content_with_iss_diff(cradle::iss_diff_request&& x); client_message_content make_client_message_content_with_perform_local_calc(cradle::post_calculation_request const& x); client_message_content make_client_message_content_with_perform_local_calc(cradle::post_calculation_request&& x); client_message_content make_client_message_content_with_results_api_query(cradle::results_api_query const& x); client_message_content make_client_message_content_with_results_api_query(cradle::results_api_query&& x); client_message_content make_client_message_content_with_local_results_api_query(cradle::results_api_query const& x); client_message_content make_client_message_content_with_local_results_api_query(cradle::results_api_query&& x); client_message_content make_client_message_content_with_introspection_control(cradle::introspection_control_request const& x); client_message_content make_client_message_content_with_introspection_control(cradle::introspection_control_request&& x); client_message_content make_client_message_content_with_introspection_status_query(cradle::introspection_status_request const& x); client_message_content make_client_message_content_with_introspection_status_query(cradle::introspection_status_request&& x); client_message_content make_client_message_content_with_resolve_request(cradle::resolve_request_request const& x); client_message_content make_client_message_content_with_resolve_request(cradle::resolve_request_request&& x); static inline client_message_content_tag  get_tag(client_message_content const& x) { return x.type; } bool static inline is_kill(client_message_content const& x) { return x.type == client_message_content_tag::KILL; } bool static inline is_registration(client_message_content const& x) { return x.type == client_message_content_tag::REGISTRATION; } bool static inline is_test(client_message_content const& x) { return x.type == client_message_content_tag::TEST; } bool static inline is_cache_insert(client_message_content const& x) { return x.type == client_message_content_tag::CACHE_INSERT; } bool static inline is_cache_query(client_message_content const& x) { return x.type == client_message_content_tag::CACHE_QUERY; } bool static inline is_iss_object(client_message_content const& x) { return x.type == client_message_content_tag::ISS_OBJECT; } bool static inline is_resolve_iss_object(client_message_content const& x) { return x.type == client_message_content_tag::RESOLVE_ISS_OBJECT; } bool static inline is_iss_object_metadata(client_message_content const& x) { return x.type == client_message_content_tag::ISS_OBJECT_METADATA; } bool static inline is_post_iss_object(client_message_content const& x) { return x.type == client_message_content_tag::POST_ISS_OBJECT; } bool static inline is_copy_iss_object(client_message_content const& x) { return x.type == client_message_content_tag::COPY_ISS_OBJECT; } bool static inline is_copy_calculation(client_message_content const& x) { return x.type == client_message_content_tag::COPY_CALCULATION; } bool static inline is_post_calculation(client_message_content const& x) { return x.type == client_message_content_tag::POST_CALCULATION; } bool static inline is_resolve_meta_chain(client_message_content const& x) { return x.type == client_message_content_tag::RESOLVE_META_CHAIN; } bool static inline is_calculation_request(client_message_content const& x) { return x.type == client_message_content_tag::CALCULATION_REQUEST; } bool static inline is_calculation_diff(client_message_content const& x) { return x.type == client_message_content_tag::CALCULATION_DIFF; } bool static inline is_calculation_search(client_message_content const& x) { return x.type == client_message_content_tag::CALCULATION_SEARCH; } bool static inline is_iss_diff(client_message_content const& x) { return x.type == client_message_content_tag::ISS_DIFF; } bool static inline is_perform_local_calc(client_message_content const& x) { return x.type == client_message_content_tag::PERFORM_LOCAL_CALC; } bool static inline is_results_api_query(client_message_content const& x) { return x.type == client_message_content_tag::RESULTS_API_QUERY; } bool static inline is_local_results_api_query(client_message_content const& x) { return x.type == client_message_content_tag::LOCAL_RESULTS_API_QUERY; } bool static inline is_introspection_control(client_message_content const& x) { return x.type == client_message_content_tag::INTROSPECTION_CONTROL; } bool static inline is_introspection_status_query(client_message_content const& x) { return x.type == client_message_content_tag::INTROSPECTION_STATUS_QUERY; } bool static inline is_resolve_request(client_message_content const& x) { return x.type == client_message_content_tag::RESOLVE_REQUEST; } cradle::nil_t const& as_kill(client_message_content const& x); cradle::websocket_registration_message const& as_registration(client_message_content const& x); cradle::websocket_test_query const& as_test(client_message_content const& x); cradle::websocket_cache_insert const& as_cache_insert(client_message_content const& x); std::string const& as_cache_query(client_message_content const& x); cradle::iss_object_request const& as_iss_object(client_message_content const& x); cradle::resolve_iss_object_request const& as_resolve_iss_object(client_message_content const& x); cradle::iss_object_metadata_request const& as_iss_object_metadata(client_message_content const& x); cradle::post_iss_object_request const& as_post_iss_object(client_message_content const& x); cradle::copy_iss_object_request const& as_copy_iss_object(client_message_content const& x); cradle::copy_calculation_request const& as_copy_calculation(client_message_content const& x); cradle::post_calculation_request const& as_post_calculation(client_message_content const& x); cradle::resolve_meta_chain_request const& as_resolve_meta_chain(client_message_content const& x); cradle::calculation_request_message const& as_calculation_request(client_message_content const& x); cradle::calculation_diff_request const& as_calculation_diff(client_message_content const& x); cradle::calculation_search_request const& as_calculation_search(client_message_content const& x); cradle::iss_diff_request const& as_iss_diff(client_message_content const& x); cradle::post_calculation_request const& as_perform_local_calc(client_message_content const& x); cradle::results_api_query const& as_results_api_query(client_message_content const& x); cradle::results_api_query const& as_local_results_api_query(client_message_content const& x); cradle::introspection_control_request const& as_introspection_control(client_message_content const& x); cradle::introspection_status_request const& as_introspection_status_query(client_message_content const& x); cradle::resolve_request_request const& as_resolve_request(client_message_content const& x); cradle::nil_t& as_kill(client_message_content& x); cradle::websocket_registration_message& as_registration(client_message_content& x); cradle::websocket_test_query& as_test(client_message_content& x); cradle::websocket_cache_insert& as_cache_insert(client_message_content& x); std::string& as_cache_query(client_message_content& x); cradle::iss_object_request& as_iss_object(client_message_content& x); cradle::resolve_iss_object_request& as_resolve_iss_object(client_message_content& x); cradle::iss_object_metadata_request& as_iss_object_metadata(client_message_content& x); cradle::post_iss_object_request& as_post_iss_object(client_message_content& x); cradle::copy_iss_object_request& as_copy_iss_object(client_message_content& x); cradle::copy_calculation_request& as_copy_calculation(client_message_content& x); cradle::post_calculation_request& as_post_calculation(client_message_content& x); cradle::resolve_meta_chain_request& as_resolve_meta_chain(client_message_content& x); cradle::calculation_request_message& as_calculation_request(client_message_content& x); cradle::calculation_diff_request& as_calculation_diff(client_message_content& x); cradle::calculation_search_request& as_calculation_search(client_message_content& x); cradle::iss_diff_request& as_iss_diff(client_message_content& x); cradle::post_calculation_request& as_perform_local_calc(client_message_content& x); cradle::results_api_query& as_results_api_query(client_message_content& x); cradle::results_api_query& as_local_results_api_query(client_message_content& x); cradle::introspection_control_request& as_introspection_control(client_message_content& x); cradle::introspection_status_request& as_introspection_status_query(client_message_content& x); cradle::resolve_request_request& as_resolve_request(client_message_content& x); void set_to_kill(client_message_content& x, cradle::nil_t const& y); void set_to_kill(client_message_content& x, cradle::nil_t&& y); void set_to_registration(client_message_content& x, cradle::websocket_registration_message const& y); void set_to_registration(client_message_content& x, cradle::websocket_registration_message&& y); void set_to_test(client_message_content& x, cradle::websocket_test_query const& y); void set_to_test(client_message_content& x, cradle::websocket_test_query&& y); void set_to_cache_insert(client_message_content& x, cradle::websocket_cache_insert const& y); void set_to_cache_insert(client_message_content& x, cradle::websocket_cache_insert&& y); void set_to_cache_query(client_message_content& x, std::string const& y); void set_to_cache_query(client_message_content& x, std::string&& y); void set_to_iss_object(client_message_content& x, cradle::iss_object_request const& y); void set_to_iss_object(client_message_content& x, cradle::iss_object_request&& y); void set_to_resolve_iss_object(client_message_content& x, cradle::resolve_iss_object_request const& y); void set_to_resolve_iss_object(client_message_content& x, cradle::resolve_iss_object_request&& y); void set_to_iss_object_metadata(client_message_content& x, cradle::iss_object_metadata_request const& y); void set_to_iss_object_metadata(client_message_content& x, cradle::iss_object_metadata_request&& y); void set_to_post_iss_object(client_message_content& x, cradle::post_iss_object_request const& y); void set_to_post_iss_object(client_message_content& x, cradle::post_iss_object_request&& y); void set_to_copy_iss_object(client_message_content& x, cradle::copy_iss_object_request const& y); void set_to_copy_iss_object(client_message_content& x, cradle::copy_iss_object_request&& y); void set_to_copy_calculation(client_message_content& x, cradle::copy_calculation_request const& y); void set_to_copy_calculation(client_message_content& x, cradle::copy_calculation_request&& y); void set_to_post_calculation(client_message_content& x, cradle::post_calculation_request const& y); void set_to_post_calculation(client_message_content& x, cradle::post_calculation_request&& y); void set_to_resolve_meta_chain(client_message_content& x, cradle::resolve_meta_chain_request const& y); void set_to_resolve_meta_chain(client_message_content& x, cradle::resolve_meta_chain_request&& y); void set_to_calculation_request(client_message_content& x, cradle::calculation_request_message const& y); void set_to_calculation_request(client_message_content& x, cradle::calculation_request_message&& y); void set_to_calculation_diff(client_message_content& x, cradle::calculation_diff_request const& y); void set_to_calculation_diff(client_message_content& x, cradle::calculation_diff_request&& y); void set_to_calculation_search(client_message_content& x, cradle::calculation_search_request const& y); void set_to_calculation_search(client_message_content& x, cradle::calculation_search_request&& y); void set_to_iss_diff(client_message_content& x, cradle::iss_diff_request const& y); void set_to_iss_diff(client_message_content& x, cradle::iss_diff_request&& y); void set_to_perform_local_calc(client_message_content& x, cradle::post_calculation_request const& y); void set_to_perform_local_calc(client_message_content& x, cradle::post_calculation_request&& y); void set_to_results_api_query(client_message_content& x, cradle::results_api_query const& y); void set_to_results_api_query(client_message_content& x, cradle::results_api_query&& y); void set_to_local_results_api_query(client_message_content& x, cradle::results_api_query const& y); void set_to_local_results_api_query(client_message_content& x, cradle::results_api_query&& y); void set_to_introspection_control(client_message_content& x, cradle::introspection_control_request const& y); void set_to_introspection_control(client_message_content& x, cradle::introspection_control_request&& y); void set_to_introspection_status_query(client_message_content& x, cradle::introspection_status_request const& y); void set_to_introspection_status_query(client_message_content& x, cradle::introspection_status_request&& y); void set_to_resolve_request(client_message_content& x, cradle::resolve_request_request const& y); void set_to_resolve_request(client_message_content& x, cradle::resolve_request_request&& y); bool operator==(client_message_content const& a, client_message_content const& b); bool operator!=(client_message_content const& a, client_message_content const& b); bool operator<(client_message_content const& a, client_message_content const& b); size_t hash_value(client_message_content const& x);void swap(client_message_content& a, client_message_content& b); void to_dynamic(cradle::dynamic* v, client_message_content const& x); void from_dynamic(client_message_content* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, client_message_content const& x); size_t deep_sizeof(client_message_content const& x); 

#line 304 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_client_message { std::string request_id;  cradle::client_message_content content;  websocket_client_message() {} websocket_client_message(std::string const& request_id, cradle::client_message_content const& content) : request_id(request_id), content(content) {} };  inline websocket_client_message make_websocket_client_message(  std::string request_id, cradle::client_message_content content ) { return websocket_client_message(  std::move(request_id), std::move(content) ); }template<> struct definitive_type_info_query<websocket_client_message> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_client_message> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_client_message> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_client_message const& a, websocket_client_message const& b); bool operator!=(websocket_client_message const& a, websocket_client_message const& b); bool operator<(websocket_client_message const& a, websocket_client_message const& b); void swap(websocket_client_message& a, websocket_client_message& b); size_t deep_sizeof(websocket_client_message const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_client_message const& x); void to_dynamic(cradle::dynamic* v, websocket_client_message const& x); void read_fields_from_record(websocket_client_message& x, cradle::dynamic_map const& record); void from_dynamic(websocket_client_message* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_client_message const& x);std::ostream& operator<<(std::ostream& s, websocket_client_message const& x);size_t hash_value(websocket_client_message const& x);} namespace cradle { 

#line 311 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct http_failure_info { cradle::prep_http_request attempted_request;  cradle::prep_http_response response;  http_failure_info() {} http_failure_info(cradle::prep_http_request const& attempted_request, cradle::prep_http_response const& response) : attempted_request(attempted_request), response(response) {} };  inline http_failure_info make_http_failure_info(  cradle::prep_http_request attempted_request, cradle::prep_http_response response ) { return http_failure_info(  std::move(attempted_request), std::move(response) ); }template<> struct definitive_type_info_query<http_failure_info> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<http_failure_info> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<http_failure_info> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(http_failure_info const& a, http_failure_info const& b); bool operator!=(http_failure_info const& a, http_failure_info const& b); bool operator<(http_failure_info const& a, http_failure_info const& b); void swap(http_failure_info& a, http_failure_info& b); size_t deep_sizeof(http_failure_info const& x); void write_fields_to_record(cradle::dynamic_map& record, http_failure_info const& x); void to_dynamic(cradle::dynamic* v, http_failure_info const& x); void read_fields_from_record(http_failure_info& x, cradle::dynamic_map const& record); void from_dynamic(http_failure_info* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, http_failure_info const& x);std::ostream& operator<<(std::ostream& s, http_failure_info const& x);size_t hash_value(http_failure_info const& x);} namespace cradle { 


#ifdef BAD_STATUS_CODE 
    #undef BAD_STATUS_CODE 
#endif 

#ifdef UNREGISTERED_CLIENT 
    #undef UNREGISTERED_CLIENT 
#endif 

#ifdef UNKNOWN 
    #undef UNKNOWN 
#endif 
#line 318 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
enum class error_response_tag { BAD_STATUS_CODE,UNREGISTERED_CLIENT,UNKNOWN }; template<> struct definitive_type_info_query<error_response_tag> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<error_response_tag> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<error_response_tag> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(error_response_tag) { return sizeof(error_response_tag); } inline size_t hash_value(error_response_tag const& x) {     return size_t(x); }static inline unsigned get_value_count(error_response_tag) { return 3; } char const* get_value_id(error_response_tag value); void to_dynamic(     cradle::dynamic* v,     error_response_tag x); void from_dynamic(     error_response_tag* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      error_response_tag const& x); struct error_response { error_response_tag type; std::any contents_; error_response() {} error_response(error_response const& other) : type(other.type), contents_(other.contents_) {} error_response(error_response&& other) : type(other.type), contents_(std::move(other.contents_)) {} error_response& operator=(error_response const& other) { type = other.type; contents_ = other.contents_; return *this; } error_response& operator=(error_response&& other) { type = other.type; contents_ = std::move(other.contents_); return *this; } }; template<> struct definitive_type_info_query<error_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<error_response> {     static void     get(cradle::api_type_info*); }; error_response make_error_response_with_bad_status_code(http_failure_info const& x); error_response make_error_response_with_bad_status_code(http_failure_info&& x); error_response make_error_response_with_unregistered_client(nil_t const& x); error_response make_error_response_with_unregistered_client(nil_t&& x); error_response make_error_response_with_unknown(std::string const& x); error_response make_error_response_with_unknown(std::string&& x); static inline error_response_tag  get_tag(error_response const& x) { return x.type; } bool static inline is_bad_status_code(error_response const& x) { return x.type == error_response_tag::BAD_STATUS_CODE; } bool static inline is_unregistered_client(error_response const& x) { return x.type == error_response_tag::UNREGISTERED_CLIENT; } bool static inline is_unknown(error_response const& x) { return x.type == error_response_tag::UNKNOWN; } http_failure_info const& as_bad_status_code(error_response const& x); nil_t const& as_unregistered_client(error_response const& x); std::string const& as_unknown(error_response const& x); http_failure_info& as_bad_status_code(error_response& x); nil_t& as_unregistered_client(error_response& x); std::string& as_unknown(error_response& x); void set_to_bad_status_code(error_response& x, http_failure_info const& y); void set_to_bad_status_code(error_response& x, http_failure_info&& y); void set_to_unregistered_client(error_response& x, nil_t const& y); void set_to_unregistered_client(error_response& x, nil_t&& y); void set_to_unknown(error_response& x, std::string const& y); void set_to_unknown(error_response& x, std::string&& y); bool operator==(error_response const& a, error_response const& b); bool operator!=(error_response const& a, error_response const& b); bool operator<(error_response const& a, error_response const& b); size_t hash_value(error_response const& x);void swap(error_response& a, error_response& b); void to_dynamic(cradle::dynamic* v, error_response const& x); void from_dynamic(error_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, error_response const& x); size_t deep_sizeof(error_response const& x); 

#line 328 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct tasklet_msg_event { integer when;  std::string what;  std::string details;  tasklet_msg_event() {} tasklet_msg_event(integer const& when, std::string const& what, std::string const& details) : when(when), what(what), details(details) {} };  inline tasklet_msg_event make_tasklet_msg_event(  integer when, std::string what, std::string details ) { return tasklet_msg_event(  std::move(when), std::move(what), std::move(details) ); }template<> struct definitive_type_info_query<tasklet_msg_event> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<tasklet_msg_event> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<tasklet_msg_event> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(tasklet_msg_event const& a, tasklet_msg_event const& b); bool operator!=(tasklet_msg_event const& a, tasklet_msg_event const& b); bool operator<(tasklet_msg_event const& a, tasklet_msg_event const& b); void swap(tasklet_msg_event& a, tasklet_msg_event& b); size_t deep_sizeof(tasklet_msg_event const& x); void write_fields_to_record(cradle::dynamic_map& record, tasklet_msg_event const& x); void to_dynamic(cradle::dynamic* v, tasklet_msg_event const& x); void read_fields_from_record(tasklet_msg_event& x, cradle::dynamic_map const& record); void from_dynamic(tasklet_msg_event* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, tasklet_msg_event const& x);std::ostream& operator<<(std::ostream& s, tasklet_msg_event const& x);size_t hash_value(tasklet_msg_event const& x);} namespace cradle { 

#line 336 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct tasklet_overview { std::string pool_name;  int tasklet_id;  omissible<integer > client_id;  std::string description;  std::vector<tasklet_msg_event > events;  tasklet_overview() {} tasklet_overview(std::string const& pool_name, int const& tasklet_id, omissible<integer > const& client_id, std::string const& description, std::vector<tasklet_msg_event > const& events) : pool_name(pool_name), tasklet_id(tasklet_id), client_id(client_id), description(description), events(events) {} };  inline tasklet_overview make_tasklet_overview(  std::string pool_name, int tasklet_id, omissible<integer > client_id, std::string description, std::vector<tasklet_msg_event > events ) { return tasklet_overview(  std::move(pool_name), std::move(tasklet_id), std::move(client_id), std::move(description), std::move(events) ); }template<> struct definitive_type_info_query<tasklet_overview> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<tasklet_overview> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<tasklet_overview> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(tasklet_overview const& a, tasklet_overview const& b); bool operator!=(tasklet_overview const& a, tasklet_overview const& b); bool operator<(tasklet_overview const& a, tasklet_overview const& b); void swap(tasklet_overview& a, tasklet_overview& b); size_t deep_sizeof(tasklet_overview const& x); void write_fields_to_record(cradle::dynamic_map& record, tasklet_overview const& x); void to_dynamic(cradle::dynamic* v, tasklet_overview const& x); void read_fields_from_record(tasklet_overview& x, cradle::dynamic_map const& record); void from_dynamic(tasklet_overview* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, tasklet_overview const& x);std::ostream& operator<<(std::ostream& s, tasklet_overview const& x);size_t hash_value(tasklet_overview const& x);} namespace cradle { 

#line 346 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct introspection_status_response { integer now;  std::vector<tasklet_overview > tasklets;  introspection_status_response() {} introspection_status_response(integer const& now, std::vector<tasklet_overview > const& tasklets) : now(now), tasklets(tasklets) {} };  inline introspection_status_response make_introspection_status_response(  integer now, std::vector<tasklet_overview > tasklets ) { return introspection_status_response(  std::move(now), std::move(tasklets) ); }template<> struct definitive_type_info_query<introspection_status_response> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<introspection_status_response> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<introspection_status_response> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(introspection_status_response const& a, introspection_status_response const& b); bool operator!=(introspection_status_response const& a, introspection_status_response const& b); bool operator<(introspection_status_response const& a, introspection_status_response const& b); void swap(introspection_status_response& a, introspection_status_response& b); size_t deep_sizeof(introspection_status_response const& x); void write_fields_to_record(cradle::dynamic_map& record, introspection_status_response const& x); void to_dynamic(cradle::dynamic* v, introspection_status_response const& x); void read_fields_from_record(introspection_status_response& x, cradle::dynamic_map const& record); void from_dynamic(introspection_status_response* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, introspection_status_response const& x);std::ostream& operator<<(std::ostream& s, introspection_status_response const& x);size_t hash_value(introspection_status_response const& x);} namespace cradle { 


#ifdef REGISTRATION_ACKNOWLEDGEMENT 
    #undef REGISTRATION_ACKNOWLEDGEMENT 
#endif 

#ifdef TEST 
    #undef TEST 
#endif 

#ifdef CACHE_RESPONSE 
    #undef CACHE_RESPONSE 
#endif 

#ifdef CACHE_INSERT_ACKNOWLEDGEMENT 
    #undef CACHE_INSERT_ACKNOWLEDGEMENT 
#endif 

#ifdef ERROR 
    #undef ERROR 
#endif 

#ifdef ISS_OBJECT_RESPONSE 
    #undef ISS_OBJECT_RESPONSE 
#endif 

#ifdef RESOLVE_ISS_OBJECT_RESPONSE 
    #undef RESOLVE_ISS_OBJECT_RESPONSE 
#endif 

#ifdef ISS_OBJECT_METADATA_RESPONSE 
    #undef ISS_OBJECT_METADATA_RESPONSE 
#endif 

#ifdef POST_ISS_OBJECT_RESPONSE 
    #undef POST_ISS_OBJECT_RESPONSE 
#endif 

#ifdef COPY_ISS_OBJECT_RESPONSE 
    #undef COPY_ISS_OBJECT_RESPONSE 
#endif 

#ifdef COPY_CALCULATION_RESPONSE 
    #undef COPY_CALCULATION_RESPONSE 
#endif 

#ifdef POST_CALCULATION_RESPONSE 
    #undef POST_CALCULATION_RESPONSE 
#endif 

#ifdef RESOLVE_META_CHAIN_RESPONSE 
    #undef RESOLVE_META_CHAIN_RESPONSE 
#endif 

#ifdef CALCULATION_REQUEST_RESPONSE 
    #undef CALCULATION_REQUEST_RESPONSE 
#endif 

#ifdef CALCULATION_DIFF_RESPONSE 
    #undef CALCULATION_DIFF_RESPONSE 
#endif 

#ifdef CALCULATION_SEARCH_RESPONSE 
    #undef CALCULATION_SEARCH_RESPONSE 
#endif 

#ifdef ISS_DIFF_RESPONSE 
    #undef ISS_DIFF_RESPONSE 
#endif 

#ifdef LOCAL_CALC_RESULT 
    #undef LOCAL_CALC_RESULT 
#endif 

#ifdef RESULTS_API_RESPONSE 
    #undef RESULTS_API_RESPONSE 
#endif 

#ifdef LOCAL_RESULTS_API_RESPONSE 
    #undef LOCAL_RESULTS_API_RESPONSE 
#endif 

#ifdef INTROSPECTION_CONTROL_RESPONSE 
    #undef INTROSPECTION_CONTROL_RESPONSE 
#endif 

#ifdef INTROSPECTION_STATUS_RESPONSE 
    #undef INTROSPECTION_STATUS_RESPONSE 
#endif 

#ifdef RESOLVE_REQUEST_RESPONSE 
    #undef RESOLVE_REQUEST_RESPONSE 
#endif 
#line 353 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
enum class server_message_content_tag { REGISTRATION_ACKNOWLEDGEMENT,TEST,CACHE_RESPONSE,CACHE_INSERT_ACKNOWLEDGEMENT,ERROR,ISS_OBJECT_RESPONSE,RESOLVE_ISS_OBJECT_RESPONSE,ISS_OBJECT_METADATA_RESPONSE,POST_ISS_OBJECT_RESPONSE,COPY_ISS_OBJECT_RESPONSE,COPY_CALCULATION_RESPONSE,POST_CALCULATION_RESPONSE,RESOLVE_META_CHAIN_RESPONSE,CALCULATION_REQUEST_RESPONSE,CALCULATION_DIFF_RESPONSE,CALCULATION_SEARCH_RESPONSE,ISS_DIFF_RESPONSE,LOCAL_CALC_RESULT,RESULTS_API_RESPONSE,LOCAL_RESULTS_API_RESPONSE,INTROSPECTION_CONTROL_RESPONSE,INTROSPECTION_STATUS_RESPONSE,RESOLVE_REQUEST_RESPONSE }; template<> struct definitive_type_info_query<server_message_content_tag> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<server_message_content_tag> {     static void     get(cradle::api_type_info*); }; template<> struct enum_type_info_query<server_message_content_tag> {     static void     get(cradle::api_enum_info*); }; static inline size_t deep_sizeof(server_message_content_tag) { return sizeof(server_message_content_tag); } inline size_t hash_value(server_message_content_tag const& x) {     return size_t(x); }static inline unsigned get_value_count(server_message_content_tag) { return 23; } char const* get_value_id(server_message_content_tag value); void to_dynamic(     cradle::dynamic* v,     server_message_content_tag x); void from_dynamic(     server_message_content_tag* x,     cradle::dynamic const& v); std::ostream& operator<<(     std::ostream& s,      server_message_content_tag const& x); struct server_message_content { server_message_content_tag type; std::any contents_; server_message_content() {} server_message_content(server_message_content const& other) : type(other.type), contents_(other.contents_) {} server_message_content(server_message_content&& other) : type(other.type), contents_(std::move(other.contents_)) {} server_message_content& operator=(server_message_content const& other) { type = other.type; contents_ = other.contents_; return *this; } server_message_content& operator=(server_message_content&& other) { type = other.type; contents_ = std::move(other.contents_); return *this; } }; template<> struct definitive_type_info_query<server_message_content> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<server_message_content> {     static void     get(cradle::api_type_info*); }; server_message_content make_server_message_content_with_registration_acknowledgement(nil_t const& x); server_message_content make_server_message_content_with_registration_acknowledgement(nil_t&& x); server_message_content make_server_message_content_with_test(cradle::websocket_test_response const& x); server_message_content make_server_message_content_with_test(cradle::websocket_test_response&& x); server_message_content make_server_message_content_with_cache_response(cradle::websocket_cache_response const& x); server_message_content make_server_message_content_with_cache_response(cradle::websocket_cache_response&& x); server_message_content make_server_message_content_with_cache_insert_acknowledgement(nil_t const& x); server_message_content make_server_message_content_with_cache_insert_acknowledgement(nil_t&& x); server_message_content make_server_message_content_with_error(cradle::error_response const& x); server_message_content make_server_message_content_with_error(cradle::error_response&& x); server_message_content make_server_message_content_with_iss_object_response(cradle::iss_object_response const& x); server_message_content make_server_message_content_with_iss_object_response(cradle::iss_object_response&& x); server_message_content make_server_message_content_with_resolve_iss_object_response(cradle::resolve_iss_object_response const& x); server_message_content make_server_message_content_with_resolve_iss_object_response(cradle::resolve_iss_object_response&& x); server_message_content make_server_message_content_with_iss_object_metadata_response(cradle::iss_object_metadata_response const& x); server_message_content make_server_message_content_with_iss_object_metadata_response(cradle::iss_object_metadata_response&& x); server_message_content make_server_message_content_with_post_iss_object_response(cradle::post_iss_object_response const& x); server_message_content make_server_message_content_with_post_iss_object_response(cradle::post_iss_object_response&& x); server_message_content make_server_message_content_with_copy_iss_object_response(cradle::nil_t const& x); server_message_content make_server_message_content_with_copy_iss_object_response(cradle::nil_t&& x); server_message_content make_server_message_content_with_copy_calculation_response(cradle::nil_t const& x); server_message_content make_server_message_content_with_copy_calculation_response(cradle::nil_t&& x); server_message_content make_server_message_content_with_post_calculation_response(cradle::post_calculation_response const& x); server_message_content make_server_message_content_with_post_calculation_response(cradle::post_calculation_response&& x); server_message_content make_server_message_content_with_resolve_meta_chain_response(cradle::resolve_meta_chain_response const& x); server_message_content make_server_message_content_with_resolve_meta_chain_response(cradle::resolve_meta_chain_response&& x); server_message_content make_server_message_content_with_calculation_request_response(cradle::calculation_request_response const& x); server_message_content make_server_message_content_with_calculation_request_response(cradle::calculation_request_response&& x); server_message_content make_server_message_content_with_calculation_diff_response(cradle::calculation_diff_response const& x); server_message_content make_server_message_content_with_calculation_diff_response(cradle::calculation_diff_response&& x); server_message_content make_server_message_content_with_calculation_search_response(cradle::calculation_search_response const& x); server_message_content make_server_message_content_with_calculation_search_response(cradle::calculation_search_response&& x); server_message_content make_server_message_content_with_iss_diff_response(cradle::iss_diff_response const& x); server_message_content make_server_message_content_with_iss_diff_response(cradle::iss_diff_response&& x); server_message_content make_server_message_content_with_local_calc_result(cradle::dynamic const& x); server_message_content make_server_message_content_with_local_calc_result(cradle::dynamic&& x); server_message_content make_server_message_content_with_results_api_response(cradle::results_api_response const& x); server_message_content make_server_message_content_with_results_api_response(cradle::results_api_response&& x); server_message_content make_server_message_content_with_local_results_api_response(cradle::local_results_api_response const& x); server_message_content make_server_message_content_with_local_results_api_response(cradle::local_results_api_response&& x); server_message_content make_server_message_content_with_introspection_control_response(nil_t const& x); server_message_content make_server_message_content_with_introspection_control_response(nil_t&& x); server_message_content make_server_message_content_with_introspection_status_response(cradle::introspection_status_response const& x); server_message_content make_server_message_content_with_introspection_status_response(cradle::introspection_status_response&& x); server_message_content make_server_message_content_with_resolve_request_response(cradle::dynamic const& x); server_message_content make_server_message_content_with_resolve_request_response(cradle::dynamic&& x); static inline server_message_content_tag  get_tag(server_message_content const& x) { return x.type; } bool static inline is_registration_acknowledgement(server_message_content const& x) { return x.type == server_message_content_tag::REGISTRATION_ACKNOWLEDGEMENT; } bool static inline is_test(server_message_content const& x) { return x.type == server_message_content_tag::TEST; } bool static inline is_cache_response(server_message_content const& x) { return x.type == server_message_content_tag::CACHE_RESPONSE; } bool static inline is_cache_insert_acknowledgement(server_message_content const& x) { return x.type == server_message_content_tag::CACHE_INSERT_ACKNOWLEDGEMENT; } bool static inline is_error(server_message_content const& x) { return x.type == server_message_content_tag::ERROR; } bool static inline is_iss_object_response(server_message_content const& x) { return x.type == server_message_content_tag::ISS_OBJECT_RESPONSE; } bool static inline is_resolve_iss_object_response(server_message_content const& x) { return x.type == server_message_content_tag::RESOLVE_ISS_OBJECT_RESPONSE; } bool static inline is_iss_object_metadata_response(server_message_content const& x) { return x.type == server_message_content_tag::ISS_OBJECT_METADATA_RESPONSE; } bool static inline is_post_iss_object_response(server_message_content const& x) { return x.type == server_message_content_tag::POST_ISS_OBJECT_RESPONSE; } bool static inline is_copy_iss_object_response(server_message_content const& x) { return x.type == server_message_content_tag::COPY_ISS_OBJECT_RESPONSE; } bool static inline is_copy_calculation_response(server_message_content const& x) { return x.type == server_message_content_tag::COPY_CALCULATION_RESPONSE; } bool static inline is_post_calculation_response(server_message_content const& x) { return x.type == server_message_content_tag::POST_CALCULATION_RESPONSE; } bool static inline is_resolve_meta_chain_response(server_message_content const& x) { return x.type == server_message_content_tag::RESOLVE_META_CHAIN_RESPONSE; } bool static inline is_calculation_request_response(server_message_content const& x) { return x.type == server_message_content_tag::CALCULATION_REQUEST_RESPONSE; } bool static inline is_calculation_diff_response(server_message_content const& x) { return x.type == server_message_content_tag::CALCULATION_DIFF_RESPONSE; } bool static inline is_calculation_search_response(server_message_content const& x) { return x.type == server_message_content_tag::CALCULATION_SEARCH_RESPONSE; } bool static inline is_iss_diff_response(server_message_content const& x) { return x.type == server_message_content_tag::ISS_DIFF_RESPONSE; } bool static inline is_local_calc_result(server_message_content const& x) { return x.type == server_message_content_tag::LOCAL_CALC_RESULT; } bool static inline is_results_api_response(server_message_content const& x) { return x.type == server_message_content_tag::RESULTS_API_RESPONSE; } bool static inline is_local_results_api_response(server_message_content const& x) { return x.type == server_message_content_tag::LOCAL_RESULTS_API_RESPONSE; } bool static inline is_introspection_control_response(server_message_content const& x) { return x.type == server_message_content_tag::INTROSPECTION_CONTROL_RESPONSE; } bool static inline is_introspection_status_response(server_message_content const& x) { return x.type == server_message_content_tag::INTROSPECTION_STATUS_RESPONSE; } bool static inline is_resolve_request_response(server_message_content const& x) { return x.type == server_message_content_tag::RESOLVE_REQUEST_RESPONSE; } nil_t const& as_registration_acknowledgement(server_message_content const& x); cradle::websocket_test_response const& as_test(server_message_content const& x); cradle::websocket_cache_response const& as_cache_response(server_message_content const& x); nil_t const& as_cache_insert_acknowledgement(server_message_content const& x); cradle::error_response const& as_error(server_message_content const& x); cradle::iss_object_response const& as_iss_object_response(server_message_content const& x); cradle::resolve_iss_object_response const& as_resolve_iss_object_response(server_message_content const& x); cradle::iss_object_metadata_response const& as_iss_object_metadata_response(server_message_content const& x); cradle::post_iss_object_response const& as_post_iss_object_response(server_message_content const& x); cradle::nil_t const& as_copy_iss_object_response(server_message_content const& x); cradle::nil_t const& as_copy_calculation_response(server_message_content const& x); cradle::post_calculation_response const& as_post_calculation_response(server_message_content const& x); cradle::resolve_meta_chain_response const& as_resolve_meta_chain_response(server_message_content const& x); cradle::calculation_request_response const& as_calculation_request_response(server_message_content const& x); cradle::calculation_diff_response const& as_calculation_diff_response(server_message_content const& x); cradle::calculation_search_response const& as_calculation_search_response(server_message_content const& x); cradle::iss_diff_response const& as_iss_diff_response(server_message_content const& x); cradle::dynamic const& as_local_calc_result(server_message_content const& x); cradle::results_api_response const& as_results_api_response(server_message_content const& x); cradle::local_results_api_response const& as_local_results_api_response(server_message_content const& x); nil_t const& as_introspection_control_response(server_message_content const& x); cradle::introspection_status_response const& as_introspection_status_response(server_message_content const& x); cradle::dynamic const& as_resolve_request_response(server_message_content const& x); nil_t& as_registration_acknowledgement(server_message_content& x); cradle::websocket_test_response& as_test(server_message_content& x); cradle::websocket_cache_response& as_cache_response(server_message_content& x); nil_t& as_cache_insert_acknowledgement(server_message_content& x); cradle::error_response& as_error(server_message_content& x); cradle::iss_object_response& as_iss_object_response(server_message_content& x); cradle::resolve_iss_object_response& as_resolve_iss_object_response(server_message_content& x); cradle::iss_object_metadata_response& as_iss_object_metadata_response(server_message_content& x); cradle::post_iss_object_response& as_post_iss_object_response(server_message_content& x); cradle::nil_t& as_copy_iss_object_response(server_message_content& x); cradle::nil_t& as_copy_calculation_response(server_message_content& x); cradle::post_calculation_response& as_post_calculation_response(server_message_content& x); cradle::resolve_meta_chain_response& as_resolve_meta_chain_response(server_message_content& x); cradle::calculation_request_response& as_calculation_request_response(server_message_content& x); cradle::calculation_diff_response& as_calculation_diff_response(server_message_content& x); cradle::calculation_search_response& as_calculation_search_response(server_message_content& x); cradle::iss_diff_response& as_iss_diff_response(server_message_content& x); cradle::dynamic& as_local_calc_result(server_message_content& x); cradle::results_api_response& as_results_api_response(server_message_content& x); cradle::local_results_api_response& as_local_results_api_response(server_message_content& x); nil_t& as_introspection_control_response(server_message_content& x); cradle::introspection_status_response& as_introspection_status_response(server_message_content& x); cradle::dynamic& as_resolve_request_response(server_message_content& x); void set_to_registration_acknowledgement(server_message_content& x, nil_t const& y); void set_to_registration_acknowledgement(server_message_content& x, nil_t&& y); void set_to_test(server_message_content& x, cradle::websocket_test_response const& y); void set_to_test(server_message_content& x, cradle::websocket_test_response&& y); void set_to_cache_response(server_message_content& x, cradle::websocket_cache_response const& y); void set_to_cache_response(server_message_content& x, cradle::websocket_cache_response&& y); void set_to_cache_insert_acknowledgement(server_message_content& x, nil_t const& y); void set_to_cache_insert_acknowledgement(server_message_content& x, nil_t&& y); void set_to_error(server_message_content& x, cradle::error_response const& y); void set_to_error(server_message_content& x, cradle::error_response&& y); void set_to_iss_object_response(server_message_content& x, cradle::iss_object_response const& y); void set_to_iss_object_response(server_message_content& x, cradle::iss_object_response&& y); void set_to_resolve_iss_object_response(server_message_content& x, cradle::resolve_iss_object_response const& y); void set_to_resolve_iss_object_response(server_message_content& x, cradle::resolve_iss_object_response&& y); void set_to_iss_object_metadata_response(server_message_content& x, cradle::iss_object_metadata_response const& y); void set_to_iss_object_metadata_response(server_message_content& x, cradle::iss_object_metadata_response&& y); void set_to_post_iss_object_response(server_message_content& x, cradle::post_iss_object_response const& y); void set_to_post_iss_object_response(server_message_content& x, cradle::post_iss_object_response&& y); void set_to_copy_iss_object_response(server_message_content& x, cradle::nil_t const& y); void set_to_copy_iss_object_response(server_message_content& x, cradle::nil_t&& y); void set_to_copy_calculation_response(server_message_content& x, cradle::nil_t const& y); void set_to_copy_calculation_response(server_message_content& x, cradle::nil_t&& y); void set_to_post_calculation_response(server_message_content& x, cradle::post_calculation_response const& y); void set_to_post_calculation_response(server_message_content& x, cradle::post_calculation_response&& y); void set_to_resolve_meta_chain_response(server_message_content& x, cradle::resolve_meta_chain_response const& y); void set_to_resolve_meta_chain_response(server_message_content& x, cradle::resolve_meta_chain_response&& y); void set_to_calculation_request_response(server_message_content& x, cradle::calculation_request_response const& y); void set_to_calculation_request_response(server_message_content& x, cradle::calculation_request_response&& y); void set_to_calculation_diff_response(server_message_content& x, cradle::calculation_diff_response const& y); void set_to_calculation_diff_response(server_message_content& x, cradle::calculation_diff_response&& y); void set_to_calculation_search_response(server_message_content& x, cradle::calculation_search_response const& y); void set_to_calculation_search_response(server_message_content& x, cradle::calculation_search_response&& y); void set_to_iss_diff_response(server_message_content& x, cradle::iss_diff_response const& y); void set_to_iss_diff_response(server_message_content& x, cradle::iss_diff_response&& y); void set_to_local_calc_result(server_message_content& x, cradle::dynamic const& y); void set_to_local_calc_result(server_message_content& x, cradle::dynamic&& y); void set_to_results_api_response(server_message_content& x, cradle::results_api_response const& y); void set_to_results_api_response(server_message_content& x, cradle::results_api_response&& y); void set_to_local_results_api_response(server_message_content& x, cradle::local_results_api_response const& y); void set_to_local_results_api_response(server_message_content& x, cradle::local_results_api_response&& y); void set_to_introspection_control_response(server_message_content& x, nil_t const& y); void set_to_introspection_control_response(server_message_content& x, nil_t&& y); void set_to_introspection_status_response(server_message_content& x, cradle::introspection_status_response const& y); void set_to_introspection_status_response(server_message_content& x, cradle::introspection_status_response&& y); void set_to_resolve_request_response(server_message_content& x, cradle::dynamic const& y); void set_to_resolve_request_response(server_message_content& x, cradle::dynamic&& y); bool operator==(server_message_content const& a, server_message_content const& b); bool operator!=(server_message_content const& a, server_message_content const& b); bool operator<(server_message_content const& a, server_message_content const& b); size_t hash_value(server_message_content const& x);void swap(server_message_content& a, server_message_content& b); void to_dynamic(cradle::dynamic* v, server_message_content const& x); void from_dynamic(server_message_content* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, server_message_content const& x); size_t deep_sizeof(server_message_content const& x); 

#line 381 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} namespace cradle { struct websocket_server_message { std::string request_id;  cradle::server_message_content content;  websocket_server_message() {} websocket_server_message(std::string const& request_id, cradle::server_message_content const& content) : request_id(request_id), content(content) {} };  inline websocket_server_message make_websocket_server_message(  std::string request_id, cradle::server_message_content content ) { return websocket_server_message(  std::move(request_id), std::move(content) ); }template<> struct definitive_type_info_query<websocket_server_message> {     static void     get(cradle::api_type_info*); }; template<> struct type_info_query<websocket_server_message> {     static void     get(cradle::api_type_info*); }; template<> struct structure_field_type_info_adder<websocket_server_message> {     static void     add(std::map<std::string, cradle::api_structure_field_info>*); }; bool operator==(websocket_server_message const& a, websocket_server_message const& b); bool operator!=(websocket_server_message const& a, websocket_server_message const& b); bool operator<(websocket_server_message const& a, websocket_server_message const& b); void swap(websocket_server_message& a, websocket_server_message& b); size_t deep_sizeof(websocket_server_message const& x); void write_fields_to_record(cradle::dynamic_map& record, websocket_server_message const& x); void to_dynamic(cradle::dynamic* v, websocket_server_message const& x); void read_fields_from_record(websocket_server_message& x, cradle::dynamic_map const& record); void from_dynamic(websocket_server_message* x, cradle::dynamic const& v); std::ostream& operator<<(std::ostream& s, websocket_server_message const& x);std::ostream& operator<<(std::ostream& s, websocket_server_message const& x);size_t hash_value(websocket_server_message const& x);} namespace cradle { 

#line 388 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
} // namespace cradle

#line 390 "/home/runner/work/cradle/cradle/src/cradle/websocket/messages.hpp"
#endif
